//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g 2018-03-19 22:04:40

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class COOLLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ARROBA=4;
	public const int ASSIGNMENT_LIST=5;
	public const int ASSING=6;
	public const int ATTRIBUTE=7;
	public const int BLOCK=8;
	public const int BODY=9;
	public const int BOOLEAN=10;
	public const int CASE=11;
	public const int CASEBRANCH=12;
	public const int CASEBRANCHES=13;
	public const int CHAR=14;
	public const int CLASS=15;
	public const int CL_LLAVE=16;
	public const int CL_PARENT=17;
	public const int COMA=18;
	public const int COMMENT=19;
	public const int CONDITION=20;
	public const int DIGIT=21;
	public const int DISPATCH=22;
	public const int DIV=23;
	public const int DOUBLEP=24;
	public const int ELSE=25;
	public const int END=26;
	public const int EQ=27;
	public const int ESAC=28;
	public const int ESC_SEQ=29;
	public const int EXPONENT=30;
	public const int FI=31;
	public const int G=32;
	public const int GEQ=33;
	public const int HEX_DIGIT=34;
	public const int ID=35;
	public const int IF=36;
	public const int IMPLICS=37;
	public const int IN=38;
	public const int INHERITS=39;
	public const int ISVOID=40;
	public const int L=41;
	public const int LEQ=42;
	public const int LET=43;
	public const int LOOP=44;
	public const int LOWERCASE=45;
	public const int METHOD=46;
	public const int METHODEFINITION=47;
	public const int MINUS=48;
	public const int MULT=49;
	public const int NANARITA=50;
	public const int NEW=51;
	public const int NL=52;
	public const int NOT=53;
	public const int NUMBER=54;
	public const int OCTAL_ESC=55;
	public const int OF=56;
	public const int OP_LLAVE=57;
	public const int OP_PARENT=58;
	public const int PARAM=59;
	public const int PARAMLIST=60;
	public const int PLUS=61;
	public const int PNT=62;
	public const int POOL=63;
	public const int PROGRAM=64;
	public const int STRING=65;
	public const int THEN=66;
	public const int TYPE=67;
	public const int UNICODE_ESC=68;
	public const int UPERCASE=69;
	public const int VAR_DECLARATION=70;
	public const int VAR_DECLARATION_LIST=71;
	public const int WHILE=72;
	public const int WS=73;

	    public const int HIDDEN = Hidden;
	     public enum tokens
	    {
	        ARROBA = 4, ASSIGNMENT_LIST, ASSING, ATTRIBUTE, BLOCK, BODY, BOOLEAN,
	        CASE, CHAR, CLASS, CL_LLAVE, CL_PARENT, COMA, COMMENT, DIGIT, DISPATCH, DIV,
	        DOUBLEP, ELSE, END, EQ, ESAC, ESC_SEQ, EXPONENT, FI, G, GEQ, HEX_DIGIT, ID,
	        IF, IMPLICS, IN, INHERITS, ISVOID, L, LEQ, LET, LOOP, LOWERCASE, METHOD, METHODEFINITION,
	        MINUS, MULT, NANARITA, NEW, NL, NOT, NUMBER, OCTAL_ESC, OF, OP_LLAVE, OP_PARENT,
	        PARAM, PARAMLIST, PLUS, PNT, POOL, PROGRAM, STRING, THEN, TYPE, UNICODE_ESC,
	        UPERCASE, VAR_DECLARATION, VAR_DECLARATION_LIST, WHILE, WS,

	    }


    // delegates
    // delegators

	public COOLLexer()
	{
		OnCreated();
	}

	public COOLLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public COOLLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_CLASS();
	partial void LeaveRule_CLASS();

	// $ANTLR start "CLASS"
	[GrammarRule("CLASS")]
	private void mCLASS()
	{
		EnterRule_CLASS();
		EnterRule("CLASS", 1);
		TraceIn("CLASS", 1);
		try
		{
			int _type = CLASS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:112:6: ( ( 'class' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:112:8: ( 'class' )
			{
			DebugLocation(112, 8);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:112:8: ( 'class' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:112:9: 'class'
			{
			DebugLocation(112, 9);
			Match("class"); 


			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLASS", 1);
			LeaveRule("CLASS", 1);
			LeaveRule_CLASS();
		}
	}
	// $ANTLR end "CLASS"

	partial void EnterRule_UPERCASE();
	partial void LeaveRule_UPERCASE();

	// $ANTLR start "UPERCASE"
	[GrammarRule("UPERCASE")]
	private void mUPERCASE()
	{
		EnterRule_UPERCASE();
		EnterRule("UPERCASE", 2);
		TraceIn("UPERCASE", 2);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:113:18: ( 'A' .. 'Z' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
			{
			DebugLocation(113, 18);
			if ((input.LA(1)>='A' && input.LA(1)<='Z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("UPERCASE", 2);
			LeaveRule("UPERCASE", 2);
			LeaveRule_UPERCASE();
		}
	}
	// $ANTLR end "UPERCASE"

	partial void EnterRule_LOWERCASE();
	partial void LeaveRule_LOWERCASE();

	// $ANTLR start "LOWERCASE"
	[GrammarRule("LOWERCASE")]
	private void mLOWERCASE()
	{
		EnterRule_LOWERCASE();
		EnterRule("LOWERCASE", 3);
		TraceIn("LOWERCASE", 3);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:114:19: ( 'a' .. 'z' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
			{
			DebugLocation(114, 19);
			if ((input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LOWERCASE", 3);
			LeaveRule("LOWERCASE", 3);
			LeaveRule_LOWERCASE();
		}
	}
	// $ANTLR end "LOWERCASE"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 4);
		TraceIn("DIGIT", 4);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:115:15: ( '0' .. '9' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
			{
			DebugLocation(115, 15);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 4);
			LeaveRule("DIGIT", 4);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_OP_LLAVE();
	partial void LeaveRule_OP_LLAVE();

	// $ANTLR start "OP_LLAVE"
	[GrammarRule("OP_LLAVE")]
	private void mOP_LLAVE()
	{
		EnterRule_OP_LLAVE();
		EnterRule("OP_LLAVE", 5);
		TraceIn("OP_LLAVE", 5);
		try
		{
			int _type = OP_LLAVE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:117:9: ( '{' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:117:11: '{'
			{
			DebugLocation(117, 11);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP_LLAVE", 5);
			LeaveRule("OP_LLAVE", 5);
			LeaveRule_OP_LLAVE();
		}
	}
	// $ANTLR end "OP_LLAVE"

	partial void EnterRule_CL_LLAVE();
	partial void LeaveRule_CL_LLAVE();

	// $ANTLR start "CL_LLAVE"
	[GrammarRule("CL_LLAVE")]
	private void mCL_LLAVE()
	{
		EnterRule_CL_LLAVE();
		EnterRule("CL_LLAVE", 6);
		TraceIn("CL_LLAVE", 6);
		try
		{
			int _type = CL_LLAVE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:118:9: ( '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:118:11: '}'
			{
			DebugLocation(118, 11);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CL_LLAVE", 6);
			LeaveRule("CL_LLAVE", 6);
			LeaveRule_CL_LLAVE();
		}
	}
	// $ANTLR end "CL_LLAVE"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 7);
		TraceIn("END", 7);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:119:4: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:119:6: ';'
			{
			DebugLocation(119, 6);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 7);
			LeaveRule("END", 7);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_DOUBLEP();
	partial void LeaveRule_DOUBLEP();

	// $ANTLR start "DOUBLEP"
	[GrammarRule("DOUBLEP")]
	private void mDOUBLEP()
	{
		EnterRule_DOUBLEP();
		EnterRule("DOUBLEP", 8);
		TraceIn("DOUBLEP", 8);
		try
		{
			int _type = DOUBLEP;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:124:8: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:124:10: ':'
			{
			DebugLocation(124, 10);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOUBLEP", 8);
			LeaveRule("DOUBLEP", 8);
			LeaveRule_DOUBLEP();
		}
	}
	// $ANTLR end "DOUBLEP"

	partial void EnterRule_ASSING();
	partial void LeaveRule_ASSING();

	// $ANTLR start "ASSING"
	[GrammarRule("ASSING")]
	private void mASSING()
	{
		EnterRule_ASSING();
		EnterRule("ASSING", 9);
		TraceIn("ASSING", 9);
		try
		{
			int _type = ASSING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:125:7: ( '<-' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:125:9: '<-'
			{
			DebugLocation(125, 9);
			Match("<-"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSING", 9);
			LeaveRule("ASSING", 9);
			LeaveRule_ASSING();
		}
	}
	// $ANTLR end "ASSING"

	partial void EnterRule_OP_PARENT();
	partial void LeaveRule_OP_PARENT();

	// $ANTLR start "OP_PARENT"
	[GrammarRule("OP_PARENT")]
	private void mOP_PARENT()
	{
		EnterRule_OP_PARENT();
		EnterRule("OP_PARENT", 10);
		TraceIn("OP_PARENT", 10);
		try
		{
			int _type = OP_PARENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:126:10: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:126:12: '('
			{
			DebugLocation(126, 12);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP_PARENT", 10);
			LeaveRule("OP_PARENT", 10);
			LeaveRule_OP_PARENT();
		}
	}
	// $ANTLR end "OP_PARENT"

	partial void EnterRule_CL_PARENT();
	partial void LeaveRule_CL_PARENT();

	// $ANTLR start "CL_PARENT"
	[GrammarRule("CL_PARENT")]
	private void mCL_PARENT()
	{
		EnterRule_CL_PARENT();
		EnterRule("CL_PARENT", 11);
		TraceIn("CL_PARENT", 11);
		try
		{
			int _type = CL_PARENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:127:10: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:127:12: ')'
			{
			DebugLocation(127, 12);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CL_PARENT", 11);
			LeaveRule("CL_PARENT", 11);
			LeaveRule_CL_PARENT();
		}
	}
	// $ANTLR end "CL_PARENT"

	partial void EnterRule_COMA();
	partial void LeaveRule_COMA();

	// $ANTLR start "COMA"
	[GrammarRule("COMA")]
	private void mCOMA()
	{
		EnterRule_COMA();
		EnterRule("COMA", 12);
		TraceIn("COMA", 12);
		try
		{
			int _type = COMA;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:128:5: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:128:7: ','
			{
			DebugLocation(128, 7);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMA", 12);
			LeaveRule("COMA", 12);
			LeaveRule_COMA();
		}
	}
	// $ANTLR end "COMA"

	partial void EnterRule_NUMBER();
	partial void LeaveRule_NUMBER();

	// $ANTLR start "NUMBER"
	[GrammarRule("NUMBER")]
	private void mNUMBER()
	{
		EnterRule_NUMBER();
		EnterRule("NUMBER", 13);
		TraceIn("NUMBER", 13);
		try
		{
			int _type = NUMBER;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:129:7: ( ( DIGIT )+ '.' ( DIGIT )+ | ( DIGIT )+ )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:129:9: ( DIGIT )+ '.' ( DIGIT )+
				{
				DebugLocation(129, 9);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:129:9: ( DIGIT )+
				int cnt1=0;
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if (((LA1_0>='0' && LA1_0<='9')))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch (alt1)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
						{
						DebugLocation(129, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt1 >= 1)
							goto loop1;

						EarlyExitException eee1 = new EarlyExitException( 1, input );
						DebugRecognitionException(eee1);
						throw eee1;
					}
					cnt1++;
				}
				loop1:
					;

				} finally { DebugExitSubRule(1); }

				DebugLocation(129, 18);
				Match('.'); 
				DebugLocation(129, 22);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:129:22: ( DIGIT )+
				int cnt2=0;
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_0 = input.LA(1);

					if (((LA2_0>='0' && LA2_0<='9')))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch (alt2)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
						{
						DebugLocation(129, 22);
						input.Consume();


						}
						break;

					default:
						if (cnt2 >= 1)
							goto loop2;

						EarlyExitException eee2 = new EarlyExitException( 2, input );
						DebugRecognitionException(eee2);
						throw eee2;
					}
					cnt2++;
				}
				loop2:
					;

				} finally { DebugExitSubRule(2); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:129:31: ( DIGIT )+
				{
				DebugLocation(129, 31);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:129:31: ( DIGIT )+
				int cnt3=0;
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>='0' && LA3_0<='9')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
						{
						DebugLocation(129, 31);
						input.Consume();


						}
						break;

					default:
						if (cnt3 >= 1)
							goto loop3;

						EarlyExitException eee3 = new EarlyExitException( 3, input );
						DebugRecognitionException(eee3);
						throw eee3;
					}
					cnt3++;
				}
				loop3:
					;

				} finally { DebugExitSubRule(3); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER", 13);
			LeaveRule("NUMBER", 13);
			LeaveRule_NUMBER();
		}
	}
	// $ANTLR end "NUMBER"

	partial void EnterRule_BOOLEAN();
	partial void LeaveRule_BOOLEAN();

	// $ANTLR start "BOOLEAN"
	[GrammarRule("BOOLEAN")]
	private void mBOOLEAN()
	{
		EnterRule_BOOLEAN();
		EnterRule("BOOLEAN", 14);
		TraceIn("BOOLEAN", 14);
		try
		{
			int _type = BOOLEAN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:130:8: ( 'true' | 'false' )
			int alt5=2;
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0=='t'))
			{
				alt5 = 1;
			}
			else if ((LA5_0=='f'))
			{
				alt5 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:130:10: 'true'
				{
				DebugLocation(130, 10);
				Match("true"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:130:17: 'false'
				{
				DebugLocation(130, 17);
				Match("false"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOLEAN", 14);
			LeaveRule("BOOLEAN", 14);
			LeaveRule_BOOLEAN();
		}
	}
	// $ANTLR end "BOOLEAN"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 15);
		TraceIn("IF", 15);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:131:3: ( 'if' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:131:5: 'if'
			{
			DebugLocation(131, 5);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 15);
			LeaveRule("IF", 15);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 16);
		TraceIn("THEN", 16);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:132:5: ( 'then' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:132:7: 'then'
			{
			DebugLocation(132, 7);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 16);
			LeaveRule("THEN", 16);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 17);
		TraceIn("ELSE", 17);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:133:5: ( 'else' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:133:7: 'else'
			{
			DebugLocation(133, 7);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 17);
			LeaveRule("ELSE", 17);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_FI();
	partial void LeaveRule_FI();

	// $ANTLR start "FI"
	[GrammarRule("FI")]
	private void mFI()
	{
		EnterRule_FI();
		EnterRule("FI", 18);
		TraceIn("FI", 18);
		try
		{
			int _type = FI;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:134:3: ( 'fi' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:134:5: 'fi'
			{
			DebugLocation(134, 5);
			Match("fi"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FI", 18);
			LeaveRule("FI", 18);
			LeaveRule_FI();
		}
	}
	// $ANTLR end "FI"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 19);
		TraceIn("WHILE", 19);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:135:6: ( 'while' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:135:8: 'while'
			{
			DebugLocation(135, 8);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 19);
			LeaveRule("WHILE", 19);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_LOOP();
	partial void LeaveRule_LOOP();

	// $ANTLR start "LOOP"
	[GrammarRule("LOOP")]
	private void mLOOP()
	{
		EnterRule_LOOP();
		EnterRule("LOOP", 20);
		TraceIn("LOOP", 20);
		try
		{
			int _type = LOOP;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:136:5: ( 'loop' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:136:7: 'loop'
			{
			DebugLocation(136, 7);
			Match("loop"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOOP", 20);
			LeaveRule("LOOP", 20);
			LeaveRule_LOOP();
		}
	}
	// $ANTLR end "LOOP"

	partial void EnterRule_POOL();
	partial void LeaveRule_POOL();

	// $ANTLR start "POOL"
	[GrammarRule("POOL")]
	private void mPOOL()
	{
		EnterRule_POOL();
		EnterRule("POOL", 21);
		TraceIn("POOL", 21);
		try
		{
			int _type = POOL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:137:5: ( 'pool' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:137:7: 'pool'
			{
			DebugLocation(137, 7);
			Match("pool"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("POOL", 21);
			LeaveRule("POOL", 21);
			LeaveRule_POOL();
		}
	}
	// $ANTLR end "POOL"

	partial void EnterRule_LET();
	partial void LeaveRule_LET();

	// $ANTLR start "LET"
	[GrammarRule("LET")]
	private void mLET()
	{
		EnterRule_LET();
		EnterRule("LET", 22);
		TraceIn("LET", 22);
		try
		{
			int _type = LET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:138:5: ( 'let' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:138:8: 'let'
			{
			DebugLocation(138, 8);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LET", 22);
			LeaveRule("LET", 22);
			LeaveRule_LET();
		}
	}
	// $ANTLR end "LET"

	partial void EnterRule_IN();
	partial void LeaveRule_IN();

	// $ANTLR start "IN"
	[GrammarRule("IN")]
	private void mIN()
	{
		EnterRule_IN();
		EnterRule("IN", 23);
		TraceIn("IN", 23);
		try
		{
			int _type = IN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:139:3: ( 'in' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:139:5: 'in'
			{
			DebugLocation(139, 5);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN", 23);
			LeaveRule("IN", 23);
			LeaveRule_IN();
		}
	}
	// $ANTLR end "IN"

	partial void EnterRule_CASE();
	partial void LeaveRule_CASE();

	// $ANTLR start "CASE"
	[GrammarRule("CASE")]
	private void mCASE()
	{
		EnterRule_CASE();
		EnterRule("CASE", 24);
		TraceIn("CASE", 24);
		try
		{
			int _type = CASE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:140:5: ( 'case' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:140:7: 'case'
			{
			DebugLocation(140, 7);
			Match("case"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CASE", 24);
			LeaveRule("CASE", 24);
			LeaveRule_CASE();
		}
	}
	// $ANTLR end "CASE"

	partial void EnterRule_OF();
	partial void LeaveRule_OF();

	// $ANTLR start "OF"
	[GrammarRule("OF")]
	private void mOF()
	{
		EnterRule_OF();
		EnterRule("OF", 25);
		TraceIn("OF", 25);
		try
		{
			int _type = OF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:141:3: ( 'of' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:141:5: 'of'
			{
			DebugLocation(141, 5);
			Match("of"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OF", 25);
			LeaveRule("OF", 25);
			LeaveRule_OF();
		}
	}
	// $ANTLR end "OF"

	partial void EnterRule_ESAC();
	partial void LeaveRule_ESAC();

	// $ANTLR start "ESAC"
	[GrammarRule("ESAC")]
	private void mESAC()
	{
		EnterRule_ESAC();
		EnterRule("ESAC", 26);
		TraceIn("ESAC", 26);
		try
		{
			int _type = ESAC;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:142:5: ( 'esac' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:142:7: 'esac'
			{
			DebugLocation(142, 7);
			Match("esac"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ESAC", 26);
			LeaveRule("ESAC", 26);
			LeaveRule_ESAC();
		}
	}
	// $ANTLR end "ESAC"

	partial void EnterRule_NEW();
	partial void LeaveRule_NEW();

	// $ANTLR start "NEW"
	[GrammarRule("NEW")]
	private void mNEW()
	{
		EnterRule_NEW();
		EnterRule("NEW", 27);
		TraceIn("NEW", 27);
		try
		{
			int _type = NEW;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:143:4: ( 'new' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:143:6: 'new'
			{
			DebugLocation(143, 6);
			Match("new"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEW", 27);
			LeaveRule("NEW", 27);
			LeaveRule_NEW();
		}
	}
	// $ANTLR end "NEW"

	partial void EnterRule_ISVOID();
	partial void LeaveRule_ISVOID();

	// $ANTLR start "ISVOID"
	[GrammarRule("ISVOID")]
	private void mISVOID()
	{
		EnterRule_ISVOID();
		EnterRule("ISVOID", 28);
		TraceIn("ISVOID", 28);
		try
		{
			int _type = ISVOID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:144:7: ( 'isvoid' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:144:9: 'isvoid'
			{
			DebugLocation(144, 9);
			Match("isvoid"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ISVOID", 28);
			LeaveRule("ISVOID", 28);
			LeaveRule_ISVOID();
		}
	}
	// $ANTLR end "ISVOID"

	partial void EnterRule_ARROBA();
	partial void LeaveRule_ARROBA();

	// $ANTLR start "ARROBA"
	[GrammarRule("ARROBA")]
	private void mARROBA()
	{
		EnterRule_ARROBA();
		EnterRule("ARROBA", 29);
		TraceIn("ARROBA", 29);
		try
		{
			int _type = ARROBA;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:145:7: ( '@' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:145:9: '@'
			{
			DebugLocation(145, 9);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ARROBA", 29);
			LeaveRule("ARROBA", 29);
			LeaveRule_ARROBA();
		}
	}
	// $ANTLR end "ARROBA"

	partial void EnterRule_PNT();
	partial void LeaveRule_PNT();

	// $ANTLR start "PNT"
	[GrammarRule("PNT")]
	private void mPNT()
	{
		EnterRule_PNT();
		EnterRule("PNT", 30);
		TraceIn("PNT", 30);
		try
		{
			int _type = PNT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:146:4: ( '.' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:146:6: '.'
			{
			DebugLocation(146, 6);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PNT", 30);
			LeaveRule("PNT", 30);
			LeaveRule_PNT();
		}
	}
	// $ANTLR end "PNT"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 31);
		TraceIn("NOT", 31);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:147:4: ( 'not' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:147:6: 'not'
			{
			DebugLocation(147, 6);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 31);
			LeaveRule("NOT", 31);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_LEQ();
	partial void LeaveRule_LEQ();

	// $ANTLR start "LEQ"
	[GrammarRule("LEQ")]
	private void mLEQ()
	{
		EnterRule_LEQ();
		EnterRule("LEQ", 32);
		TraceIn("LEQ", 32);
		try
		{
			int _type = LEQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:148:4: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:148:6: '<='
			{
			DebugLocation(148, 6);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LEQ", 32);
			LeaveRule("LEQ", 32);
			LeaveRule_LEQ();
		}
	}
	// $ANTLR end "LEQ"

	partial void EnterRule_GEQ();
	partial void LeaveRule_GEQ();

	// $ANTLR start "GEQ"
	[GrammarRule("GEQ")]
	private void mGEQ()
	{
		EnterRule_GEQ();
		EnterRule("GEQ", 33);
		TraceIn("GEQ", 33);
		try
		{
			int _type = GEQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:149:4: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:149:6: '>='
			{
			DebugLocation(149, 6);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GEQ", 33);
			LeaveRule("GEQ", 33);
			LeaveRule_GEQ();
		}
	}
	// $ANTLR end "GEQ"

	partial void EnterRule_L();
	partial void LeaveRule_L();

	// $ANTLR start "L"
	[GrammarRule("L")]
	private void mL()
	{
		EnterRule_L();
		EnterRule("L", 34);
		TraceIn("L", 34);
		try
		{
			int _type = L;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:150:2: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:150:4: '<'
			{
			DebugLocation(150, 4);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("L", 34);
			LeaveRule("L", 34);
			LeaveRule_L();
		}
	}
	// $ANTLR end "L"

	partial void EnterRule_G();
	partial void LeaveRule_G();

	// $ANTLR start "G"
	[GrammarRule("G")]
	private void mG()
	{
		EnterRule_G();
		EnterRule("G", 35);
		TraceIn("G", 35);
		try
		{
			int _type = G;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:151:2: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:151:4: '>'
			{
			DebugLocation(151, 4);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("G", 35);
			LeaveRule("G", 35);
			LeaveRule_G();
		}
	}
	// $ANTLR end "G"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 36);
		TraceIn("EQ", 36);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:152:3: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:152:5: '='
			{
			DebugLocation(152, 5);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 36);
			LeaveRule("EQ", 36);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 37);
		TraceIn("PLUS", 37);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:153:5: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:153:7: '+'
			{
			DebugLocation(153, 7);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 37);
			LeaveRule("PLUS", 37);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 38);
		TraceIn("MINUS", 38);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:154:6: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:154:8: '-'
			{
			DebugLocation(154, 8);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 38);
			LeaveRule("MINUS", 38);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MULT();
	partial void LeaveRule_MULT();

	// $ANTLR start "MULT"
	[GrammarRule("MULT")]
	private void mMULT()
	{
		EnterRule_MULT();
		EnterRule("MULT", 39);
		TraceIn("MULT", 39);
		try
		{
			int _type = MULT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:155:5: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:155:7: '*'
			{
			DebugLocation(155, 7);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULT", 39);
			LeaveRule("MULT", 39);
			LeaveRule_MULT();
		}
	}
	// $ANTLR end "MULT"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 40);
		TraceIn("DIV", 40);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:156:4: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:156:6: '/'
			{
			DebugLocation(156, 6);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 40);
			LeaveRule("DIV", 40);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_NANARITA();
	partial void LeaveRule_NANARITA();

	// $ANTLR start "NANARITA"
	[GrammarRule("NANARITA")]
	private void mNANARITA()
	{
		EnterRule_NANARITA();
		EnterRule("NANARITA", 41);
		TraceIn("NANARITA", 41);
		try
		{
			int _type = NANARITA;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:157:9: ( '~' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:157:11: '~'
			{
			DebugLocation(157, 11);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NANARITA", 41);
			LeaveRule("NANARITA", 41);
			LeaveRule_NANARITA();
		}
	}
	// $ANTLR end "NANARITA"

	partial void EnterRule_IMPLICS();
	partial void LeaveRule_IMPLICS();

	// $ANTLR start "IMPLICS"
	[GrammarRule("IMPLICS")]
	private void mIMPLICS()
	{
		EnterRule_IMPLICS();
		EnterRule("IMPLICS", 42);
		TraceIn("IMPLICS", 42);
		try
		{
			int _type = IMPLICS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:158:9: ( '=>' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:158:11: '=>'
			{
			DebugLocation(158, 11);
			Match("=>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IMPLICS", 42);
			LeaveRule("IMPLICS", 42);
			LeaveRule_IMPLICS();
		}
	}
	// $ANTLR end "IMPLICS"

	partial void EnterRule_INHERITS();
	partial void LeaveRule_INHERITS();

	// $ANTLR start "INHERITS"
	[GrammarRule("INHERITS")]
	private void mINHERITS()
	{
		EnterRule_INHERITS();
		EnterRule("INHERITS", 43);
		TraceIn("INHERITS", 43);
		try
		{
			int _type = INHERITS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:159:9: ( 'inherits' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:159:11: 'inherits'
			{
			DebugLocation(159, 11);
			Match("inherits"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INHERITS", 43);
			LeaveRule("INHERITS", 43);
			LeaveRule_INHERITS();
		}
	}
	// $ANTLR end "INHERITS"

	partial void EnterRule_NL();
	partial void LeaveRule_NL();

	// $ANTLR start "NL"
	[GrammarRule("NL")]
	private void mNL()
	{
		EnterRule_NL();
		EnterRule("NL", 44);
		TraceIn("NL", 44);
		try
		{
			int _type = NL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:162:4: ( ( '\\n' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:162:6: ( '\\n' )+
			{
			DebugLocation(162, 6);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:162:6: ( '\\n' )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0=='\n'))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:162:7: '\\n'
					{
					DebugLocation(162, 7);
					Match('\n'); 

					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(162, 14);
			_channel=HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NL", 44);
			LeaveRule("NL", 44);
			LeaveRule_NL();
		}
	}
	// $ANTLR end "NL"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 45);
		TraceIn("COMMENT", 45);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:174:5: ( '--' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '(*' ( options {greedy=false; } : . )* '*)' )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0=='-'))
			{
				alt10 = 1;
			}
			else if ((LA10_0=='('))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:174:9: '--' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
				{
				DebugLocation(174, 9);
				Match("--"); 

				DebugLocation(174, 14);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:174:14: (~ ( '\\n' | '\\r' ) )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>='\u0000' && LA7_0<='\t')||(LA7_0>='\u000B' && LA7_0<='\f')||(LA7_0>='\u000E' && LA7_0<='\uFFFF')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
						{
						DebugLocation(174, 14);
						input.Consume();


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(174, 28);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:174:28: ( '\\r' )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0=='\r'))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:174:28: '\\r'
					{
					DebugLocation(174, 28);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(174, 34);
				Match('\n'); 
				DebugLocation(174, 39);
				_channel=HIDDEN;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:175:9: '(*' ( options {greedy=false; } : . )* '*)'
				{
				DebugLocation(175, 9);
				Match("(*"); 

				DebugLocation(175, 14);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:175:14: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, false);
					int LA9_0 = input.LA(1);

					if ((LA9_0=='*'))
					{
						int LA9_1 = input.LA(2);

						if ((LA9_1==')'))
						{
							alt9 = 2;
						}
						else if (((LA9_1>='\u0000' && LA9_1<='(')||(LA9_1>='*' && LA9_1<='\uFFFF')))
						{
							alt9 = 1;
						}


					}
					else if (((LA9_0>='\u0000' && LA9_0<=')')||(LA9_0>='+' && LA9_0<='\uFFFF')))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch ( alt9 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:175:42: .
						{
						DebugLocation(175, 42);
						MatchAny(); 

						}
						break;

					default:
						goto loop9;
					}
				}

				loop9:
					;

				} finally { DebugExitSubRule(9); }

				DebugLocation(175, 47);
				Match("*)"); 

				DebugLocation(175, 52);
				_channel=HIDDEN;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 45);
			LeaveRule("COMMENT", 45);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 46);
		TraceIn("WS", 46);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:178:3: ( ( ' ' | '\\t' | '\\r' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:178:7: ( ' ' | '\\t' | '\\r' )
			{
			DebugLocation(178, 7);
			if (input.LA(1)=='\t'||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(181, 11);
			_channel=HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 46);
			LeaveRule("WS", 46);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 47);
		TraceIn("STRING", 47);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:185:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:185:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(185, 8);
			Match('\"'); 
			DebugLocation(185, 12);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:185:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=3;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0=='\\'))
				{
					alt11 = 1;
				}
				else if (((LA11_0>='\u0000' && LA11_0<='!')||(LA11_0>='#' && LA11_0<='[')||(LA11_0>=']' && LA11_0<='\uFFFF')))
				{
					alt11 = 2;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:185:14: ESC_SEQ
					{
					DebugLocation(185, 14);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:185:24: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(185, 24);
					input.Consume();


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(185, 39);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 47);
			LeaveRule("STRING", 47);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_CHAR();
	partial void LeaveRule_CHAR();

	// $ANTLR start "CHAR"
	[GrammarRule("CHAR")]
	private void mCHAR()
	{
		EnterRule_CHAR();
		EnterRule("CHAR", 48);
		TraceIn("CHAR", 48);
		try
		{
			int _type = CHAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:188:5: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:188:8: '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\''
			{
			DebugLocation(188, 8);
			Match('\''); 
			DebugLocation(188, 13);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:188:13: ( ESC_SEQ |~ ( '\\'' | '\\\\' ) )
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0=='\\'))
			{
				alt12 = 1;
			}
			else if (((LA12_0>='\u0000' && LA12_0<='&')||(LA12_0>='(' && LA12_0<='[')||(LA12_0>=']' && LA12_0<='\uFFFF')))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:188:15: ESC_SEQ
				{
				DebugLocation(188, 15);
				mESC_SEQ(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:188:25: ~ ( '\\'' | '\\\\' )
				{
				DebugLocation(188, 25);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(188, 40);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAR", 48);
			LeaveRule("CHAR", 48);
			LeaveRule_CHAR();
		}
	}
	// $ANTLR end "CHAR"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 49);
		TraceIn("EXPONENT", 49);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:193:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:193:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(193, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(193, 22);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:193:22: ( '+' | '-' )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0=='+'||LA13_0=='-'))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
				{
				DebugLocation(193, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(193, 33);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:193:33: ( '0' .. '9' )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if (((LA14_0>='0' && LA14_0<='9')))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
					{
					DebugLocation(193, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 49);
			LeaveRule("EXPONENT", 49);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 50);
		TraceIn("HEX_DIGIT", 50);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:196:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
			{
			DebugLocation(196, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 50);
			LeaveRule("HEX_DIGIT", 50);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 51);
		TraceIn("ESC_SEQ", 51);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:200:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt15 = 1;
					}
					break;
				case 'u':
					{
					alt15 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt15 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:200:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(200, 9);
				Match('\\'); 
				DebugLocation(200, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:201:9: UNICODE_ESC
				{
				DebugLocation(201, 9);
				mUNICODE_ESC(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:202:9: OCTAL_ESC
				{
				DebugLocation(202, 9);
				mOCTAL_ESC(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("ESC_SEQ", 51);
			LeaveRule("ESC_SEQ", 51);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_OCTAL_ESC();
	partial void LeaveRule_OCTAL_ESC();

	// $ANTLR start "OCTAL_ESC"
	[GrammarRule("OCTAL_ESC")]
	private void mOCTAL_ESC()
	{
		EnterRule_OCTAL_ESC();
		EnterRule("OCTAL_ESC", 52);
		TraceIn("OCTAL_ESC", 52);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:207:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt16=3;
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0=='\\'))
			{
				int LA16_1 = input.LA(2);

				if (((LA16_1>='0' && LA16_1<='3')))
				{
					int LA16_2 = input.LA(3);

					if (((LA16_2>='0' && LA16_2<='7')))
					{
						int LA16_4 = input.LA(4);

						if (((LA16_4>='0' && LA16_4<='7')))
						{
							alt16 = 1;
						}
						else
						{
							alt16 = 2;
						}
					}
					else
					{
						alt16 = 3;
					}
				}
				else if (((LA16_1>='4' && LA16_1<='7')))
				{
					int LA16_3 = input.LA(3);

					if (((LA16_3>='0' && LA16_3<='7')))
					{
						alt16 = 2;
					}
					else
					{
						alt16 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:207:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(207, 9);
				Match('\\'); 
				DebugLocation(207, 14);
				input.Consume();

				DebugLocation(207, 25);
				input.Consume();

				DebugLocation(207, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:208:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(208, 9);
				Match('\\'); 
				DebugLocation(208, 14);
				input.Consume();

				DebugLocation(208, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:209:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(209, 9);
				Match('\\'); 
				DebugLocation(209, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCTAL_ESC", 52);
			LeaveRule("OCTAL_ESC", 52);
			LeaveRule_OCTAL_ESC();
		}
	}
	// $ANTLR end "OCTAL_ESC"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 53);
		TraceIn("UNICODE_ESC", 53);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:214:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:214:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(214, 9);
			Match('\\'); 
			DebugLocation(214, 14);
			Match('u'); 
			DebugLocation(214, 18);
			mHEX_DIGIT(); 
			DebugLocation(214, 28);
			mHEX_DIGIT(); 
			DebugLocation(214, 38);
			mHEX_DIGIT(); 
			DebugLocation(214, 48);
			mHEX_DIGIT(); 

			}

		}
		finally
		{
			TraceOut("UNICODE_ESC", 53);
			LeaveRule("UNICODE_ESC", 53);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 54);
		TraceIn("ID", 54);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:217:2: ( ( LOWERCASE | '_' ) ( LOWERCASE | UPERCASE | DIGIT | '_' )* )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:218:2: ( LOWERCASE | '_' ) ( LOWERCASE | UPERCASE | DIGIT | '_' )*
			{
			DebugLocation(218, 2);
			if (input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(218, 17);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:218:17: ( LOWERCASE | UPERCASE | DIGIT | '_' )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if (((LA17_0>='0' && LA17_0<='9')||(LA17_0>='A' && LA17_0<='Z')||LA17_0=='_'||(LA17_0>='a' && LA17_0<='z')))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
					{
					DebugLocation(218, 17);
					input.Consume();


					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 54);
			LeaveRule("ID", 54);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 55);
		TraceIn("TYPE", 55);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:222:5: ( ( UPERCASE ) ( LOWERCASE | UPERCASE | DIGIT | '_' )* )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:222:6: ( UPERCASE ) ( LOWERCASE | UPERCASE | DIGIT | '_' )*
			{
			DebugLocation(222, 6);
			if ((input.LA(1)>='A' && input.LA(1)<='Z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(222, 17);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:222:17: ( LOWERCASE | UPERCASE | DIGIT | '_' )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if (((LA18_0>='0' && LA18_0<='9')||(LA18_0>='A' && LA18_0<='Z')||LA18_0=='_'||(LA18_0>='a' && LA18_0<='z')))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
					{
					DebugLocation(222, 17);
					input.Consume();


					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 55);
			LeaveRule("TYPE", 55);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	public override void mTokens()
	{
		// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:8: ( CLASS | OP_LLAVE | CL_LLAVE | END | DOUBLEP | ASSING | OP_PARENT | CL_PARENT | COMA | NUMBER | BOOLEAN | IF | THEN | ELSE | FI | WHILE | LOOP | POOL | LET | IN | CASE | OF | ESAC | NEW | ISVOID | ARROBA | PNT | NOT | LEQ | GEQ | L | G | EQ | PLUS | MINUS | MULT | DIV | NANARITA | IMPLICS | INHERITS | NL | COMMENT | WS | STRING | CHAR | ID | TYPE )
		int alt19=47;
		try { DebugEnterDecision(19, false);
		try
		{
			alt19 = dfa19.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(19); }
		switch (alt19)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:10: CLASS
			{
			DebugLocation(1, 10);
			mCLASS(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:16: OP_LLAVE
			{
			DebugLocation(1, 16);
			mOP_LLAVE(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:25: CL_LLAVE
			{
			DebugLocation(1, 25);
			mCL_LLAVE(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:34: END
			{
			DebugLocation(1, 34);
			mEND(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:38: DOUBLEP
			{
			DebugLocation(1, 38);
			mDOUBLEP(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:46: ASSING
			{
			DebugLocation(1, 46);
			mASSING(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:53: OP_PARENT
			{
			DebugLocation(1, 53);
			mOP_PARENT(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:63: CL_PARENT
			{
			DebugLocation(1, 63);
			mCL_PARENT(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:73: COMA
			{
			DebugLocation(1, 73);
			mCOMA(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:78: NUMBER
			{
			DebugLocation(1, 78);
			mNUMBER(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:85: BOOLEAN
			{
			DebugLocation(1, 85);
			mBOOLEAN(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:93: IF
			{
			DebugLocation(1, 93);
			mIF(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:96: THEN
			{
			DebugLocation(1, 96);
			mTHEN(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:101: ELSE
			{
			DebugLocation(1, 101);
			mELSE(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:106: FI
			{
			DebugLocation(1, 106);
			mFI(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:109: WHILE
			{
			DebugLocation(1, 109);
			mWHILE(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:115: LOOP
			{
			DebugLocation(1, 115);
			mLOOP(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:120: POOL
			{
			DebugLocation(1, 120);
			mPOOL(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:125: LET
			{
			DebugLocation(1, 125);
			mLET(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:129: IN
			{
			DebugLocation(1, 129);
			mIN(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:132: CASE
			{
			DebugLocation(1, 132);
			mCASE(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:137: OF
			{
			DebugLocation(1, 137);
			mOF(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:140: ESAC
			{
			DebugLocation(1, 140);
			mESAC(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:145: NEW
			{
			DebugLocation(1, 145);
			mNEW(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:149: ISVOID
			{
			DebugLocation(1, 149);
			mISVOID(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:156: ARROBA
			{
			DebugLocation(1, 156);
			mARROBA(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:163: PNT
			{
			DebugLocation(1, 163);
			mPNT(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:167: NOT
			{
			DebugLocation(1, 167);
			mNOT(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:171: LEQ
			{
			DebugLocation(1, 171);
			mLEQ(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:175: GEQ
			{
			DebugLocation(1, 175);
			mGEQ(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:179: L
			{
			DebugLocation(1, 179);
			mL(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:181: G
			{
			DebugLocation(1, 181);
			mG(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:183: EQ
			{
			DebugLocation(1, 183);
			mEQ(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:186: PLUS
			{
			DebugLocation(1, 186);
			mPLUS(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:191: MINUS
			{
			DebugLocation(1, 191);
			mMINUS(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:197: MULT
			{
			DebugLocation(1, 197);
			mMULT(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:202: DIV
			{
			DebugLocation(1, 202);
			mDIV(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:206: NANARITA
			{
			DebugLocation(1, 206);
			mNANARITA(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:215: IMPLICS
			{
			DebugLocation(1, 215);
			mIMPLICS(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:223: INHERITS
			{
			DebugLocation(1, 223);
			mINHERITS(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:232: NL
			{
			DebugLocation(1, 232);
			mNL(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:235: COMMENT
			{
			DebugLocation(1, 235);
			mCOMMENT(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:243: WS
			{
			DebugLocation(1, 243);
			mWS(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:246: STRING
			{
			DebugLocation(1, 246);
			mSTRING(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:253: CHAR
			{
			DebugLocation(1, 253);
			mCHAR(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:258: ID
			{
			DebugLocation(1, 258);
			mID(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:1:261: TYPE
			{
			DebugLocation(1, 261);
			mTYPE(); 

			}
			break;

		}

	}


	#region DFA
	DFA4 dfa4;
	DFA19 dfa19;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4(this);
		dfa19 = new DFA19(this);
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA4_eofS =
			"\x4\xFFFF";
		private const string DFA4_minS =
			"\x1\x30\x1\x2E\x2\xFFFF";
		private const string DFA4_maxS =
			"\x2\x39\x2\xFFFF";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA4_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\xA\x1",
				"\x1\x2\x1\xFFFF\xA\x1",
				"",
				""
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "129:1: NUMBER : ( ( DIGIT )+ '.' ( DIGIT )+ | ( DIGIT )+ );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA19 : DFA
	{
		private const string DFA19_eotS =
			"\x1\xFFFF\x1\x21\x4\xFFFF\x1\x27\x1\x29\x3\xFFFF\x9\x21\x2\xFFFF\x1\x3B"+
			"\x1\x3D\x1\xFFFF\x1\x3E\x9\xFFFF\x2\x21\x5\xFFFF\x3\x21\x1\x44\x1\x45"+
			"\x1\x47\x7\x21\x1\x4F\x2\x21\x5\xFFFF\x5\x21\x2\xFFFF\x1\x21\x1\xFFFF"+
			"\x5\x21\x1\x5D\x1\x21\x1\xFFFF\x1\x5F\x1\x60\x1\x21\x1\x62\x1\x63\x1"+
			"\x64\x3\x21\x1\x68\x1\x69\x1\x21\x1\x6B\x1\xFFFF\x1\x6C\x2\xFFFF\x1\x6D"+
			"\x3\xFFFF\x1\x63\x2\x21\x2\xFFFF\x1\x70\x3\xFFFF\x1\x21\x1\x72\x1\xFFFF"+
			"\x1\x21\x1\xFFFF\x1\x74\x1\xFFFF";
		private const string DFA19_eofS =
			"\x75\xFFFF";
		private const string DFA19_minS =
			"\x1\x9\x1\x61\x4\xFFFF\x1\x2D\x1\x2A\x3\xFFFF\x1\x68\x1\x61\x1\x66\x1"+
			"\x6C\x1\x68\x1\x65\x1\x6F\x1\x66\x1\x65\x2\xFFFF\x1\x3D\x1\x3E\x1\xFFFF"+
			"\x1\x2D\x9\xFFFF\x1\x61\x1\x73\x5\xFFFF\x1\x75\x1\x65\x1\x6C\x3\x30\x1"+
			"\x76\x1\x73\x1\x61\x1\x69\x1\x6F\x1\x74\x1\x6F\x1\x30\x1\x77\x1\x74\x5"+
			"\xFFFF\x1\x73\x2\x65\x1\x6E\x1\x73\x2\xFFFF\x1\x65\x1\xFFFF\x1\x6F\x1"+
			"\x65\x1\x63\x1\x6C\x1\x70\x1\x30\x1\x6C\x1\xFFFF\x2\x30\x1\x73\x3\x30"+
			"\x1\x65\x1\x72\x1\x69\x2\x30\x1\x65\x1\x30\x1\xFFFF\x1\x30\x2\xFFFF\x1"+
			"\x30\x3\xFFFF\x1\x30\x1\x69\x1\x64\x2\xFFFF\x1\x30\x3\xFFFF\x1\x74\x1"+
			"\x30\x1\xFFFF\x1\x73\x1\xFFFF\x1\x30\x1\xFFFF";
		private const string DFA19_maxS =
			"\x1\x7E\x1\x6C\x4\xFFFF\x1\x3D\x1\x2A\x3\xFFFF\x1\x72\x1\x69\x2\x73\x1"+
			"\x68\x2\x6F\x1\x66\x1\x6F\x2\xFFFF\x1\x3D\x1\x3E\x1\xFFFF\x1\x2D\x9\xFFFF"+
			"\x1\x61\x1\x73\x5\xFFFF\x1\x75\x1\x65\x1\x6C\x3\x7A\x1\x76\x1\x73\x1"+
			"\x61\x1\x69\x1\x6F\x1\x74\x1\x6F\x1\x7A\x1\x77\x1\x74\x5\xFFFF\x1\x73"+
			"\x2\x65\x1\x6E\x1\x73\x2\xFFFF\x1\x65\x1\xFFFF\x1\x6F\x1\x65\x1\x63\x1"+
			"\x6C\x1\x70\x1\x7A\x1\x6C\x1\xFFFF\x2\x7A\x1\x73\x3\x7A\x1\x65\x1\x72"+
			"\x1\x69\x2\x7A\x1\x65\x1\x7A\x1\xFFFF\x1\x7A\x2\xFFFF\x1\x7A\x3\xFFFF"+
			"\x1\x7A\x1\x69\x1\x64\x2\xFFFF\x1\x7A\x3\xFFFF\x1\x74\x1\x7A\x1\xFFFF"+
			"\x1\x73\x1\xFFFF\x1\x7A\x1\xFFFF";
		private const string DFA19_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x2\xFFFF\x1\x8\x1\x9\x1\xA\x9\xFFFF"+
			"\x1\x1A\x1\x1B\x2\xFFFF\x1\x22\x1\xFFFF\x1\x24\x1\x25\x1\x26\x1\x29\x1"+
			"\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x2\xFFFF\x1\x6\x1\x1D\x1\x1F\x1\x2A"+
			"\x1\x7\x10\xFFFF\x1\x1E\x1\x20\x1\x27\x1\x21\x1\x23\x5\xFFFF\x1\xF\x1"+
			"\xC\x1\xFFFF\x1\x14\x7\xFFFF\x1\x16\xD\xFFFF\x1\x13\x1\xFFFF\x1\x18\x1"+
			"\x1C\x1\xFFFF\x1\x15\x1\xB\x1\xD\x3\xFFFF\x1\xE\x1\x17\x1\xFFFF\x1\x11"+
			"\x1\x12\x1\x1\x2\xFFFF\x1\x10\x1\xFFFF\x1\x19\x1\xFFFF\x1\x28";
		private const string DFA19_specialS =
			"\x75\xFFFF}>";
		private static readonly string[] DFA19_transitionS =
			{
				"\x1\x1E\x1\x1D\x2\xFFFF\x1\x1E\x12\xFFFF\x1\x1E\x1\xFFFF\x1\x1F\x4\xFFFF"+
				"\x1\x20\x1\x7\x1\x8\x1\x1A\x1\x18\x1\x9\x1\x19\x1\x15\x1\x1B\xA\xA\x1"+
				"\x5\x1\x4\x1\x6\x1\x17\x1\x16\x1\xFFFF\x1\x14\x1A\x22\x4\xFFFF\x1\x21"+
				"\x1\xFFFF\x2\x21\x1\x1\x1\x21\x1\xE\x1\xC\x2\x21\x1\xD\x2\x21\x1\x10"+
				"\x1\x21\x1\x13\x1\x12\x1\x11\x3\x21\x1\xB\x2\x21\x1\xF\x3\x21\x1\x2"+
				"\x1\xFFFF\x1\x3\x1\x1C",
				"\x1\x24\xA\xFFFF\x1\x23",
				"",
				"",
				"",
				"",
				"\x1\x25\xF\xFFFF\x1\x26",
				"\x1\x28",
				"",
				"",
				"",
				"\x1\x2B\x9\xFFFF\x1\x2A",
				"\x1\x2C\x7\xFFFF\x1\x2D",
				"\x1\x2E\x7\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x31\x6\xFFFF\x1\x32",
				"\x1\x33",
				"\x1\x35\x9\xFFFF\x1\x34",
				"\x1\x36",
				"\x1\x37",
				"\x1\x38\x9\xFFFF\x1\x39",
				"",
				"",
				"\x1\x3A",
				"\x1\x3C",
				"",
				"\x1\x28",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3F",
				"\x1\x40",
				"",
				"",
				"",
				"",
				"",
				"\x1\x41",
				"\x1\x42",
				"\x1\x43",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x7\x21\x1\x46\x12"+
				"\x21",
				"\x1\x48",
				"\x1\x49",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x50",
				"\x1\x51",
				"",
				"",
				"",
				"",
				"",
				"\x1\x52",
				"\x1\x53",
				"\x1\x54",
				"\x1\x55",
				"\x1\x56",
				"",
				"",
				"\x1\x57",
				"",
				"\x1\x58",
				"\x1\x59",
				"\x1\x5A",
				"\x1\x5B",
				"\x1\x5C",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x5E",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x61",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x65",
				"\x1\x66",
				"\x1\x67",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x6A",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x6E",
				"\x1\x6F",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"",
				"",
				"\x1\x71",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"\x1\x73",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				""
			};

		private static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
		private static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
		private static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
		private static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
		private static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
		private static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
		private static readonly short[][] DFA19_transition;

		static DFA19()
		{
			int numStates = DFA19_transitionS.Length;
			DFA19_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA19_transition[i] = DFA.UnpackEncodedString(DFA19_transitionS[i]);
			}
		}

		public DFA19( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 19;
			this.eot = DFA19_eot;
			this.eof = DFA19_eof;
			this.min = DFA19_min;
			this.max = DFA19_max;
			this.accept = DFA19_accept;
			this.special = DFA19_special;
			this.transition = DFA19_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( CLASS | OP_LLAVE | CL_LLAVE | END | DOUBLEP | ASSING | OP_PARENT | CL_PARENT | COMA | NUMBER | BOOLEAN | IF | THEN | ELSE | FI | WHILE | LOOP | POOL | LET | IN | CASE | OF | ESAC | NEW | ISVOID | ARROBA | PNT | NOT | LEQ | GEQ | L | G | EQ | PLUS | MINUS | MULT | DIV | NANARITA | IMPLICS | INHERITS | NL | COMMENT | WS | STRING | CHAR | ID | TYPE );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
