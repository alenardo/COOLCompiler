//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g 2017-11-11 15:48:22

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class COOLParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARROBA", "ASSIGNMENT_LIST", "ASSING", "ATTRIBUTE", "BODY", "BOOLEAN", "CASE", "CHAR", "CLASS", "CL_LLAVE", "CL_PARENT", "COMA", "COMMENT", "DIGIT", "DIV", "DOUBLEP", "ELSE", "END", "EQ", "ESAC", "ESC_SEQ", "EXPONENT", "FI", "G", "GEQ", "HEX_DIGIT", "ID", "IF", "IMPLICS", "IN", "INHERITS", "ISVOID", "L", "LEQ", "LET", "LOOP", "LOWERCASE", "METHOD", "METHODEFINITION", "MINUS", "MULT", "NANARITA", "NEW", "NL", "NOT", "NUMBER", "OCTAL_ESC", "OF", "OP_LLAVE", "OP_PARENT", "PARAM", "PARAMLIST", "PLUS", "PNT", "POOL", "STRING", "THEN", "TYPE", "UNICODE_ESC", "UPERCASE", "VAR_DECLARATION", "VAR_DECLARATION_LIST", "WHILE", "WS"
	};
	public const int EOF=-1;
	public const int ARROBA=4;
	public const int ASSIGNMENT_LIST=5;
	public const int ASSING=6;
	public const int ATTRIBUTE=7;
	public const int BODY=8;
	public const int BOOLEAN=9;
	public const int CASE=10;
	public const int CHAR=11;
	public const int CLASS=12;
	public const int CL_LLAVE=13;
	public const int CL_PARENT=14;
	public const int COMA=15;
	public const int COMMENT=16;
	public const int DIGIT=17;
	public const int DIV=18;
	public const int DOUBLEP=19;
	public const int ELSE=20;
	public const int END=21;
	public const int EQ=22;
	public const int ESAC=23;
	public const int ESC_SEQ=24;
	public const int EXPONENT=25;
	public const int FI=26;
	public const int G=27;
	public const int GEQ=28;
	public const int HEX_DIGIT=29;
	public const int ID=30;
	public const int IF=31;
	public const int IMPLICS=32;
	public const int IN=33;
	public const int INHERITS=34;
	public const int ISVOID=35;
	public const int L=36;
	public const int LEQ=37;
	public const int LET=38;
	public const int LOOP=39;
	public const int LOWERCASE=40;
	public const int METHOD=41;
	public const int METHODEFINITION=42;
	public const int MINUS=43;
	public const int MULT=44;
	public const int NANARITA=45;
	public const int NEW=46;
	public const int NL=47;
	public const int NOT=48;
	public const int NUMBER=49;
	public const int OCTAL_ESC=50;
	public const int OF=51;
	public const int OP_LLAVE=52;
	public const int OP_PARENT=53;
	public const int PARAM=54;
	public const int PARAMLIST=55;
	public const int PLUS=56;
	public const int PNT=57;
	public const int POOL=58;
	public const int STRING=59;
	public const int THEN=60;
	public const int TYPE=61;
	public const int UNICODE_ESC=62;
	public const int UPERCASE=63;
	public const int VAR_DECLARATION=64;
	public const int VAR_DECLARATION_LIST=65;
	public const int WHILE=66;
	public const int WS=67;

	public COOLParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public COOLParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return COOLParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();

	// $ANTLR start "program"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:21:9: public program : ( class )+ EOF ;
	[GrammarRule("program")]
	public AstParserRuleReturnScope<object, IToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EOF2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> class1 = default(AstParserRuleReturnScope<object, IToken>);

		object EOF2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(21, 30);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:21:16: ( ( class )+ EOF )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:21:18: ( class )+ EOF
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(21, 18);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:21:18: ( class )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==CLASS))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:21:19: class
					{
					DebugLocation(21, 19);
					PushFollow(Follow._class_in_program66);
					class1=@class();
					PopFollow();

					adaptor.AddChild(root_0, class1.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(21, 27);
			EOF2=(IToken)Match(input,EOF,Follow._EOF_in_program70); 
			EOF2_tree = (object)adaptor.Create(EOF2);
			adaptor.AddChild(root_0, EOF2_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(21, 30);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_class();
	partial void LeaveRule_class();

	// $ANTLR start "class"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:23:2: class : ( CLASS TYPE ^ ( INHERITS TYPE )? OP_LLAVE ! ( feature_list )? CL_LLAVE ! END !) ;
	[GrammarRule("class")]
	private AstParserRuleReturnScope<object, IToken> @class()
	{
		EnterRule_class();
		EnterRule("class", 2);
		TraceIn("class", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CLASS3 = default(IToken);
		IToken TYPE4 = default(IToken);
		IToken INHERITS5 = default(IToken);
		IToken TYPE6 = default(IToken);
		IToken OP_LLAVE7 = default(IToken);
		IToken CL_LLAVE9 = default(IToken);
		IToken END10 = default(IToken);
		AstParserRuleReturnScope<object, IToken> feature_list8 = default(AstParserRuleReturnScope<object, IToken>);

		object CLASS3_tree = default(object);
		object TYPE4_tree = default(object);
		object INHERITS5_tree = default(object);
		object TYPE6_tree = default(object);
		object OP_LLAVE7_tree = default(object);
		object CL_LLAVE9_tree = default(object);
		object END10_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "class");
		DebugLocation(23, 2);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:23:7: ( ( CLASS TYPE ^ ( INHERITS TYPE )? OP_LLAVE ! ( feature_list )? CL_LLAVE ! END !) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:23:9: ( CLASS TYPE ^ ( INHERITS TYPE )? OP_LLAVE ! ( feature_list )? CL_LLAVE ! END !)
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(23, 9);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:23:9: ( CLASS TYPE ^ ( INHERITS TYPE )? OP_LLAVE ! ( feature_list )? CL_LLAVE ! END !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:23:10: CLASS TYPE ^ ( INHERITS TYPE )? OP_LLAVE ! ( feature_list )? CL_LLAVE ! END !
			{
			DebugLocation(23, 10);
			CLASS3=(IToken)Match(input,CLASS,Follow._CLASS_in_class80); 
			CLASS3_tree = (object)adaptor.Create(CLASS3);
			adaptor.AddChild(root_0, CLASS3_tree);
			DebugLocation(23, 20);
			TYPE4=(IToken)Match(input,TYPE,Follow._TYPE_in_class82); 
			TYPE4_tree = (object)adaptor.Create(TYPE4);
			root_0 = (object)adaptor.BecomeRoot(TYPE4_tree, root_0);
			DebugLocation(23, 22);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:23:22: ( INHERITS TYPE )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==INHERITS))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:23:23: INHERITS TYPE
				{
				DebugLocation(23, 23);
				INHERITS5=(IToken)Match(input,INHERITS,Follow._INHERITS_in_class86); 
				INHERITS5_tree = (object)adaptor.Create(INHERITS5);
				adaptor.AddChild(root_0, INHERITS5_tree);
				DebugLocation(23, 32);
				TYPE6=(IToken)Match(input,TYPE,Follow._TYPE_in_class88); 
				TYPE6_tree = (object)adaptor.Create(TYPE6);
				adaptor.AddChild(root_0, TYPE6_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(23, 47);
			OP_LLAVE7=(IToken)Match(input,OP_LLAVE,Follow._OP_LLAVE_in_class92); 
			DebugLocation(23, 49);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:23:49: ( feature_list )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==ID))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:23:51: feature_list
				{
				DebugLocation(23, 51);
				PushFollow(Follow._feature_list_in_class97);
				feature_list8=feature_list();
				PopFollow();

				adaptor.AddChild(root_0, feature_list8.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(23, 74);
			CL_LLAVE9=(IToken)Match(input,CL_LLAVE,Follow._CL_LLAVE_in_class101); 
			DebugLocation(23, 79);
			END10=(IToken)Match(input,END,Follow._END_in_class104); 

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class", 2);
			LeaveRule("class", 2);
			LeaveRule_class();
		}
		DebugLocation(24, 2);
		} finally { DebugExitRule(GrammarFileName, "class"); }
		return retval;

	}
	// $ANTLR end "class"

	partial void EnterRule_feature_list();
	partial void LeaveRule_feature_list();

	// $ANTLR start "feature_list"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:25:2: feature_list : ( feature )+ ;
	[GrammarRule("feature_list")]
	private AstParserRuleReturnScope<object, IToken> feature_list()
	{
		EnterRule_feature_list();
		EnterRule("feature_list", 3);
		TraceIn("feature_list", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> feature11 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "feature_list");
		DebugLocation(25, 23);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:25:14: ( ( feature )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:25:16: ( feature )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(25, 16);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:25:16: ( feature )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==ID))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:25:16: feature
					{
					DebugLocation(25, 16);
					PushFollow(Follow._feature_in_feature_list116);
					feature11=feature();
					PopFollow();

					adaptor.AddChild(root_0, feature11.Tree);

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("feature_list", 3);
			LeaveRule("feature_list", 3);
			LeaveRule_feature_list();
		}
		DebugLocation(25, 23);
		} finally { DebugExitRule(GrammarFileName, "feature_list"); }
		return retval;

	}
	// $ANTLR end "feature_list"

	partial void EnterRule_feature();
	partial void LeaveRule_feature();

	// $ANTLR start "feature"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:26:2: feature : ( ID ( attribute -> ^( ATTRIBUTE ID attribute ) | methodefinition -> ^( METHOD ID methodefinition ) ) END ) ;
	[GrammarRule("feature")]
	private AstParserRuleReturnScope<object, IToken> feature()
	{
		EnterRule_feature();
		EnterRule("feature", 4);
		TraceIn("feature", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID12 = default(IToken);
		IToken END15 = default(IToken);
		AstParserRuleReturnScope<object, IToken> attribute13 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> methodefinition14 = default(AstParserRuleReturnScope<object, IToken>);

		object ID12_tree = default(object);
		object END15_tree = default(object);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_methodefinition=new RewriteRuleSubtreeStream(adaptor,"rule methodefinition");
		try { DebugEnterRule(GrammarFileName, "feature");
		DebugLocation(26, 106);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:26:9: ( ( ID ( attribute -> ^( ATTRIBUTE ID attribute ) | methodefinition -> ^( METHOD ID methodefinition ) ) END ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:26:11: ( ID ( attribute -> ^( ATTRIBUTE ID attribute ) | methodefinition -> ^( METHOD ID methodefinition ) ) END )
			{
			DebugLocation(26, 11);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:26:11: ( ID ( attribute -> ^( ATTRIBUTE ID attribute ) | methodefinition -> ^( METHOD ID methodefinition ) ) END )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:26:12: ID ( attribute -> ^( ATTRIBUTE ID attribute ) | methodefinition -> ^( METHOD ID methodefinition ) ) END
			{
			DebugLocation(26, 12);
			ID12=(IToken)Match(input,ID,Follow._ID_in_feature125);  
			stream_ID.Add(ID12);

			DebugLocation(26, 15);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:26:15: ( attribute -> ^( ATTRIBUTE ID attribute ) | methodefinition -> ^( METHOD ID methodefinition ) )
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==DOUBLEP))
			{
				alt5 = 1;
			}
			else if ((LA5_0==OP_PARENT))
			{
				alt5 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:26:16: attribute
				{
				DebugLocation(26, 16);
				PushFollow(Follow._attribute_in_feature128);
				attribute13=attribute();
				PopFollow();

				stream_attribute.Add(attribute13.Tree);


				{
				// AST REWRITE
				// elements: ID, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 26:25: -> ^( ATTRIBUTE ID attribute )
				{
					DebugLocation(26, 28);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:26:28: ^( ATTRIBUTE ID attribute )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(26, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ATTRIBUTE, "ATTRIBUTE"), root_1);

					DebugLocation(26, 40);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(26, 43);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:26:54: methodefinition
				{
				DebugLocation(26, 54);
				PushFollow(Follow._methodefinition_in_feature139);
				methodefinition14=methodefinition();
				PopFollow();

				stream_methodefinition.Add(methodefinition14.Tree);


				{
				// AST REWRITE
				// elements: ID, methodefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 26:69: -> ^( METHOD ID methodefinition )
				{
					DebugLocation(26, 72);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:26:72: ^( METHOD ID methodefinition )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(26, 74);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(METHOD, "METHOD"), root_1);

					DebugLocation(26, 81);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(26, 84);
					adaptor.AddChild(root_1, stream_methodefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(26, 102);
			END15=(IToken)Match(input,END,Follow._END_in_feature151);  
			stream_END.Add(END15);


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("feature", 4);
			LeaveRule("feature", 4);
			LeaveRule_feature();
		}
		DebugLocation(26, 106);
		} finally { DebugExitRule(GrammarFileName, "feature"); }
		return retval;

	}
	// $ANTLR end "feature"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:28:1: attribute : DOUBLEP ! TYPE ( ASSING expr )? ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<object, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 5);
		TraceIn("attribute", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DOUBLEP16 = default(IToken);
		IToken TYPE17 = default(IToken);
		IToken ASSING18 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr19 = default(AstParserRuleReturnScope<object, IToken>);

		object DOUBLEP16_tree = default(object);
		object TYPE17_tree = default(object);
		object ASSING18_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(28, 42);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:28:10: ( DOUBLEP ! TYPE ( ASSING expr )? )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:28:13: DOUBLEP ! TYPE ( ASSING expr )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(28, 20);
			DOUBLEP16=(IToken)Match(input,DOUBLEP,Follow._DOUBLEP_in_attribute162); 
			DebugLocation(28, 22);
			TYPE17=(IToken)Match(input,TYPE,Follow._TYPE_in_attribute165); 
			TYPE17_tree = (object)adaptor.Create(TYPE17);
			adaptor.AddChild(root_0, TYPE17_tree);
			DebugLocation(28, 27);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:28:27: ( ASSING expr )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0==ASSING))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:28:28: ASSING expr
				{
				DebugLocation(28, 28);
				ASSING18=(IToken)Match(input,ASSING,Follow._ASSING_in_attribute168); 
				ASSING18_tree = (object)adaptor.Create(ASSING18);
				adaptor.AddChild(root_0, ASSING18_tree);
				DebugLocation(28, 35);
				PushFollow(Follow._expr_in_attribute170);
				expr19=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr19.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 5);
			LeaveRule("attribute", 5);
			LeaveRule_attribute();
		}
		DebugLocation(28, 42);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_methodefinition();
	partial void LeaveRule_methodefinition();

	// $ANTLR start "methodefinition"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:29:2: methodefinition : OP_PARENT ( params_list )? CL_PARENT DOUBLEP TYPE OP_LLAVE expr CL_LLAVE -> ^( METHODEFINITION ( params_list )? TYPE ^( BODY expr ) ) ;
	[GrammarRule("methodefinition")]
	private AstParserRuleReturnScope<object, IToken> methodefinition()
	{
		EnterRule_methodefinition();
		EnterRule("methodefinition", 6);
		TraceIn("methodefinition", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OP_PARENT20 = default(IToken);
		IToken CL_PARENT22 = default(IToken);
		IToken DOUBLEP23 = default(IToken);
		IToken TYPE24 = default(IToken);
		IToken OP_LLAVE25 = default(IToken);
		IToken CL_LLAVE27 = default(IToken);
		AstParserRuleReturnScope<object, IToken> params_list21 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr26 = default(AstParserRuleReturnScope<object, IToken>);

		object OP_PARENT20_tree = default(object);
		object CL_PARENT22_tree = default(object);
		object DOUBLEP23_tree = default(object);
		object TYPE24_tree = default(object);
		object OP_LLAVE25_tree = default(object);
		object CL_LLAVE27_tree = default(object);
		RewriteRuleITokenStream stream_CL_PARENT=new RewriteRuleITokenStream(adaptor,"token CL_PARENT");
		RewriteRuleITokenStream stream_OP_PARENT=new RewriteRuleITokenStream(adaptor,"token OP_PARENT");
		RewriteRuleITokenStream stream_DOUBLEP=new RewriteRuleITokenStream(adaptor,"token DOUBLEP");
		RewriteRuleITokenStream stream_OP_LLAVE=new RewriteRuleITokenStream(adaptor,"token OP_LLAVE");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleITokenStream stream_CL_LLAVE=new RewriteRuleITokenStream(adaptor,"token CL_LLAVE");
		RewriteRuleSubtreeStream stream_params_list=new RewriteRuleSubtreeStream(adaptor,"rule params_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "methodefinition");
		DebugLocation(29, 147);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:29:17: ( OP_PARENT ( params_list )? CL_PARENT DOUBLEP TYPE OP_LLAVE expr CL_LLAVE -> ^( METHODEFINITION ( params_list )? TYPE ^( BODY expr ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:29:19: OP_PARENT ( params_list )? CL_PARENT DOUBLEP TYPE OP_LLAVE expr CL_LLAVE
			{
			DebugLocation(29, 19);
			OP_PARENT20=(IToken)Match(input,OP_PARENT,Follow._OP_PARENT_in_methodefinition181);  
			stream_OP_PARENT.Add(OP_PARENT20);

			DebugLocation(29, 29);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:29:29: ( params_list )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==ID))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:29:30: params_list
				{
				DebugLocation(29, 30);
				PushFollow(Follow._params_list_in_methodefinition184);
				params_list21=params_list();
				PopFollow();

				stream_params_list.Add(params_list21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(29, 46);
			CL_PARENT22=(IToken)Match(input,CL_PARENT,Follow._CL_PARENT_in_methodefinition190);  
			stream_CL_PARENT.Add(CL_PARENT22);

			DebugLocation(29, 57);
			DOUBLEP23=(IToken)Match(input,DOUBLEP,Follow._DOUBLEP_in_methodefinition193);  
			stream_DOUBLEP.Add(DOUBLEP23);

			DebugLocation(29, 66);
			TYPE24=(IToken)Match(input,TYPE,Follow._TYPE_in_methodefinition196);  
			stream_TYPE.Add(TYPE24);

			DebugLocation(29, 72);
			OP_LLAVE25=(IToken)Match(input,OP_LLAVE,Follow._OP_LLAVE_in_methodefinition199);  
			stream_OP_LLAVE.Add(OP_LLAVE25);

			DebugLocation(29, 82);
			PushFollow(Follow._expr_in_methodefinition202);
			expr26=expr();
			PopFollow();

			stream_expr.Add(expr26.Tree);
			DebugLocation(29, 88);
			CL_LLAVE27=(IToken)Match(input,CL_LLAVE,Follow._CL_LLAVE_in_methodefinition205);  
			stream_CL_LLAVE.Add(CL_LLAVE27);



			{
			// AST REWRITE
			// elements: expr, TYPE, params_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 29:96: -> ^( METHODEFINITION ( params_list )? TYPE ^( BODY expr ) )
			{
				DebugLocation(29, 98);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:29:98: ^( METHODEFINITION ( params_list )? TYPE ^( BODY expr ) )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(29, 100);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(METHODEFINITION, "METHODEFINITION"), root_1);

				DebugLocation(29, 116);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:29:116: ( params_list )?
				if (stream_params_list.HasNext)
				{
					DebugLocation(29, 116);
					adaptor.AddChild(root_1, stream_params_list.NextTree());

				}
				stream_params_list.Reset();
				DebugLocation(29, 129);
				adaptor.AddChild(root_1, stream_TYPE.NextNode());
				DebugLocation(29, 134);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:29:134: ^( BODY expr )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(29, 136);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(BODY, "BODY"), root_2);

				DebugLocation(29, 141);
				adaptor.AddChild(root_2, stream_expr.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("methodefinition", 6);
			LeaveRule("methodefinition", 6);
			LeaveRule_methodefinition();
		}
		DebugLocation(29, 147);
		} finally { DebugExitRule(GrammarFileName, "methodefinition"); }
		return retval;

	}
	// $ANTLR end "methodefinition"

	partial void EnterRule_params_list();
	partial void LeaveRule_params_list();

	// $ANTLR start "params_list"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:30:2: params_list : ( param -> param ) ( COMA param -> ^( PARAMLIST $params_list param ) )* ;
	[GrammarRule("params_list")]
	private AstParserRuleReturnScope<object, IToken> params_list()
	{
		EnterRule_params_list();
		EnterRule("params_list", 7);
		TraceIn("params_list", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMA29 = default(IToken);
		AstParserRuleReturnScope<object, IToken> param28 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> param30 = default(AstParserRuleReturnScope<object, IToken>);

		object COMA29_tree = default(object);
		RewriteRuleITokenStream stream_COMA=new RewriteRuleITokenStream(adaptor,"token COMA");
		RewriteRuleSubtreeStream stream_param=new RewriteRuleSubtreeStream(adaptor,"rule param");
		try { DebugEnterRule(GrammarFileName, "params_list");
		DebugLocation(30, 76);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:30:13: ( ( param -> param ) ( COMA param -> ^( PARAMLIST $params_list param ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:30:15: ( param -> param ) ( COMA param -> ^( PARAMLIST $params_list param ) )*
			{
			DebugLocation(30, 15);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:30:15: ( param -> param )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:30:16: param
			{
			DebugLocation(30, 16);
			PushFollow(Follow._param_in_params_list229);
			param28=param();
			PopFollow();

			stream_param.Add(param28.Tree);


			{
			// AST REWRITE
			// elements: param
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 30:21: -> param
			{
				DebugLocation(30, 23);
				adaptor.AddChild(root_0, stream_param.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(30, 30);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:30:30: ( COMA param -> ^( PARAMLIST $params_list param ) )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==COMA))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:30:31: COMA param
					{
					DebugLocation(30, 31);
					COMA29=(IToken)Match(input,COMA,Follow._COMA_in_params_list235);  
					stream_COMA.Add(COMA29);

					DebugLocation(30, 37);
					PushFollow(Follow._param_in_params_list238);
					param30=param();
					PopFollow();

					stream_param.Add(param30.Tree);


					{
					// AST REWRITE
					// elements: params_list, param
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 30:42: -> ^( PARAMLIST $params_list param )
					{
						DebugLocation(30, 44);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:30:44: ^( PARAMLIST $params_list param )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(30, 46);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PARAMLIST, "PARAMLIST"), root_1);

						DebugLocation(30, 57);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(30, 69);
						adaptor.AddChild(root_1, stream_param.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("params_list", 7);
			LeaveRule("params_list", 7);
			LeaveRule_params_list();
		}
		DebugLocation(30, 76);
		} finally { DebugExitRule(GrammarFileName, "params_list"); }
		return retval;

	}
	// $ANTLR end "params_list"

	partial void EnterRule_param();
	partial void LeaveRule_param();

	// $ANTLR start "param"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:31:2: param : ( ID DOUBLEP TYPE ) -> ^( PARAM ID TYPE ) ;
	[GrammarRule("param")]
	private AstParserRuleReturnScope<object, IToken> param()
	{
		EnterRule_param();
		EnterRule("param", 8);
		TraceIn("param", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID31 = default(IToken);
		IToken DOUBLEP32 = default(IToken);
		IToken TYPE33 = default(IToken);

		object ID31_tree = default(object);
		object DOUBLEP32_tree = default(object);
		object TYPE33_tree = default(object);
		RewriteRuleITokenStream stream_DOUBLEP=new RewriteRuleITokenStream(adaptor,"token DOUBLEP");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(31, 45);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:31:7: ( ( ID DOUBLEP TYPE ) -> ^( PARAM ID TYPE ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:31:9: ( ID DOUBLEP TYPE )
			{
			DebugLocation(31, 9);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:31:9: ( ID DOUBLEP TYPE )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:31:10: ID DOUBLEP TYPE
			{
			DebugLocation(31, 10);
			ID31=(IToken)Match(input,ID,Follow._ID_in_param257);  
			stream_ID.Add(ID31);

			DebugLocation(31, 14);
			DOUBLEP32=(IToken)Match(input,DOUBLEP,Follow._DOUBLEP_in_param260);  
			stream_DOUBLEP.Add(DOUBLEP32);

			DebugLocation(31, 23);
			TYPE33=(IToken)Match(input,TYPE,Follow._TYPE_in_param263);  
			stream_TYPE.Add(TYPE33);


			}



			{
			// AST REWRITE
			// elements: TYPE, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 31:28: -> ^( PARAM ID TYPE )
			{
				DebugLocation(31, 30);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:31:30: ^( PARAM ID TYPE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(31, 32);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PARAM, "PARAM"), root_1);

				DebugLocation(31, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(31, 41);
				adaptor.AddChild(root_1, stream_TYPE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param", 8);
			LeaveRule("param", 8);
			LeaveRule_param();
		}
		DebugLocation(31, 45);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return retval;

	}
	// $ANTLR end "param"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:33:2: expr : ( assignment | conditionals | loops | blocks | let | case | new | operations | TYPE ^| ( NOT ^ expr ) | ( ISVOID ^ expr ) | nanarita );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<object, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 9);
		TraceIn("expr", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TYPE42 = default(IToken);
		IToken NOT43 = default(IToken);
		IToken ISVOID45 = default(IToken);
		AstParserRuleReturnScope<object, IToken> assignment34 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> conditionals35 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> loops36 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> blocks37 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> let38 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> case39 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> new40 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> operations41 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr44 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr46 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> nanarita47 = default(AstParserRuleReturnScope<object, IToken>);

		object TYPE42_tree = default(object);
		object NOT43_tree = default(object);
		object ISVOID45_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(33, 13);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:33:6: ( assignment | conditionals | loops | blocks | let | case | new | operations | TYPE ^| ( NOT ^ expr ) | ( ISVOID ^ expr ) | nanarita )
			int alt9=12;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA9_1 = input.LA(2);

				if ((LA9_1==ASSING))
				{
					alt9 = 1;
				}
				else if ((LA9_1==ARROBA||(LA9_1>=CL_LLAVE && LA9_1<=COMA)||LA9_1==DIV||(LA9_1>=ELSE && LA9_1<=ESAC)||(LA9_1>=FI && LA9_1<=GEQ)||LA9_1==ID||LA9_1==IN||(LA9_1>=L && LA9_1<=LEQ)||LA9_1==LOOP||(LA9_1>=MINUS && LA9_1<=MULT)||LA9_1==OF||LA9_1==OP_PARENT||(LA9_1>=PLUS && LA9_1<=POOL)||LA9_1==THEN))
				{
					alt9 = 8;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				alt9 = 2;
				}
				break;
			case WHILE:
				{
				alt9 = 3;
				}
				break;
			case OP_LLAVE:
				{
				alt9 = 4;
				}
				break;
			case LET:
				{
				alt9 = 5;
				}
				break;
			case CASE:
				{
				alt9 = 6;
				}
				break;
			case NEW:
				{
				alt9 = 7;
				}
				break;
			case BOOLEAN:
			case NUMBER:
			case OP_PARENT:
			case STRING:
				{
				alt9 = 8;
				}
				break;
			case TYPE:
				{
				alt9 = 9;
				}
				break;
			case NOT:
				{
				alt9 = 10;
				}
				break;
			case ISVOID:
				{
				alt9 = 11;
				}
				break;
			case NANARITA:
				{
				alt9 = 12;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:33:8: assignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(33, 8);
				PushFollow(Follow._assignment_in_expr280);
				assignment34=assignment();
				PopFollow();

				adaptor.AddChild(root_0, assignment34.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:34:6: conditionals
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(34, 6);
				PushFollow(Follow._conditionals_in_expr287);
				conditionals35=conditionals();
				PopFollow();

				adaptor.AddChild(root_0, conditionals35.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:35:6: loops
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(35, 6);
				PushFollow(Follow._loops_in_expr294);
				loops36=loops();
				PopFollow();

				adaptor.AddChild(root_0, loops36.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:36:6: blocks
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(36, 6);
				PushFollow(Follow._blocks_in_expr301);
				blocks37=blocks();
				PopFollow();

				adaptor.AddChild(root_0, blocks37.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:37:6: let
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(37, 6);
				PushFollow(Follow._let_in_expr308);
				let38=let();
				PopFollow();

				adaptor.AddChild(root_0, let38.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:38:6: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(38, 6);
				PushFollow(Follow._case_in_expr315);
				case39=@case();
				PopFollow();

				adaptor.AddChild(root_0, case39.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:39:6: new
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(39, 6);
				PushFollow(Follow._new_in_expr322);
				new40=@new();
				PopFollow();

				adaptor.AddChild(root_0, new40.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:40:6: operations
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(40, 6);
				PushFollow(Follow._operations_in_expr329);
				operations41=operations();
				PopFollow();

				adaptor.AddChild(root_0, operations41.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:41:6: TYPE ^
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(41, 10);
				TYPE42=(IToken)Match(input,TYPE,Follow._TYPE_in_expr336); 
				TYPE42_tree = (object)adaptor.Create(TYPE42);
				root_0 = (object)adaptor.BecomeRoot(TYPE42_tree, root_0);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:42:6: ( NOT ^ expr )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(42, 6);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:42:6: ( NOT ^ expr )
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:42:7: NOT ^ expr
				{
				DebugLocation(42, 10);
				NOT43=(IToken)Match(input,NOT,Follow._NOT_in_expr345); 
				NOT43_tree = (object)adaptor.Create(NOT43);
				root_0 = (object)adaptor.BecomeRoot(NOT43_tree, root_0);
				DebugLocation(42, 12);
				PushFollow(Follow._expr_in_expr348);
				expr44=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr44.Tree);

				}


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:43:6: ( ISVOID ^ expr )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(43, 6);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:43:6: ( ISVOID ^ expr )
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:43:7: ISVOID ^ expr
				{
				DebugLocation(43, 13);
				ISVOID45=(IToken)Match(input,ISVOID,Follow._ISVOID_in_expr357); 
				ISVOID45_tree = (object)adaptor.Create(ISVOID45);
				root_0 = (object)adaptor.BecomeRoot(ISVOID45_tree, root_0);
				DebugLocation(43, 16);
				PushFollow(Follow._expr_in_expr361);
				expr46=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr46.Tree);

				}


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:44:6: nanarita
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(44, 6);
				PushFollow(Follow._nanarita_in_expr369);
				nanarita47=nanarita();
				PopFollow();

				adaptor.AddChild(root_0, nanarita47.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 9);
			LeaveRule("expr", 9);
			LeaveRule_expr();
		}
		DebugLocation(44, 13);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();

	// $ANTLR start "assignment"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:2: assignment : ( ID ASSING ^ expr ) ;
	[GrammarRule("assignment")]
	private AstParserRuleReturnScope<object, IToken> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 10);
		TraceIn("assignment", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID48 = default(IToken);
		IToken ASSING49 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr50 = default(AstParserRuleReturnScope<object, IToken>);

		object ID48_tree = default(object);
		object ASSING49_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(48, 32);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:12: ( ( ID ASSING ^ expr ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:14: ( ID ASSING ^ expr )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(48, 14);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:14: ( ID ASSING ^ expr )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:15: ID ASSING ^ expr
			{
			DebugLocation(48, 15);
			ID48=(IToken)Match(input,ID,Follow._ID_in_assignment382); 
			ID48_tree = (object)adaptor.Create(ID48);
			adaptor.AddChild(root_0, ID48_tree);
			DebugLocation(48, 24);
			ASSING49=(IToken)Match(input,ASSING,Follow._ASSING_in_assignment384); 
			ASSING49_tree = (object)adaptor.Create(ASSING49);
			root_0 = (object)adaptor.BecomeRoot(ASSING49_tree, root_0);
			DebugLocation(48, 27);
			PushFollow(Follow._expr_in_assignment388);
			expr50=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr50.Tree);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 10);
			LeaveRule("assignment", 10);
			LeaveRule_assignment();
		}
		DebugLocation(48, 32);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_conditionals();
	partial void LeaveRule_conditionals();

	// $ANTLR start "conditionals"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:2: conditionals : ( IF expr ( THEN expr ) ( ELSE expr )? FI ) -> ^( IF expr ^( THEN expr ) ( ^( ELSE expr ) )? ) ;
	[GrammarRule("conditionals")]
	private AstParserRuleReturnScope<object, IToken> conditionals()
	{
		EnterRule_conditionals();
		EnterRule("conditionals", 11);
		TraceIn("conditionals", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IF51 = default(IToken);
		IToken THEN53 = default(IToken);
		IToken ELSE55 = default(IToken);
		IToken FI57 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr52 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr54 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr56 = default(AstParserRuleReturnScope<object, IToken>);

		object IF51_tree = default(object);
		object THEN53_tree = default(object);
		object ELSE55_tree = default(object);
		object FI57_tree = default(object);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_FI=new RewriteRuleITokenStream(adaptor,"token FI");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "conditionals");
		DebugLocation(49, 92);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:14: ( ( IF expr ( THEN expr ) ( ELSE expr )? FI ) -> ^( IF expr ^( THEN expr ) ( ^( ELSE expr ) )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:16: ( IF expr ( THEN expr ) ( ELSE expr )? FI )
			{
			DebugLocation(49, 16);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:16: ( IF expr ( THEN expr ) ( ELSE expr )? FI )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:17: IF expr ( THEN expr ) ( ELSE expr )? FI
			{
			DebugLocation(49, 17);
			IF51=(IToken)Match(input,IF,Follow._IF_in_conditionals398);  
			stream_IF.Add(IF51);

			DebugLocation(49, 20);
			PushFollow(Follow._expr_in_conditionals400);
			expr52=expr();
			PopFollow();

			stream_expr.Add(expr52.Tree);
			DebugLocation(49, 25);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:25: ( THEN expr )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:26: THEN expr
			{
			DebugLocation(49, 26);
			THEN53=(IToken)Match(input,THEN,Follow._THEN_in_conditionals403);  
			stream_THEN.Add(THEN53);

			DebugLocation(49, 31);
			PushFollow(Follow._expr_in_conditionals405);
			expr54=expr();
			PopFollow();

			stream_expr.Add(expr54.Tree);

			}

			DebugLocation(49, 37);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:37: ( ELSE expr )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==ELSE))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:38: ELSE expr
				{
				DebugLocation(49, 38);
				ELSE55=(IToken)Match(input,ELSE,Follow._ELSE_in_conditionals409);  
				stream_ELSE.Add(ELSE55);

				DebugLocation(49, 43);
				PushFollow(Follow._expr_in_conditionals411);
				expr56=expr();
				PopFollow();

				stream_expr.Add(expr56.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(49, 50);
			FI57=(IToken)Match(input,FI,Follow._FI_in_conditionals415);  
			stream_FI.Add(FI57);


			}



			{
			// AST REWRITE
			// elements: expr, expr, ELSE, THEN, expr, IF
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 49:53: -> ^( IF expr ^( THEN expr ) ( ^( ELSE expr ) )? )
			{
				DebugLocation(49, 55);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:55: ^( IF expr ^( THEN expr ) ( ^( ELSE expr ) )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(49, 57);
				root_1 = (object)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

				DebugLocation(49, 60);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(49, 65);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:65: ^( THEN expr )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(49, 67);
				root_2 = (object)adaptor.BecomeRoot(stream_THEN.NextNode(), root_2);

				DebugLocation(49, 72);
				adaptor.AddChild(root_2, stream_expr.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(49, 78);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:78: ( ^( ELSE expr ) )?
				if (stream_expr.HasNext||stream_ELSE.HasNext)
				{
					DebugLocation(49, 78);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:49:78: ^( ELSE expr )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(49, 80);
					root_2 = (object)adaptor.BecomeRoot(stream_ELSE.NextNode(), root_2);

					DebugLocation(49, 85);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_expr.Reset();
				stream_ELSE.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionals", 11);
			LeaveRule("conditionals", 11);
			LeaveRule_conditionals();
		}
		DebugLocation(49, 92);
		} finally { DebugExitRule(GrammarFileName, "conditionals"); }
		return retval;

	}
	// $ANTLR end "conditionals"

	partial void EnterRule_loops();
	partial void LeaveRule_loops();

	// $ANTLR start "loops"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:50:2: loops : WHILE ^ expr LOOP expr POOL !;
	[GrammarRule("loops")]
	private AstParserRuleReturnScope<object, IToken> loops()
	{
		EnterRule_loops();
		EnterRule("loops", 12);
		TraceIn("loops", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken WHILE58 = default(IToken);
		IToken LOOP60 = default(IToken);
		IToken POOL62 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr59 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr61 = default(AstParserRuleReturnScope<object, IToken>);

		object WHILE58_tree = default(object);
		object LOOP60_tree = default(object);
		object POOL62_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "loops");
		DebugLocation(50, 37);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:50:7: ( WHILE ^ expr LOOP expr POOL !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:50:9: WHILE ^ expr LOOP expr POOL !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(50, 14);
			WHILE58=(IToken)Match(input,WHILE,Follow._WHILE_in_loops443); 
			WHILE58_tree = (object)adaptor.Create(WHILE58);
			root_0 = (object)adaptor.BecomeRoot(WHILE58_tree, root_0);
			DebugLocation(50, 17);
			PushFollow(Follow._expr_in_loops447);
			expr59=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr59.Tree);
			DebugLocation(50, 22);
			LOOP60=(IToken)Match(input,LOOP,Follow._LOOP_in_loops449); 
			LOOP60_tree = (object)adaptor.Create(LOOP60);
			adaptor.AddChild(root_0, LOOP60_tree);
			DebugLocation(50, 27);
			PushFollow(Follow._expr_in_loops451);
			expr61=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr61.Tree);
			DebugLocation(50, 36);
			POOL62=(IToken)Match(input,POOL,Follow._POOL_in_loops453); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("loops", 12);
			LeaveRule("loops", 12);
			LeaveRule_loops();
		}
		DebugLocation(50, 37);
		} finally { DebugExitRule(GrammarFileName, "loops"); }
		return retval;

	}
	// $ANTLR end "loops"

	partial void EnterRule_blocks();
	partial void LeaveRule_blocks();

	// $ANTLR start "blocks"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:2: blocks : OP_LLAVE ! expr END ! ( expr END !)* CL_LLAVE !;
	[GrammarRule("blocks")]
	private AstParserRuleReturnScope<object, IToken> blocks()
	{
		EnterRule_blocks();
		EnterRule("blocks", 13);
		TraceIn("blocks", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OP_LLAVE63 = default(IToken);
		IToken END65 = default(IToken);
		IToken END67 = default(IToken);
		IToken CL_LLAVE68 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr64 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr66 = default(AstParserRuleReturnScope<object, IToken>);

		object OP_LLAVE63_tree = default(object);
		object END65_tree = default(object);
		object END67_tree = default(object);
		object CL_LLAVE68_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "blocks");
		DebugLocation(51, 54);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:8: ( OP_LLAVE ! expr END ! ( expr END !)* CL_LLAVE !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:10: OP_LLAVE ! expr END ! ( expr END !)* CL_LLAVE !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(51, 18);
			OP_LLAVE63=(IToken)Match(input,OP_LLAVE,Follow._OP_LLAVE_in_blocks462); 
			DebugLocation(51, 21);
			PushFollow(Follow._expr_in_blocks466);
			expr64=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr64.Tree);
			DebugLocation(51, 29);
			END65=(IToken)Match(input,END,Follow._END_in_blocks468); 
			DebugLocation(51, 31);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:31: ( expr END !)*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if (((LA11_0>=BOOLEAN && LA11_0<=CASE)||(LA11_0>=ID && LA11_0<=IF)||LA11_0==ISVOID||LA11_0==LET||(LA11_0>=NANARITA && LA11_0<=NEW)||(LA11_0>=NOT && LA11_0<=NUMBER)||(LA11_0>=OP_LLAVE && LA11_0<=OP_PARENT)||LA11_0==STRING||LA11_0==TYPE||LA11_0==WHILE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:33: expr END !
					{
					DebugLocation(51, 33);
					PushFollow(Follow._expr_in_blocks473);
					expr66=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr66.Tree);
					DebugLocation(51, 41);
					END67=(IToken)Match(input,END,Follow._END_in_blocks475); 

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(51, 53);
			CL_LLAVE68=(IToken)Match(input,CL_LLAVE,Follow._CL_LLAVE_in_blocks480); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("blocks", 13);
			LeaveRule("blocks", 13);
			LeaveRule_blocks();
		}
		DebugLocation(51, 54);
		} finally { DebugExitRule(GrammarFileName, "blocks"); }
		return retval;

	}
	// $ANTLR end "blocks"

	partial void EnterRule_let();
	partial void LeaveRule_let();

	// $ANTLR start "let"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:2: let : ( LET var_list_declaration IN expr ) -> ^( LET var_list_declaration ^( BODY expr ) ) ;
	[GrammarRule("let")]
	private AstParserRuleReturnScope<object, IToken> let()
	{
		EnterRule_let();
		EnterRule("let", 14);
		TraceIn("let", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LET69 = default(IToken);
		IToken IN71 = default(IToken);
		AstParserRuleReturnScope<object, IToken> var_list_declaration70 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr72 = default(AstParserRuleReturnScope<object, IToken>);

		object LET69_tree = default(object);
		object IN71_tree = default(object);
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_LET=new RewriteRuleITokenStream(adaptor,"token LET");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_var_list_declaration=new RewriteRuleSubtreeStream(adaptor,"rule var_list_declaration");
		try { DebugEnterRule(GrammarFileName, "let");
		DebugLocation(52, 84);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:5: ( ( LET var_list_declaration IN expr ) -> ^( LET var_list_declaration ^( BODY expr ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:7: ( LET var_list_declaration IN expr )
			{
			DebugLocation(52, 7);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:7: ( LET var_list_declaration IN expr )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:8: LET var_list_declaration IN expr
			{
			DebugLocation(52, 8);
			LET69=(IToken)Match(input,LET,Follow._LET_in_let490);  
			stream_LET.Add(LET69);

			DebugLocation(52, 13);
			PushFollow(Follow._var_list_declaration_in_let493);
			var_list_declaration70=var_list_declaration();
			PopFollow();

			stream_var_list_declaration.Add(var_list_declaration70.Tree);
			DebugLocation(52, 34);
			IN71=(IToken)Match(input,IN,Follow._IN_in_let495);  
			stream_IN.Add(IN71);

			DebugLocation(52, 37);
			PushFollow(Follow._expr_in_let497);
			expr72=expr();
			PopFollow();

			stream_expr.Add(expr72.Tree);

			}



			{
			// AST REWRITE
			// elements: expr, LET, var_list_declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 52:42: -> ^( LET var_list_declaration ^( BODY expr ) )
			{
				DebugLocation(52, 44);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:44: ^( LET var_list_declaration ^( BODY expr ) )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(52, 46);
				root_1 = (object)adaptor.BecomeRoot(stream_LET.NextNode(), root_1);

				DebugLocation(52, 50);
				adaptor.AddChild(root_1, stream_var_list_declaration.NextTree());
				DebugLocation(52, 71);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:71: ^( BODY expr )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(52, 73);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(BODY, "BODY"), root_2);

				DebugLocation(52, 78);
				adaptor.AddChild(root_2, stream_expr.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let", 14);
			LeaveRule("let", 14);
			LeaveRule_let();
		}
		DebugLocation(52, 84);
		} finally { DebugExitRule(GrammarFileName, "let"); }
		return retval;

	}
	// $ANTLR end "let"

	partial void EnterRule_vardeclaration();
	partial void LeaveRule_vardeclaration();

	// $ANTLR start "vardeclaration"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:53:2: vardeclaration : ID attribute -> ^( VAR_DECLARATION ID attribute ) ;
	[GrammarRule("vardeclaration")]
	private AstParserRuleReturnScope<object, IToken> vardeclaration()
	{
		EnterRule_vardeclaration();
		EnterRule("vardeclaration", 15);
		TraceIn("vardeclaration", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID73 = default(IToken);
		AstParserRuleReturnScope<object, IToken> attribute74 = default(AstParserRuleReturnScope<object, IToken>);

		object ID73_tree = default(object);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "vardeclaration");
		DebugLocation(53, 50);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:54:3: ( ID attribute -> ^( VAR_DECLARATION ID attribute ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:54:5: ID attribute
			{
			DebugLocation(54, 5);
			ID73=(IToken)Match(input,ID,Follow._ID_in_vardeclaration521);  
			stream_ID.Add(ID73);

			DebugLocation(54, 8);
			PushFollow(Follow._attribute_in_vardeclaration523);
			attribute74=attribute();
			PopFollow();

			stream_attribute.Add(attribute74.Tree);


			{
			// AST REWRITE
			// elements: attribute, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 54:17: -> ^( VAR_DECLARATION ID attribute )
			{
				DebugLocation(54, 19);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:54:19: ^( VAR_DECLARATION ID attribute )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(54, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

				DebugLocation(54, 37);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(54, 41);
				adaptor.AddChild(root_1, stream_attribute.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("vardeclaration", 15);
			LeaveRule("vardeclaration", 15);
			LeaveRule_vardeclaration();
		}
		DebugLocation(54, 50);
		} finally { DebugExitRule(GrammarFileName, "vardeclaration"); }
		return retval;

	}
	// $ANTLR end "vardeclaration"

	partial void EnterRule_var_list_declaration();
	partial void LeaveRule_var_list_declaration();

	// $ANTLR start "var_list_declaration"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:55:2: var_list_declaration : ( vardeclaration -> vardeclaration ) ( COMA vardeclaration -> ^( VAR_DECLARATION_LIST $var_list_declaration vardeclaration ) )* ;
	[GrammarRule("var_list_declaration")]
	private AstParserRuleReturnScope<object, IToken> var_list_declaration()
	{
		EnterRule_var_list_declaration();
		EnterRule("var_list_declaration", 16);
		TraceIn("var_list_declaration", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMA76 = default(IToken);
		AstParserRuleReturnScope<object, IToken> vardeclaration75 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> vardeclaration77 = default(AstParserRuleReturnScope<object, IToken>);

		object COMA76_tree = default(object);
		RewriteRuleITokenStream stream_COMA=new RewriteRuleITokenStream(adaptor,"token COMA");
		RewriteRuleSubtreeStream stream_vardeclaration=new RewriteRuleSubtreeStream(adaptor,"rule vardeclaration");
		try { DebugEnterRule(GrammarFileName, "var_list_declaration");
		DebugLocation(55, 123);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:56:3: ( ( vardeclaration -> vardeclaration ) ( COMA vardeclaration -> ^( VAR_DECLARATION_LIST $var_list_declaration vardeclaration ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:56:6: ( vardeclaration -> vardeclaration ) ( COMA vardeclaration -> ^( VAR_DECLARATION_LIST $var_list_declaration vardeclaration ) )*
			{
			DebugLocation(56, 6);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:56:6: ( vardeclaration -> vardeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:56:7: vardeclaration
			{
			DebugLocation(56, 7);
			PushFollow(Follow._vardeclaration_in_var_list_declaration544);
			vardeclaration75=vardeclaration();
			PopFollow();

			stream_vardeclaration.Add(vardeclaration75.Tree);


			{
			// AST REWRITE
			// elements: vardeclaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 56:21: -> vardeclaration
			{
				DebugLocation(56, 24);
				adaptor.AddChild(root_0, stream_vardeclaration.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(56, 40);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:56:40: ( COMA vardeclaration -> ^( VAR_DECLARATION_LIST $var_list_declaration vardeclaration ) )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==COMA))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:56:41: COMA vardeclaration
					{
					DebugLocation(56, 41);
					COMA76=(IToken)Match(input,COMA,Follow._COMA_in_var_list_declaration551);  
					stream_COMA.Add(COMA76);

					DebugLocation(56, 46);
					PushFollow(Follow._vardeclaration_in_var_list_declaration553);
					vardeclaration77=vardeclaration();
					PopFollow();

					stream_vardeclaration.Add(vardeclaration77.Tree);


					{
					// AST REWRITE
					// elements: var_list_declaration, vardeclaration
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 56:60: -> ^( VAR_DECLARATION_LIST $var_list_declaration vardeclaration )
					{
						DebugLocation(56, 62);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:56:62: ^( VAR_DECLARATION_LIST $var_list_declaration vardeclaration )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(56, 64);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(VAR_DECLARATION_LIST, "VAR_DECLARATION_LIST"), root_1);

						DebugLocation(56, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(56, 107);
						adaptor.AddChild(root_1, stream_vardeclaration.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("var_list_declaration", 16);
			LeaveRule("var_list_declaration", 16);
			LeaveRule_var_list_declaration();
		}
		DebugLocation(56, 123);
		} finally { DebugExitRule(GrammarFileName, "var_list_declaration"); }
		return retval;

	}
	// $ANTLR end "var_list_declaration"

	partial void EnterRule_case();
	partial void LeaveRule_case();

	// $ANTLR start "case"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:57:2: case : CASE ^ expr OF ( param IMPLICS expr )+ ESAC !;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 17);
		TraceIn("case", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CASE78 = default(IToken);
		IToken OF80 = default(IToken);
		IToken IMPLICS82 = default(IToken);
		IToken ESAC84 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr79 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> param81 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr83 = default(AstParserRuleReturnScope<object, IToken>);

		object CASE78_tree = default(object);
		object OF80_tree = default(object);
		object IMPLICS82_tree = default(object);
		object ESAC84_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(57, 49);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:57:6: ( CASE ^ expr OF ( param IMPLICS expr )+ ESAC !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:57:8: CASE ^ expr OF ( param IMPLICS expr )+ ESAC !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(57, 12);
			CASE78=(IToken)Match(input,CASE,Follow._CASE_in_case571); 
			CASE78_tree = (object)adaptor.Create(CASE78);
			root_0 = (object)adaptor.BecomeRoot(CASE78_tree, root_0);
			DebugLocation(57, 14);
			PushFollow(Follow._expr_in_case574);
			expr79=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr79.Tree);
			DebugLocation(57, 19);
			OF80=(IToken)Match(input,OF,Follow._OF_in_case576); 
			OF80_tree = (object)adaptor.Create(OF80);
			adaptor.AddChild(root_0, OF80_tree);
			DebugLocation(57, 22);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:57:22: ( param IMPLICS expr )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==ID))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:57:23: param IMPLICS expr
					{
					DebugLocation(57, 23);
					PushFollow(Follow._param_in_case579);
					param81=param();
					PopFollow();

					adaptor.AddChild(root_0, param81.Tree);
					DebugLocation(57, 29);
					IMPLICS82=(IToken)Match(input,IMPLICS,Follow._IMPLICS_in_case581); 
					IMPLICS82_tree = (object)adaptor.Create(IMPLICS82);
					adaptor.AddChild(root_0, IMPLICS82_tree);
					DebugLocation(57, 37);
					PushFollow(Follow._expr_in_case583);
					expr83=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr83.Tree);

					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(57, 48);
			ESAC84=(IToken)Match(input,ESAC,Follow._ESAC_in_case587); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 17);
			LeaveRule("case", 17);
			LeaveRule_case();
		}
		DebugLocation(57, 49);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"

	partial void EnterRule_new();
	partial void LeaveRule_new();

	// $ANTLR start "new"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:58:2: new : ( NEW ^ TYPE ) ;
	[GrammarRule("new")]
	private AstParserRuleReturnScope<object, IToken> @new()
	{
		EnterRule_new();
		EnterRule("new", 18);
		TraceIn("new", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NEW85 = default(IToken);
		IToken TYPE86 = default(IToken);

		object NEW85_tree = default(object);
		object TYPE86_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "new");
		DebugLocation(58, 19);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:58:6: ( ( NEW ^ TYPE ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:58:8: ( NEW ^ TYPE )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(58, 8);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:58:8: ( NEW ^ TYPE )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:58:9: NEW ^ TYPE
			{
			DebugLocation(58, 12);
			NEW85=(IToken)Match(input,NEW,Follow._NEW_in_new598); 
			NEW85_tree = (object)adaptor.Create(NEW85);
			root_0 = (object)adaptor.BecomeRoot(NEW85_tree, root_0);
			DebugLocation(58, 14);
			TYPE86=(IToken)Match(input,TYPE,Follow._TYPE_in_new601); 
			TYPE86_tree = (object)adaptor.Create(TYPE86);
			adaptor.AddChild(root_0, TYPE86_tree);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("new", 18);
			LeaveRule("new", 18);
			LeaveRule_new();
		}
		DebugLocation(58, 19);
		} finally { DebugExitRule(GrammarFileName, "new"); }
		return retval;

	}
	// $ANTLR end "new"

	partial void EnterRule_dispatch();
	partial void LeaveRule_dispatch();

	// $ANTLR start "dispatch"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:62:2: dispatch : ( ARROBA TYPE | PNT ) ID ^ OP_PARENT ! ( expr ( COMA ! expr )* )? CL_PARENT !;
	[GrammarRule("dispatch")]
	private AstParserRuleReturnScope<object, IToken> dispatch()
	{
		EnterRule_dispatch();
		EnterRule("dispatch", 19);
		TraceIn("dispatch", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ARROBA87 = default(IToken);
		IToken TYPE88 = default(IToken);
		IToken PNT89 = default(IToken);
		IToken ID90 = default(IToken);
		IToken OP_PARENT91 = default(IToken);
		IToken COMA93 = default(IToken);
		IToken CL_PARENT95 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr92 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr94 = default(AstParserRuleReturnScope<object, IToken>);

		object ARROBA87_tree = default(object);
		object TYPE88_tree = default(object);
		object PNT89_tree = default(object);
		object ID90_tree = default(object);
		object OP_PARENT91_tree = default(object);
		object COMA93_tree = default(object);
		object CL_PARENT95_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "dispatch");
		DebugLocation(62, 79);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:62:10: ( ( ARROBA TYPE | PNT ) ID ^ OP_PARENT ! ( expr ( COMA ! expr )* )? CL_PARENT !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:62:12: ( ARROBA TYPE | PNT ) ID ^ OP_PARENT ! ( expr ( COMA ! expr )* )? CL_PARENT !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(62, 12);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:62:12: ( ARROBA TYPE | PNT )
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==ARROBA))
			{
				alt14 = 1;
			}
			else if ((LA14_0==PNT))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:62:13: ARROBA TYPE
				{
				DebugLocation(62, 13);
				ARROBA87=(IToken)Match(input,ARROBA,Follow._ARROBA_in_dispatch618); 
				ARROBA87_tree = (object)adaptor.Create(ARROBA87);
				adaptor.AddChild(root_0, ARROBA87_tree);
				DebugLocation(62, 20);
				TYPE88=(IToken)Match(input,TYPE,Follow._TYPE_in_dispatch620); 
				TYPE88_tree = (object)adaptor.Create(TYPE88);
				adaptor.AddChild(root_0, TYPE88_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:62:26: PNT
				{
				DebugLocation(62, 26);
				PNT89=(IToken)Match(input,PNT,Follow._PNT_in_dispatch623); 
				PNT89_tree = (object)adaptor.Create(PNT89);
				adaptor.AddChild(root_0, PNT89_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(62, 33);
			ID90=(IToken)Match(input,ID,Follow._ID_in_dispatch626); 
			ID90_tree = (object)adaptor.Create(ID90);
			root_0 = (object)adaptor.BecomeRoot(ID90_tree, root_0);
			DebugLocation(62, 44);
			OP_PARENT91=(IToken)Match(input,OP_PARENT,Follow._OP_PARENT_in_dispatch629); 
			DebugLocation(62, 46);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:62:46: ( expr ( COMA ! expr )* )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if (((LA16_0>=BOOLEAN && LA16_0<=CASE)||(LA16_0>=ID && LA16_0<=IF)||LA16_0==ISVOID||LA16_0==LET||(LA16_0>=NANARITA && LA16_0<=NEW)||(LA16_0>=NOT && LA16_0<=NUMBER)||(LA16_0>=OP_LLAVE && LA16_0<=OP_PARENT)||LA16_0==STRING||LA16_0==TYPE||LA16_0==WHILE))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:62:47: expr ( COMA ! expr )*
				{
				DebugLocation(62, 47);
				PushFollow(Follow._expr_in_dispatch633);
				expr92=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr92.Tree);
				DebugLocation(62, 52);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:62:52: ( COMA ! expr )*
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==COMA))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch ( alt15 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:62:54: COMA ! expr
						{
						DebugLocation(62, 58);
						COMA93=(IToken)Match(input,COMA,Follow._COMA_in_dispatch637); 
						DebugLocation(62, 60);
						PushFollow(Follow._expr_in_dispatch640);
						expr94=expr();
						PopFollow();

						adaptor.AddChild(root_0, expr94.Tree);

						}
						break;

					default:
						goto loop15;
					}
				}

				loop15:
					;

				} finally { DebugExitSubRule(15); }


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(62, 78);
			CL_PARENT95=(IToken)Match(input,CL_PARENT,Follow._CL_PARENT_in_dispatch646); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dispatch", 19);
			LeaveRule("dispatch", 19);
			LeaveRule_dispatch();
		}
		DebugLocation(62, 79);
		} finally { DebugExitRule(GrammarFileName, "dispatch"); }
		return retval;

	}
	// $ANTLR end "dispatch"

	partial void EnterRule_dispatch1();
	partial void LeaveRule_dispatch1();

	// $ANTLR start "dispatch1"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:64:2: dispatch1 : ( ARROBA TYPE | PNT ) OP_PARENT ! ( expr ( COMA ! expr )* )? CL_PARENT !;
	[GrammarRule("dispatch1")]
	private AstParserRuleReturnScope<object, IToken> dispatch1()
	{
		EnterRule_dispatch1();
		EnterRule("dispatch1", 20);
		TraceIn("dispatch1", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ARROBA96 = default(IToken);
		IToken TYPE97 = default(IToken);
		IToken PNT98 = default(IToken);
		IToken OP_PARENT99 = default(IToken);
		IToken COMA101 = default(IToken);
		IToken CL_PARENT103 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr100 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr102 = default(AstParserRuleReturnScope<object, IToken>);

		object ARROBA96_tree = default(object);
		object TYPE97_tree = default(object);
		object PNT98_tree = default(object);
		object OP_PARENT99_tree = default(object);
		object COMA101_tree = default(object);
		object CL_PARENT103_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "dispatch1");
		DebugLocation(64, 68);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:65:3: ( ( ARROBA TYPE | PNT ) OP_PARENT ! ( expr ( COMA ! expr )* )? CL_PARENT !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:65:5: ( ARROBA TYPE | PNT ) OP_PARENT ! ( expr ( COMA ! expr )* )? CL_PARENT !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(65, 5);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:65:5: ( ARROBA TYPE | PNT )
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==ARROBA))
			{
				alt17 = 1;
			}
			else if ((LA17_0==PNT))
			{
				alt17 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:65:6: ARROBA TYPE
				{
				DebugLocation(65, 6);
				ARROBA96=(IToken)Match(input,ARROBA,Follow._ARROBA_in_dispatch1661); 
				ARROBA96_tree = (object)adaptor.Create(ARROBA96);
				adaptor.AddChild(root_0, ARROBA96_tree);
				DebugLocation(65, 13);
				TYPE97=(IToken)Match(input,TYPE,Follow._TYPE_in_dispatch1663); 
				TYPE97_tree = (object)adaptor.Create(TYPE97);
				adaptor.AddChild(root_0, TYPE97_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:65:19: PNT
				{
				DebugLocation(65, 19);
				PNT98=(IToken)Match(input,PNT,Follow._PNT_in_dispatch1666); 
				PNT98_tree = (object)adaptor.Create(PNT98);
				adaptor.AddChild(root_0, PNT98_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(65, 33);
			OP_PARENT99=(IToken)Match(input,OP_PARENT,Follow._OP_PARENT_in_dispatch1669); 
			DebugLocation(65, 35);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:65:35: ( expr ( COMA ! expr )* )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if (((LA19_0>=BOOLEAN && LA19_0<=CASE)||(LA19_0>=ID && LA19_0<=IF)||LA19_0==ISVOID||LA19_0==LET||(LA19_0>=NANARITA && LA19_0<=NEW)||(LA19_0>=NOT && LA19_0<=NUMBER)||(LA19_0>=OP_LLAVE && LA19_0<=OP_PARENT)||LA19_0==STRING||LA19_0==TYPE||LA19_0==WHILE))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:65:36: expr ( COMA ! expr )*
				{
				DebugLocation(65, 36);
				PushFollow(Follow._expr_in_dispatch1673);
				expr100=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr100.Tree);
				DebugLocation(65, 41);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:65:41: ( COMA ! expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==COMA))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:65:43: COMA ! expr
						{
						DebugLocation(65, 47);
						COMA101=(IToken)Match(input,COMA,Follow._COMA_in_dispatch1677); 
						DebugLocation(65, 49);
						PushFollow(Follow._expr_in_dispatch1680);
						expr102=expr();
						PopFollow();

						adaptor.AddChild(root_0, expr102.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(65, 67);
			CL_PARENT103=(IToken)Match(input,CL_PARENT,Follow._CL_PARENT_in_dispatch1686); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dispatch1", 20);
			LeaveRule("dispatch1", 20);
			LeaveRule_dispatch1();
		}
		DebugLocation(65, 68);
		} finally { DebugExitRule(GrammarFileName, "dispatch1"); }
		return retval;

	}
	// $ANTLR end "dispatch1"

	partial void EnterRule_dispatch2();
	partial void LeaveRule_dispatch2();

	// $ANTLR start "dispatch2"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:66:2: dispatch2 : OP_PARENT ! ( expr ( COMA ! expr )* )? CL_PARENT !;
	[GrammarRule("dispatch2")]
	private AstParserRuleReturnScope<object, IToken> dispatch2()
	{
		EnterRule_dispatch2();
		EnterRule("dispatch2", 21);
		TraceIn("dispatch2", 21);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OP_PARENT104 = default(IToken);
		IToken COMA106 = default(IToken);
		IToken CL_PARENT108 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr105 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr107 = default(AstParserRuleReturnScope<object, IToken>);

		object OP_PARENT104_tree = default(object);
		object COMA106_tree = default(object);
		object CL_PARENT108_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "dispatch2");
		DebugLocation(66, 50);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:67:3: ( OP_PARENT ! ( expr ( COMA ! expr )* )? CL_PARENT !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:67:6: OP_PARENT ! ( expr ( COMA ! expr )* )? CL_PARENT !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(67, 15);
			OP_PARENT104=(IToken)Match(input,OP_PARENT,Follow._OP_PARENT_in_dispatch2699); 
			DebugLocation(67, 17);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:67:17: ( expr ( COMA ! expr )* )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if (((LA21_0>=BOOLEAN && LA21_0<=CASE)||(LA21_0>=ID && LA21_0<=IF)||LA21_0==ISVOID||LA21_0==LET||(LA21_0>=NANARITA && LA21_0<=NEW)||(LA21_0>=NOT && LA21_0<=NUMBER)||(LA21_0>=OP_LLAVE && LA21_0<=OP_PARENT)||LA21_0==STRING||LA21_0==TYPE||LA21_0==WHILE))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:67:18: expr ( COMA ! expr )*
				{
				DebugLocation(67, 18);
				PushFollow(Follow._expr_in_dispatch2703);
				expr105=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr105.Tree);
				DebugLocation(67, 23);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:67:23: ( COMA ! expr )*
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_0 = input.LA(1);

					if ((LA20_0==COMA))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch ( alt20 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:67:25: COMA ! expr
						{
						DebugLocation(67, 29);
						COMA106=(IToken)Match(input,COMA,Follow._COMA_in_dispatch2707); 
						DebugLocation(67, 31);
						PushFollow(Follow._expr_in_dispatch2710);
						expr107=expr();
						PopFollow();

						adaptor.AddChild(root_0, expr107.Tree);

						}
						break;

					default:
						goto loop20;
					}
				}

				loop20:
					;

				} finally { DebugExitSubRule(20); }


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(67, 49);
			CL_PARENT108=(IToken)Match(input,CL_PARENT,Follow._CL_PARENT_in_dispatch2716); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dispatch2", 21);
			LeaveRule("dispatch2", 21);
			LeaveRule_dispatch2();
		}
		DebugLocation(67, 50);
		} finally { DebugExitRule(GrammarFileName, "dispatch2"); }
		return retval;

	}
	// $ANTLR end "dispatch2"

	partial void EnterRule_operations();
	partial void LeaveRule_operations();

	// $ANTLR start "operations"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:68:2: operations : lv1 ;
	[GrammarRule("operations")]
	private AstParserRuleReturnScope<object, IToken> operations()
	{
		EnterRule_operations();
		EnterRule("operations", 22);
		TraceIn("operations", 22);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> lv1109 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "operations");
		DebugLocation(68, 9);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:69:3: ( lv1 )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:69:6: lv1
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(69, 6);
			PushFollow(Follow._lv1_in_operations729);
			lv1109=lv1();
			PopFollow();

			adaptor.AddChild(root_0, lv1109.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operations", 22);
			LeaveRule("operations", 22);
			LeaveRule_operations();
		}
		DebugLocation(69, 9);
		} finally { DebugExitRule(GrammarFileName, "operations"); }
		return retval;

	}
	// $ANTLR end "operations"

	partial void EnterRule_lv1();
	partial void LeaveRule_lv1();

	// $ANTLR start "lv1"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:3: lv1 : lv2 ( LEQ ^ lv1 | GEQ ^ lv1 | L ^ lv1 | G ^ lv1 | EQ ^ lv1 )? ;
	[GrammarRule("lv1")]
	private AstParserRuleReturnScope<object, IToken> lv1()
	{
		EnterRule_lv1();
		EnterRule("lv1", 23);
		TraceIn("lv1", 23);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LEQ111 = default(IToken);
		IToken GEQ113 = default(IToken);
		IToken L115 = default(IToken);
		IToken G117 = default(IToken);
		IToken EQ119 = default(IToken);
		AstParserRuleReturnScope<object, IToken> lv2110 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> lv1112 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> lv1114 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> lv1116 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> lv1118 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> lv1120 = default(AstParserRuleReturnScope<object, IToken>);

		object LEQ111_tree = default(object);
		object GEQ113_tree = default(object);
		object L115_tree = default(object);
		object G117_tree = default(object);
		object EQ119_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "lv1");
		DebugLocation(70, 55);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:6: ( lv2 ( LEQ ^ lv1 | GEQ ^ lv1 | L ^ lv1 | G ^ lv1 | EQ ^ lv1 )? )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:9: lv2 ( LEQ ^ lv1 | GEQ ^ lv1 | L ^ lv1 | G ^ lv1 | EQ ^ lv1 )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(70, 9);
			PushFollow(Follow._lv2_in_lv1739);
			lv2110=lv2();
			PopFollow();

			adaptor.AddChild(root_0, lv2110.Tree);
			DebugLocation(70, 13);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:13: ( LEQ ^ lv1 | GEQ ^ lv1 | L ^ lv1 | G ^ lv1 | EQ ^ lv1 )?
			int alt22=6;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case LEQ:
				{
				alt22 = 1;
				}
				break;
			case GEQ:
				{
				alt22 = 2;
				}
				break;
			case L:
				{
				alt22 = 3;
				}
				break;
			case G:
				{
				alt22 = 4;
				}
				break;
			case EQ:
				{
				alt22 = 5;
				}
				break;
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:15: LEQ ^ lv1
				{
				DebugLocation(70, 18);
				LEQ111=(IToken)Match(input,LEQ,Follow._LEQ_in_lv1743); 
				LEQ111_tree = (object)adaptor.Create(LEQ111);
				root_0 = (object)adaptor.BecomeRoot(LEQ111_tree, root_0);
				DebugLocation(70, 20);
				PushFollow(Follow._lv1_in_lv1746);
				lv1112=lv1();
				PopFollow();

				adaptor.AddChild(root_0, lv1112.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:24: GEQ ^ lv1
				{
				DebugLocation(70, 27);
				GEQ113=(IToken)Match(input,GEQ,Follow._GEQ_in_lv1748); 
				GEQ113_tree = (object)adaptor.Create(GEQ113);
				root_0 = (object)adaptor.BecomeRoot(GEQ113_tree, root_0);
				DebugLocation(70, 29);
				PushFollow(Follow._lv1_in_lv1751);
				lv1114=lv1();
				PopFollow();

				adaptor.AddChild(root_0, lv1114.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:33: L ^ lv1
				{
				DebugLocation(70, 34);
				L115=(IToken)Match(input,L,Follow._L_in_lv1753); 
				L115_tree = (object)adaptor.Create(L115);
				root_0 = (object)adaptor.BecomeRoot(L115_tree, root_0);
				DebugLocation(70, 36);
				PushFollow(Follow._lv1_in_lv1756);
				lv1116=lv1();
				PopFollow();

				adaptor.AddChild(root_0, lv1116.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:40: G ^ lv1
				{
				DebugLocation(70, 41);
				G117=(IToken)Match(input,G,Follow._G_in_lv1758); 
				G117_tree = (object)adaptor.Create(G117);
				root_0 = (object)adaptor.BecomeRoot(G117_tree, root_0);
				DebugLocation(70, 43);
				PushFollow(Follow._lv1_in_lv1761);
				lv1118=lv1();
				PopFollow();

				adaptor.AddChild(root_0, lv1118.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:47: EQ ^ lv1
				{
				DebugLocation(70, 49);
				EQ119=(IToken)Match(input,EQ,Follow._EQ_in_lv1763); 
				EQ119_tree = (object)adaptor.Create(EQ119);
				root_0 = (object)adaptor.BecomeRoot(EQ119_tree, root_0);
				DebugLocation(70, 51);
				PushFollow(Follow._lv1_in_lv1766);
				lv1120=lv1();
				PopFollow();

				adaptor.AddChild(root_0, lv1120.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lv1", 23);
			LeaveRule("lv1", 23);
			LeaveRule_lv1();
		}
		DebugLocation(70, 55);
		} finally { DebugExitRule(GrammarFileName, "lv1"); }
		return retval;

	}
	// $ANTLR end "lv1"

	partial void EnterRule_lv2();
	partial void LeaveRule_lv2();

	// $ANTLR start "lv2"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:3: lv2 : lv3 ( PLUS ^ lv2 | MINUS ^ lv2 )? ;
	[GrammarRule("lv2")]
	private AstParserRuleReturnScope<object, IToken> lv2()
	{
		EnterRule_lv2();
		EnterRule("lv2", 24);
		TraceIn("lv2", 24);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken PLUS122 = default(IToken);
		IToken MINUS124 = default(IToken);
		AstParserRuleReturnScope<object, IToken> lv3121 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> lv2123 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> lv2125 = default(AstParserRuleReturnScope<object, IToken>);

		object PLUS122_tree = default(object);
		object MINUS124_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "lv2");
		DebugLocation(71, 38);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:6: ( lv3 ( PLUS ^ lv2 | MINUS ^ lv2 )? )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:8: lv3 ( PLUS ^ lv2 | MINUS ^ lv2 )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(71, 8);
			PushFollow(Follow._lv3_in_lv2776);
			lv3121=lv3();
			PopFollow();

			adaptor.AddChild(root_0, lv3121.Tree);
			DebugLocation(71, 12);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:12: ( PLUS ^ lv2 | MINUS ^ lv2 )?
			int alt23=3;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==PLUS))
			{
				alt23 = 1;
			}
			else if ((LA23_0==MINUS))
			{
				alt23 = 2;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:14: PLUS ^ lv2
				{
				DebugLocation(71, 18);
				PLUS122=(IToken)Match(input,PLUS,Follow._PLUS_in_lv2780); 
				PLUS122_tree = (object)adaptor.Create(PLUS122);
				root_0 = (object)adaptor.BecomeRoot(PLUS122_tree, root_0);
				DebugLocation(71, 21);
				PushFollow(Follow._lv2_in_lv2784);
				lv2123=lv2();
				PopFollow();

				adaptor.AddChild(root_0, lv2123.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:25: MINUS ^ lv2
				{
				DebugLocation(71, 30);
				MINUS124=(IToken)Match(input,MINUS,Follow._MINUS_in_lv2786); 
				MINUS124_tree = (object)adaptor.Create(MINUS124);
				root_0 = (object)adaptor.BecomeRoot(MINUS124_tree, root_0);
				DebugLocation(71, 33);
				PushFollow(Follow._lv2_in_lv2790);
				lv2125=lv2();
				PopFollow();

				adaptor.AddChild(root_0, lv2125.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lv2", 24);
			LeaveRule("lv2", 24);
			LeaveRule_lv2();
		}
		DebugLocation(71, 38);
		} finally { DebugExitRule(GrammarFileName, "lv2"); }
		return retval;

	}
	// $ANTLR end "lv2"

	partial void EnterRule_lv3();
	partial void LeaveRule_lv3();

	// $ANTLR start "lv3"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:72:3: lv3 : lv4 ( MULT ^ lv3 | DIV ^ lv3 )? ;
	[GrammarRule("lv3")]
	private AstParserRuleReturnScope<object, IToken> lv3()
	{
		EnterRule_lv3();
		EnterRule("lv3", 25);
		TraceIn("lv3", 25);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken MULT127 = default(IToken);
		IToken DIV129 = default(IToken);
		AstParserRuleReturnScope<object, IToken> lv4126 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> lv3128 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> lv3130 = default(AstParserRuleReturnScope<object, IToken>);

		object MULT127_tree = default(object);
		object DIV129_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "lv3");
		DebugLocation(72, 34);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:72:6: ( lv4 ( MULT ^ lv3 | DIV ^ lv3 )? )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:72:8: lv4 ( MULT ^ lv3 | DIV ^ lv3 )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(72, 8);
			PushFollow(Follow._lv4_in_lv3801);
			lv4126=lv4();
			PopFollow();

			adaptor.AddChild(root_0, lv4126.Tree);
			DebugLocation(72, 11);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:72:11: ( MULT ^ lv3 | DIV ^ lv3 )?
			int alt24=3;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==MULT))
			{
				alt24 = 1;
			}
			else if ((LA24_0==DIV))
			{
				alt24 = 2;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:72:13: MULT ^ lv3
				{
				DebugLocation(72, 17);
				MULT127=(IToken)Match(input,MULT,Follow._MULT_in_lv3804); 
				MULT127_tree = (object)adaptor.Create(MULT127);
				root_0 = (object)adaptor.BecomeRoot(MULT127_tree, root_0);
				DebugLocation(72, 20);
				PushFollow(Follow._lv3_in_lv3808);
				lv3128=lv3();
				PopFollow();

				adaptor.AddChild(root_0, lv3128.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:72:24: DIV ^ lv3
				{
				DebugLocation(72, 27);
				DIV129=(IToken)Match(input,DIV,Follow._DIV_in_lv3810); 
				DIV129_tree = (object)adaptor.Create(DIV129);
				root_0 = (object)adaptor.BecomeRoot(DIV129_tree, root_0);
				DebugLocation(72, 30);
				PushFollow(Follow._lv3_in_lv3814);
				lv3130=lv3();
				PopFollow();

				adaptor.AddChild(root_0, lv3130.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lv3", 25);
			LeaveRule("lv3", 25);
			LeaveRule_lv3();
		}
		DebugLocation(72, 34);
		} finally { DebugExitRule(GrammarFileName, "lv3"); }
		return retval;

	}
	// $ANTLR end "lv3"

	partial void EnterRule_lv4();
	partial void LeaveRule_lv4();

	// $ANTLR start "lv4"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:73:3: lv4 : lv5 ;
	[GrammarRule("lv4")]
	private AstParserRuleReturnScope<object, IToken> lv4()
	{
		EnterRule_lv4();
		EnterRule("lv4", 26);
		TraceIn("lv4", 26);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> lv5131 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "lv4");
		DebugLocation(73, 11);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:73:6: ( lv5 )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:73:8: lv5
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(73, 8);
			PushFollow(Follow._lv5_in_lv4824);
			lv5131=lv5();
			PopFollow();

			adaptor.AddChild(root_0, lv5131.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lv4", 26);
			LeaveRule("lv4", 26);
			LeaveRule_lv4();
		}
		DebugLocation(73, 11);
		} finally { DebugExitRule(GrammarFileName, "lv4"); }
		return retval;

	}
	// $ANTLR end "lv4"

	partial void EnterRule_lv5();
	partial void LeaveRule_lv5();

	// $ANTLR start "lv5"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:74:3: lv5 : lv6 ;
	[GrammarRule("lv5")]
	private AstParserRuleReturnScope<object, IToken> lv5()
	{
		EnterRule_lv5();
		EnterRule("lv5", 27);
		TraceIn("lv5", 27);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> lv6132 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "lv5");
		DebugLocation(74, 12);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:74:6: ( lv6 )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:74:9: lv6
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(74, 9);
			PushFollow(Follow._lv6_in_lv5834);
			lv6132=lv6();
			PopFollow();

			adaptor.AddChild(root_0, lv6132.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lv5", 27);
			LeaveRule("lv5", 27);
			LeaveRule_lv5();
		}
		DebugLocation(74, 12);
		} finally { DebugExitRule(GrammarFileName, "lv5"); }
		return retval;

	}
	// $ANTLR end "lv5"

	partial void EnterRule_lv6();
	partial void LeaveRule_lv6();

	// $ANTLR start "lv6"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:3: lv6 : ( ID ^ ( dispatch2 | dispatch )? | tmp2 ( dispatch )? | constant ( dispatch )? ) ;
	[GrammarRule("lv6")]
	private AstParserRuleReturnScope<object, IToken> lv6()
	{
		EnterRule_lv6();
		EnterRule("lv6", 28);
		TraceIn("lv6", 28);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID133 = default(IToken);
		AstParserRuleReturnScope<object, IToken> dispatch2134 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> dispatch135 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> tmp2136 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> dispatch137 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constant138 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> dispatch139 = default(AstParserRuleReturnScope<object, IToken>);

		object ID133_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "lv6");
		DebugLocation(75, 70);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:6: ( ( ID ^ ( dispatch2 | dispatch )? | tmp2 ( dispatch )? | constant ( dispatch )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:8: ( ID ^ ( dispatch2 | dispatch )? | tmp2 ( dispatch )? | constant ( dispatch )? )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(75, 8);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:8: ( ID ^ ( dispatch2 | dispatch )? | tmp2 ( dispatch )? | constant ( dispatch )? )
			int alt28=3;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt28 = 1;
				}
				break;
			case OP_PARENT:
				{
				alt28 = 2;
				}
				break;
			case BOOLEAN:
			case NUMBER:
			case STRING:
				{
				alt28 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:9: ID ^ ( dispatch2 | dispatch )?
				{
				DebugLocation(75, 11);
				ID133=(IToken)Match(input,ID,Follow._ID_in_lv6844); 
				ID133_tree = (object)adaptor.Create(ID133);
				root_0 = (object)adaptor.BecomeRoot(ID133_tree, root_0);
				DebugLocation(75, 13);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:13: ( dispatch2 | dispatch )?
				int alt25=3;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==OP_PARENT))
				{
					alt25 = 1;
				}
				else if ((LA25_0==ARROBA||LA25_0==PNT))
				{
					alt25 = 2;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:14: dispatch2
					{
					DebugLocation(75, 14);
					PushFollow(Follow._dispatch2_in_lv6848);
					dispatch2134=dispatch2();
					PopFollow();

					adaptor.AddChild(root_0, dispatch2134.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:24: dispatch
					{
					DebugLocation(75, 24);
					PushFollow(Follow._dispatch_in_lv6850);
					dispatch135=dispatch();
					PopFollow();

					adaptor.AddChild(root_0, dispatch135.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(25); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:35: tmp2 ( dispatch )?
				{
				DebugLocation(75, 35);
				PushFollow(Follow._tmp2_in_lv6854);
				tmp2136=tmp2();
				PopFollow();

				adaptor.AddChild(root_0, tmp2136.Tree);
				DebugLocation(75, 40);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:40: ( dispatch )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==ARROBA||LA26_0==PNT))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:40: dispatch
					{
					DebugLocation(75, 40);
					PushFollow(Follow._dispatch_in_lv6856);
					dispatch137=dispatch();
					PopFollow();

					adaptor.AddChild(root_0, dispatch137.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:50: constant ( dispatch )?
				{
				DebugLocation(75, 50);
				PushFollow(Follow._constant_in_lv6859);
				constant138=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant138.Tree);
				DebugLocation(75, 59);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:59: ( dispatch )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==ARROBA||LA27_0==PNT))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:59: dispatch
					{
					DebugLocation(75, 59);
					PushFollow(Follow._dispatch_in_lv6861);
					dispatch139=dispatch();
					PopFollow();

					adaptor.AddChild(root_0, dispatch139.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lv6", 28);
			LeaveRule("lv6", 28);
			LeaveRule_lv6();
		}
		DebugLocation(75, 70);
		} finally { DebugExitRule(GrammarFileName, "lv6"); }
		return retval;

	}
	// $ANTLR end "lv6"

	partial void EnterRule_tmp1();
	partial void LeaveRule_tmp1();

	// $ANTLR start "tmp1"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:76:3: tmp1 : ID tmp ;
	[GrammarRule("tmp1")]
	private AstParserRuleReturnScope<object, IToken> tmp1()
	{
		EnterRule_tmp1();
		EnterRule("tmp1", 29);
		TraceIn("tmp1", 29);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID140 = default(IToken);
		AstParserRuleReturnScope<object, IToken> tmp141 = default(AstParserRuleReturnScope<object, IToken>);

		object ID140_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "tmp1");
		DebugLocation(76, 15);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:76:7: ( ID tmp )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:76:9: ID tmp
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(76, 9);
			ID140=(IToken)Match(input,ID,Follow._ID_in_tmp1873); 
			ID140_tree = (object)adaptor.Create(ID140);
			adaptor.AddChild(root_0, ID140_tree);
			DebugLocation(76, 12);
			PushFollow(Follow._tmp_in_tmp1875);
			tmp141=tmp();
			PopFollow();

			adaptor.AddChild(root_0, tmp141.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tmp1", 29);
			LeaveRule("tmp1", 29);
			LeaveRule_tmp1();
		}
		DebugLocation(76, 15);
		} finally { DebugExitRule(GrammarFileName, "tmp1"); }
		return retval;

	}
	// $ANTLR end "tmp1"

	partial void EnterRule_tmp2();
	partial void LeaveRule_tmp2();

	// $ANTLR start "tmp2"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:77:3: tmp2 : OP_PARENT ! expr CL_PARENT !;
	[GrammarRule("tmp2")]
	private AstParserRuleReturnScope<object, IToken> tmp2()
	{
		EnterRule_tmp2();
		EnterRule("tmp2", 30);
		TraceIn("tmp2", 30);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OP_PARENT142 = default(IToken);
		IToken CL_PARENT144 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr143 = default(AstParserRuleReturnScope<object, IToken>);

		object OP_PARENT142_tree = default(object);
		object CL_PARENT144_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "tmp2");
		DebugLocation(77, 34);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:77:7: ( OP_PARENT ! expr CL_PARENT !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:77:9: OP_PARENT ! expr CL_PARENT !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(77, 18);
			OP_PARENT142=(IToken)Match(input,OP_PARENT,Follow._OP_PARENT_in_tmp2884); 
			DebugLocation(77, 20);
			PushFollow(Follow._expr_in_tmp2887);
			expr143=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr143.Tree);
			DebugLocation(77, 34);
			CL_PARENT144=(IToken)Match(input,CL_PARENT,Follow._CL_PARENT_in_tmp2889); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tmp2", 30);
			LeaveRule("tmp2", 30);
			LeaveRule_tmp2();
		}
		DebugLocation(77, 34);
		} finally { DebugExitRule(GrammarFileName, "tmp2"); }
		return retval;

	}
	// $ANTLR end "tmp2"

	partial void EnterRule_tmp();
	partial void LeaveRule_tmp();

	// $ANTLR start "tmp"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:78:3: tmp : ( dispatch2 ) ;
	[GrammarRule("tmp")]
	private AstParserRuleReturnScope<object, IToken> tmp()
	{
		EnterRule_tmp();
		EnterRule("tmp", 31);
		TraceIn("tmp", 31);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> dispatch2145 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "tmp");
		DebugLocation(78, 18);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:78:6: ( ( dispatch2 ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:78:8: ( dispatch2 )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(78, 8);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:78:8: ( dispatch2 )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:78:9: dispatch2
			{
			DebugLocation(78, 9);
			PushFollow(Follow._dispatch2_in_tmp899);
			dispatch2145=dispatch2();
			PopFollow();

			adaptor.AddChild(root_0, dispatch2145.Tree);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tmp", 31);
			LeaveRule("tmp", 31);
			LeaveRule_tmp();
		}
		DebugLocation(78, 18);
		} finally { DebugExitRule(GrammarFileName, "tmp"); }
		return retval;

	}
	// $ANTLR end "tmp"

	partial void EnterRule_nanarita();
	partial void LeaveRule_nanarita();

	// $ANTLR start "nanarita"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:79:2: nanarita : NANARITA ^ expr ;
	[GrammarRule("nanarita")]
	private AstParserRuleReturnScope<object, IToken> nanarita()
	{
		EnterRule_nanarita();
		EnterRule("nanarita", 32);
		TraceIn("nanarita", 32);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NANARITA146 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr147 = default(AstParserRuleReturnScope<object, IToken>);

		object NANARITA146_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "nanarita");
		DebugLocation(79, 26);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:79:10: ( NANARITA ^ expr )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:79:12: NANARITA ^ expr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(79, 20);
			NANARITA146=(IToken)Match(input,NANARITA,Follow._NANARITA_in_nanarita907); 
			NANARITA146_tree = (object)adaptor.Create(NANARITA146);
			root_0 = (object)adaptor.BecomeRoot(NANARITA146_tree, root_0);
			DebugLocation(79, 22);
			PushFollow(Follow._expr_in_nanarita910);
			expr147=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr147.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nanarita", 32);
			LeaveRule("nanarita", 32);
			LeaveRule_nanarita();
		}
		DebugLocation(79, 26);
		} finally { DebugExitRule(GrammarFileName, "nanarita"); }
		return retval;

	}
	// $ANTLR end "nanarita"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();

	// $ANTLR start "constant"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:80:3: constant : ( STRING | NUMBER | BOOLEAN );
	[GrammarRule("constant")]
	private AstParserRuleReturnScope<object, IToken> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 33);
		TraceIn("constant", 33);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set148 = default(IToken);

		object set148_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(80, 33);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:80:11: ( STRING | NUMBER | BOOLEAN )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(80, 11);

			set148=(IToken)input.LT(1);
			if (input.LA(1)==BOOLEAN||input.LA(1)==NUMBER||input.LA(1)==STRING)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set148));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 33);
			LeaveRule("constant", 33);
			LeaveRule_constant();
		}
		DebugLocation(80, 33);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_wsnl();
	partial void LeaveRule_wsnl();

	// $ANTLR start "wsnl"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:81:2: wsnl : ( WS | NL )+ ;
	[GrammarRule("wsnl")]
	private AstParserRuleReturnScope<object, IToken> wsnl()
	{
		EnterRule_wsnl();
		EnterRule("wsnl", 34);
		TraceIn("wsnl", 34);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set149 = default(IToken);

		object set149_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "wsnl");
		DebugLocation(81, 17);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:81:7: ( ( WS | NL )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:81:9: ( WS | NL )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(81, 9);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:81:9: ( WS | NL )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==NL||LA29_0==WS))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
					{
					DebugLocation(81, 9);

					set149=(IToken)input.LT(1);
					if (input.LA(1)==NL||input.LA(1)==WS)
					{
						input.Consume();
						adaptor.AddChild(root_0, (object)adaptor.Create(set149));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("wsnl", 34);
			LeaveRule("wsnl", 34);
			LeaveRule_wsnl();
		}
		DebugLocation(81, 17);
		} finally { DebugExitRule(GrammarFileName, "wsnl"); }
		return retval;

	}
	// $ANTLR end "wsnl"

	partial void EnterRule_compileUnit();
	partial void LeaveRule_compileUnit();

	// $ANTLR start "compileUnit"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:82:1: compileUnit : EOF ;
	[GrammarRule("compileUnit")]
	private AstParserRuleReturnScope<object, IToken> compileUnit()
	{
		EnterRule_compileUnit();
		EnterRule("compileUnit", 35);
		TraceIn("compileUnit", 35);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EOF150 = default(IToken);

		object EOF150_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "compileUnit");
		DebugLocation(82, 1);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:83:2: ( EOF )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:83:4: EOF
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(83, 4);
			EOF150=(IToken)Match(input,EOF,Follow._EOF_in_compileUnit945); 
			EOF150_tree = (object)adaptor.Create(EOF150);
			adaptor.AddChild(root_0, EOF150_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compileUnit", 35);
			LeaveRule("compileUnit", 35);
			LeaveRule_compileUnit();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "compileUnit"); }
		return retval;

	}
	// $ANTLR end "compileUnit"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _class_in_program66 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _EOF_in_program70 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLASS_in_class80 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _TYPE_in_class82 = new BitSet(new ulong[]{0x10000400000000UL});
		public static readonly BitSet _INHERITS_in_class86 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _TYPE_in_class88 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _OP_LLAVE_in_class92 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _feature_list_in_class97 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _CL_LLAVE_in_class101 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _END_in_class104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _feature_in_feature_list116 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _ID_in_feature125 = new BitSet(new ulong[]{0x20000000080000UL});
		public static readonly BitSet _attribute_in_feature128 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _methodefinition_in_feature139 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _END_in_feature151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLEP_in_attribute162 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _TYPE_in_attribute165 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _ASSING_in_attribute168 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_attribute170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PARENT_in_methodefinition181 = new BitSet(new ulong[]{0x40004000UL});
		public static readonly BitSet _params_list_in_methodefinition184 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _CL_PARENT_in_methodefinition190 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _DOUBLEP_in_methodefinition193 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _TYPE_in_methodefinition196 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _OP_LLAVE_in_methodefinition199 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_methodefinition202 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _CL_LLAVE_in_methodefinition205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _param_in_params_list229 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _COMA_in_params_list235 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _param_in_params_list238 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _ID_in_param257 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _DOUBLEP_in_param260 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _TYPE_in_param263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_in_expr280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionals_in_expr287 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _loops_in_expr294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _blocks_in_expr301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_in_expr308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expr315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_in_expr322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operations_in_expr329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPE_in_expr336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_expr345 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_expr348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ISVOID_in_expr357 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_expr361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nanarita_in_expr369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_assignment382 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ASSING_in_assignment384 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_assignment388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_conditionals398 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_conditionals400 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _THEN_in_conditionals403 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_conditionals405 = new BitSet(new ulong[]{0x4100000UL});
		public static readonly BitSet _ELSE_in_conditionals409 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_conditionals411 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _FI_in_conditionals415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_loops443 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_loops447 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _LOOP_in_loops449 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_loops451 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _POOL_in_loops453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_LLAVE_in_blocks462 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_blocks466 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _END_in_blocks468 = new BitSet(new ulong[]{0x28336048C0002600UL,0x4UL});
		public static readonly BitSet _expr_in_blocks473 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _END_in_blocks475 = new BitSet(new ulong[]{0x28336048C0002600UL,0x4UL});
		public static readonly BitSet _CL_LLAVE_in_blocks480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LET_in_let490 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _var_list_declaration_in_let493 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _IN_in_let495 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_let497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_vardeclaration521 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _attribute_in_vardeclaration523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _vardeclaration_in_var_list_declaration544 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _COMA_in_var_list_declaration551 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _vardeclaration_in_var_list_declaration553 = new BitSet(new ulong[]{0x8002UL});
		public static readonly BitSet _CASE_in_case571 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_case574 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _OF_in_case576 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _param_in_case579 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _IMPLICS_in_case581 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_case583 = new BitSet(new ulong[]{0x40800000UL});
		public static readonly BitSet _ESAC_in_case587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_new598 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _TYPE_in_new601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARROBA_in_dispatch618 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _TYPE_in_dispatch620 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _PNT_in_dispatch623 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _ID_in_dispatch626 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _OP_PARENT_in_dispatch629 = new BitSet(new ulong[]{0x28336048C0004600UL,0x4UL});
		public static readonly BitSet _expr_in_dispatch633 = new BitSet(new ulong[]{0xC000UL});
		public static readonly BitSet _COMA_in_dispatch637 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_dispatch640 = new BitSet(new ulong[]{0xC000UL});
		public static readonly BitSet _CL_PARENT_in_dispatch646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARROBA_in_dispatch1661 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _TYPE_in_dispatch1663 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _PNT_in_dispatch1666 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _OP_PARENT_in_dispatch1669 = new BitSet(new ulong[]{0x28336048C0004600UL,0x4UL});
		public static readonly BitSet _expr_in_dispatch1673 = new BitSet(new ulong[]{0xC000UL});
		public static readonly BitSet _COMA_in_dispatch1677 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_dispatch1680 = new BitSet(new ulong[]{0xC000UL});
		public static readonly BitSet _CL_PARENT_in_dispatch1686 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PARENT_in_dispatch2699 = new BitSet(new ulong[]{0x28336048C0004600UL,0x4UL});
		public static readonly BitSet _expr_in_dispatch2703 = new BitSet(new ulong[]{0xC000UL});
		public static readonly BitSet _COMA_in_dispatch2707 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_dispatch2710 = new BitSet(new ulong[]{0xC000UL});
		public static readonly BitSet _CL_PARENT_in_dispatch2716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lv1_in_operations729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lv2_in_lv1739 = new BitSet(new ulong[]{0x3018400002UL});
		public static readonly BitSet _LEQ_in_lv1743 = new BitSet(new ulong[]{0x822000040000200UL});
		public static readonly BitSet _lv1_in_lv1746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GEQ_in_lv1748 = new BitSet(new ulong[]{0x822000040000200UL});
		public static readonly BitSet _lv1_in_lv1751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_in_lv1753 = new BitSet(new ulong[]{0x822000040000200UL});
		public static readonly BitSet _lv1_in_lv1756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _G_in_lv1758 = new BitSet(new ulong[]{0x822000040000200UL});
		public static readonly BitSet _lv1_in_lv1761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EQ_in_lv1763 = new BitSet(new ulong[]{0x822000040000200UL});
		public static readonly BitSet _lv1_in_lv1766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lv3_in_lv2776 = new BitSet(new ulong[]{0x100080000000002UL});
		public static readonly BitSet _PLUS_in_lv2780 = new BitSet(new ulong[]{0x822000040000200UL});
		public static readonly BitSet _lv2_in_lv2784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_lv2786 = new BitSet(new ulong[]{0x822000040000200UL});
		public static readonly BitSet _lv2_in_lv2790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lv4_in_lv3801 = new BitSet(new ulong[]{0x100000040002UL});
		public static readonly BitSet _MULT_in_lv3804 = new BitSet(new ulong[]{0x822000040000200UL});
		public static readonly BitSet _lv3_in_lv3808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DIV_in_lv3810 = new BitSet(new ulong[]{0x822000040000200UL});
		public static readonly BitSet _lv3_in_lv3814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lv5_in_lv4824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lv6_in_lv5834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_lv6844 = new BitSet(new ulong[]{0x220000000000012UL});
		public static readonly BitSet _dispatch2_in_lv6848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dispatch_in_lv6850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tmp2_in_lv6854 = new BitSet(new ulong[]{0x200000000000012UL});
		public static readonly BitSet _dispatch_in_lv6856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_lv6859 = new BitSet(new ulong[]{0x200000000000012UL});
		public static readonly BitSet _dispatch_in_lv6861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tmp1873 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _tmp_in_tmp1875 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PARENT_in_tmp2884 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_tmp2887 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _CL_PARENT_in_tmp2889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dispatch2_in_tmp899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NANARITA_in_nanarita907 = new BitSet(new ulong[]{0x28336048C0000600UL,0x4UL});
		public static readonly BitSet _expr_in_nanarita910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_compileUnit945 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
