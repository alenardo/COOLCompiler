//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g 2018-03-14 18:53:19

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using LexingParsingCOOL;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class COOLParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARROBA", "ASSIGNMENT_LIST", "ASSING", "ATTRIBUTE", "BLOCK", "BODY", "BOOLEAN", "CASE", "CASEBRANCH", "CASEBRANCHES", "CHAR", "CLASS", "CL_LLAVE", "CL_PARENT", "COMA", "COMMENT", "CONDITION", "DIGIT", "DISPATCH", "DIV", "DOUBLEP", "ELSE", "END", "EQ", "ESAC", "ESC_SEQ", "EXPONENT", "FI", "G", "GEQ", "HEX_DIGIT", "ID", "IF", "IMPLICS", "IN", "INHERITS", "ISVOID", "L", "LEQ", "LET", "LOOP", "LOWERCASE", "METHOD", "METHODEFINITION", "MINUS", "MULT", "NANARITA", "NEW", "NL", "NOT", "NUMBER", "OCTAL_ESC", "OF", "OP_LLAVE", "OP_PARENT", "PARAM", "PARAMLIST", "PLUS", "PNT", "POOL", "PROGRAM", "STRING", "THEN", "TYPE", "UNICODE_ESC", "UPERCASE", "VAR_DECLARATION", "VAR_DECLARATION_LIST", "WHILE", "WS"
	};
	public const int EOF=-1;
	public const int ARROBA=4;
	public const int ASSIGNMENT_LIST=5;
	public const int ASSING=6;
	public const int ATTRIBUTE=7;
	public const int BLOCK=8;
	public const int BODY=9;
	public const int BOOLEAN=10;
	public const int CASE=11;
	public const int CASEBRANCH=12;
	public const int CASEBRANCHES=13;
	public const int CHAR=14;
	public const int CLASS=15;
	public const int CL_LLAVE=16;
	public const int CL_PARENT=17;
	public const int COMA=18;
	public const int COMMENT=19;
	public const int CONDITION=20;
	public const int DIGIT=21;
	public const int DISPATCH=22;
	public const int DIV=23;
	public const int DOUBLEP=24;
	public const int ELSE=25;
	public const int END=26;
	public const int EQ=27;
	public const int ESAC=28;
	public const int ESC_SEQ=29;
	public const int EXPONENT=30;
	public const int FI=31;
	public const int G=32;
	public const int GEQ=33;
	public const int HEX_DIGIT=34;
	public const int ID=35;
	public const int IF=36;
	public const int IMPLICS=37;
	public const int IN=38;
	public const int INHERITS=39;
	public const int ISVOID=40;
	public const int L=41;
	public const int LEQ=42;
	public const int LET=43;
	public const int LOOP=44;
	public const int LOWERCASE=45;
	public const int METHOD=46;
	public const int METHODEFINITION=47;
	public const int MINUS=48;
	public const int MULT=49;
	public const int NANARITA=50;
	public const int NEW=51;
	public const int NL=52;
	public const int NOT=53;
	public const int NUMBER=54;
	public const int OCTAL_ESC=55;
	public const int OF=56;
	public const int OP_LLAVE=57;
	public const int OP_PARENT=58;
	public const int PARAM=59;
	public const int PARAMLIST=60;
	public const int PLUS=61;
	public const int PNT=62;
	public const int POOL=63;
	public const int PROGRAM=64;
	public const int STRING=65;
	public const int THEN=66;
	public const int TYPE=67;
	public const int UNICODE_ESC=68;
	public const int UPERCASE=69;
	public const int VAR_DECLARATION=70;
	public const int VAR_DECLARATION_LIST=71;
	public const int WHILE=72;
	public const int WS=73;

	public COOLParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public COOLParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return COOLParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();

	// $ANTLR start "program"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:43:9: public program : ( class )+ EOF -> ^( PROGRAM ( class )+ ) ;
	[GrammarRule("program")]
	public AstParserRuleReturnScope<COOLCommonTree, IToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken EOF2 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> class1 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree EOF2_tree = default(COOLCommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_class=new RewriteRuleSubtreeStream(adaptor,"rule class");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(43, 51);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:43:16: ( ( class )+ EOF -> ^( PROGRAM ( class )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:43:18: ( class )+ EOF
			{
			DebugLocation(43, 18);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:43:18: ( class )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==CLASS))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:43:19: class
					{
					DebugLocation(43, 19);
					PushFollow(Follow._class_in_program94);
					class1=@class();
					PopFollow();

					stream_class.Add(class1.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(43, 27);
			EOF2=(IToken)Match(input,EOF,Follow._EOF_in_program98);  
			stream_EOF.Add(EOF2);



			{
			// AST REWRITE
			// elements: class
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (COOLCommonTree)adaptor.Nil();
			// 43:30: -> ^( PROGRAM ( class )+ )
			{
				DebugLocation(43, 32);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:43:32: ^( PROGRAM ( class )+ )
				{
				COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
				DebugLocation(43, 34);
				root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

				DebugLocation(43, 42);
				if (!(stream_class.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_class.HasNext )
				{
					DebugLocation(43, 43);
					adaptor.AddChild(root_1, stream_class.NextTree());

				}
				stream_class.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(43, 51);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_class();
	partial void LeaveRule_class();

	// $ANTLR start "class"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:45:2: class : ( CLASS ^ TYPE ( INHERITS TYPE )? OP_LLAVE ! ( feature_list )? CL_LLAVE ! END !) ;
	[GrammarRule("class")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> @class()
	{
		EnterRule_class();
		EnterRule("class", 2);
		TraceIn("class", 2);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken CLASS3 = default(IToken);
		IToken TYPE4 = default(IToken);
		IToken INHERITS5 = default(IToken);
		IToken TYPE6 = default(IToken);
		IToken OP_LLAVE7 = default(IToken);
		IToken CL_LLAVE9 = default(IToken);
		IToken END10 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> feature_list8 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree CLASS3_tree = default(COOLCommonTree);
		COOLCommonTree TYPE4_tree = default(COOLCommonTree);
		COOLCommonTree INHERITS5_tree = default(COOLCommonTree);
		COOLCommonTree TYPE6_tree = default(COOLCommonTree);
		COOLCommonTree OP_LLAVE7_tree = default(COOLCommonTree);
		COOLCommonTree CL_LLAVE9_tree = default(COOLCommonTree);
		COOLCommonTree END10_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "class");
		DebugLocation(45, 2);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:45:7: ( ( CLASS ^ TYPE ( INHERITS TYPE )? OP_LLAVE ! ( feature_list )? CL_LLAVE ! END !) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:45:9: ( CLASS ^ TYPE ( INHERITS TYPE )? OP_LLAVE ! ( feature_list )? CL_LLAVE ! END !)
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(45, 9);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:45:9: ( CLASS ^ TYPE ( INHERITS TYPE )? OP_LLAVE ! ( feature_list )? CL_LLAVE ! END !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:45:10: CLASS ^ TYPE ( INHERITS TYPE )? OP_LLAVE ! ( feature_list )? CL_LLAVE ! END !
			{
			DebugLocation(45, 15);
			CLASS3=(IToken)Match(input,CLASS,Follow._CLASS_in_class117); 
			CLASS3_tree = (COOLCommonTree)adaptor.Create(CLASS3);
			root_0 = (COOLCommonTree)adaptor.BecomeRoot(CLASS3_tree, root_0);
			DebugLocation(45, 17);
			TYPE4=(IToken)Match(input,TYPE,Follow._TYPE_in_class120); 
			TYPE4_tree = (COOLCommonTree)adaptor.Create(TYPE4);
			adaptor.AddChild(root_0, TYPE4_tree);
			DebugLocation(45, 22);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:45:22: ( INHERITS TYPE )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==INHERITS))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:45:23: INHERITS TYPE
				{
				DebugLocation(45, 23);
				INHERITS5=(IToken)Match(input,INHERITS,Follow._INHERITS_in_class123); 
				INHERITS5_tree = (COOLCommonTree)adaptor.Create(INHERITS5);
				adaptor.AddChild(root_0, INHERITS5_tree);
				DebugLocation(45, 32);
				TYPE6=(IToken)Match(input,TYPE,Follow._TYPE_in_class125); 
				TYPE6_tree = (COOLCommonTree)adaptor.Create(TYPE6);
				adaptor.AddChild(root_0, TYPE6_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(45, 47);
			OP_LLAVE7=(IToken)Match(input,OP_LLAVE,Follow._OP_LLAVE_in_class129); 
			DebugLocation(45, 49);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:45:49: ( feature_list )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==ID))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:45:51: feature_list
				{
				DebugLocation(45, 51);
				PushFollow(Follow._feature_list_in_class134);
				feature_list8=feature_list();
				PopFollow();

				adaptor.AddChild(root_0, feature_list8.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(45, 74);
			CL_LLAVE9=(IToken)Match(input,CL_LLAVE,Follow._CL_LLAVE_in_class138); 
			DebugLocation(45, 79);
			END10=(IToken)Match(input,END,Follow._END_in_class141); 

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class", 2);
			LeaveRule("class", 2);
			LeaveRule_class();
		}
		DebugLocation(46, 2);
		} finally { DebugExitRule(GrammarFileName, "class"); }
		return retval;

	}
	// $ANTLR end "class"

	partial void EnterRule_feature_list();
	partial void LeaveRule_feature_list();

	// $ANTLR start "feature_list"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:47:2: feature_list : ( feature )+ ;
	[GrammarRule("feature_list")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> feature_list()
	{
		EnterRule_feature_list();
		EnterRule("feature_list", 3);
		TraceIn("feature_list", 3);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		AstParserRuleReturnScope<COOLCommonTree, IToken> feature11 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "feature_list");
		DebugLocation(47, 23);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:47:14: ( ( feature )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:47:16: ( feature )+
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(47, 16);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:47:16: ( feature )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==ID))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:47:16: feature
					{
					DebugLocation(47, 16);
					PushFollow(Follow._feature_in_feature_list153);
					feature11=feature();
					PopFollow();

					adaptor.AddChild(root_0, feature11.Tree);

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("feature_list", 3);
			LeaveRule("feature_list", 3);
			LeaveRule_feature_list();
		}
		DebugLocation(47, 23);
		} finally { DebugExitRule(GrammarFileName, "feature_list"); }
		return retval;

	}
	// $ANTLR end "feature_list"

	partial void EnterRule_feature();
	partial void LeaveRule_feature();

	// $ANTLR start "feature"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:2: feature : ( ID ( attribute -> ^( ATTRIBUTE ID attribute ) | methodefinition -> ^( METHOD ID methodefinition ) ) END ) ;
	[GrammarRule("feature")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> feature()
	{
		EnterRule_feature();
		EnterRule("feature", 4);
		TraceIn("feature", 4);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken ID12 = default(IToken);
		IToken END15 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> attribute13 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> methodefinition14 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree ID12_tree = default(COOLCommonTree);
		COOLCommonTree END15_tree = default(COOLCommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_methodefinition=new RewriteRuleSubtreeStream(adaptor,"rule methodefinition");
		try { DebugEnterRule(GrammarFileName, "feature");
		DebugLocation(48, 106);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:9: ( ( ID ( attribute -> ^( ATTRIBUTE ID attribute ) | methodefinition -> ^( METHOD ID methodefinition ) ) END ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:11: ( ID ( attribute -> ^( ATTRIBUTE ID attribute ) | methodefinition -> ^( METHOD ID methodefinition ) ) END )
			{
			DebugLocation(48, 11);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:11: ( ID ( attribute -> ^( ATTRIBUTE ID attribute ) | methodefinition -> ^( METHOD ID methodefinition ) ) END )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:12: ID ( attribute -> ^( ATTRIBUTE ID attribute ) | methodefinition -> ^( METHOD ID methodefinition ) ) END
			{
			DebugLocation(48, 12);
			ID12=(IToken)Match(input,ID,Follow._ID_in_feature162);  
			stream_ID.Add(ID12);

			DebugLocation(48, 15);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:15: ( attribute -> ^( ATTRIBUTE ID attribute ) | methodefinition -> ^( METHOD ID methodefinition ) )
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==DOUBLEP))
			{
				alt5 = 1;
			}
			else if ((LA5_0==OP_PARENT))
			{
				alt5 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:16: attribute
				{
				DebugLocation(48, 16);
				PushFollow(Follow._attribute_in_feature165);
				attribute13=attribute();
				PopFollow();

				stream_attribute.Add(attribute13.Tree);


				{
				// AST REWRITE
				// elements: ID, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (COOLCommonTree)adaptor.Nil();
				// 48:25: -> ^( ATTRIBUTE ID attribute )
				{
					DebugLocation(48, 28);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:28: ^( ATTRIBUTE ID attribute )
					{
					COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
					DebugLocation(48, 30);
					root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(ATTRIBUTE, "ATTRIBUTE"), root_1);

					DebugLocation(48, 40);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(48, 43);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:54: methodefinition
				{
				DebugLocation(48, 54);
				PushFollow(Follow._methodefinition_in_feature176);
				methodefinition14=methodefinition();
				PopFollow();

				stream_methodefinition.Add(methodefinition14.Tree);


				{
				// AST REWRITE
				// elements: ID, methodefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (COOLCommonTree)adaptor.Nil();
				// 48:69: -> ^( METHOD ID methodefinition )
				{
					DebugLocation(48, 72);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:48:72: ^( METHOD ID methodefinition )
					{
					COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
					DebugLocation(48, 74);
					root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(METHOD, "METHOD"), root_1);

					DebugLocation(48, 81);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(48, 84);
					adaptor.AddChild(root_1, stream_methodefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(48, 102);
			END15=(IToken)Match(input,END,Follow._END_in_feature188);  
			stream_END.Add(END15);


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("feature", 4);
			LeaveRule("feature", 4);
			LeaveRule_feature();
		}
		DebugLocation(48, 106);
		} finally { DebugExitRule(GrammarFileName, "feature"); }
		return retval;

	}
	// $ANTLR end "feature"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:50:1: attribute : DOUBLEP ! TYPE ( ASSING expr )? ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 5);
		TraceIn("attribute", 5);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken DOUBLEP16 = default(IToken);
		IToken TYPE17 = default(IToken);
		IToken ASSING18 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr19 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree DOUBLEP16_tree = default(COOLCommonTree);
		COOLCommonTree TYPE17_tree = default(COOLCommonTree);
		COOLCommonTree ASSING18_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(50, 42);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:50:10: ( DOUBLEP ! TYPE ( ASSING expr )? )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:50:13: DOUBLEP ! TYPE ( ASSING expr )?
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(50, 20);
			DOUBLEP16=(IToken)Match(input,DOUBLEP,Follow._DOUBLEP_in_attribute199); 
			DebugLocation(50, 22);
			TYPE17=(IToken)Match(input,TYPE,Follow._TYPE_in_attribute202); 
			TYPE17_tree = (COOLCommonTree)adaptor.Create(TYPE17);
			adaptor.AddChild(root_0, TYPE17_tree);
			DebugLocation(50, 27);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:50:27: ( ASSING expr )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0==ASSING))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:50:28: ASSING expr
				{
				DebugLocation(50, 28);
				ASSING18=(IToken)Match(input,ASSING,Follow._ASSING_in_attribute205); 
				ASSING18_tree = (COOLCommonTree)adaptor.Create(ASSING18);
				adaptor.AddChild(root_0, ASSING18_tree);
				DebugLocation(50, 35);
				PushFollow(Follow._expr_in_attribute207);
				expr19=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr19.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 5);
			LeaveRule("attribute", 5);
			LeaveRule_attribute();
		}
		DebugLocation(50, 42);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_methodefinition();
	partial void LeaveRule_methodefinition();

	// $ANTLR start "methodefinition"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:2: methodefinition : OP_PARENT ( params_list )? CL_PARENT DOUBLEP TYPE OP_LLAVE expr CL_LLAVE -> ^( METHODEFINITION ( params_list )? TYPE ^( BODY expr ) ) ;
	[GrammarRule("methodefinition")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> methodefinition()
	{
		EnterRule_methodefinition();
		EnterRule("methodefinition", 6);
		TraceIn("methodefinition", 6);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken OP_PARENT20 = default(IToken);
		IToken CL_PARENT22 = default(IToken);
		IToken DOUBLEP23 = default(IToken);
		IToken TYPE24 = default(IToken);
		IToken OP_LLAVE25 = default(IToken);
		IToken CL_LLAVE27 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> params_list21 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr26 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree OP_PARENT20_tree = default(COOLCommonTree);
		COOLCommonTree CL_PARENT22_tree = default(COOLCommonTree);
		COOLCommonTree DOUBLEP23_tree = default(COOLCommonTree);
		COOLCommonTree TYPE24_tree = default(COOLCommonTree);
		COOLCommonTree OP_LLAVE25_tree = default(COOLCommonTree);
		COOLCommonTree CL_LLAVE27_tree = default(COOLCommonTree);
		RewriteRuleITokenStream stream_CL_PARENT=new RewriteRuleITokenStream(adaptor,"token CL_PARENT");
		RewriteRuleITokenStream stream_OP_PARENT=new RewriteRuleITokenStream(adaptor,"token OP_PARENT");
		RewriteRuleITokenStream stream_DOUBLEP=new RewriteRuleITokenStream(adaptor,"token DOUBLEP");
		RewriteRuleITokenStream stream_OP_LLAVE=new RewriteRuleITokenStream(adaptor,"token OP_LLAVE");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleITokenStream stream_CL_LLAVE=new RewriteRuleITokenStream(adaptor,"token CL_LLAVE");
		RewriteRuleSubtreeStream stream_params_list=new RewriteRuleSubtreeStream(adaptor,"rule params_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "methodefinition");
		DebugLocation(51, 147);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:17: ( OP_PARENT ( params_list )? CL_PARENT DOUBLEP TYPE OP_LLAVE expr CL_LLAVE -> ^( METHODEFINITION ( params_list )? TYPE ^( BODY expr ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:19: OP_PARENT ( params_list )? CL_PARENT DOUBLEP TYPE OP_LLAVE expr CL_LLAVE
			{
			DebugLocation(51, 19);
			OP_PARENT20=(IToken)Match(input,OP_PARENT,Follow._OP_PARENT_in_methodefinition218);  
			stream_OP_PARENT.Add(OP_PARENT20);

			DebugLocation(51, 29);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:29: ( params_list )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==ID))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:30: params_list
				{
				DebugLocation(51, 30);
				PushFollow(Follow._params_list_in_methodefinition221);
				params_list21=params_list();
				PopFollow();

				stream_params_list.Add(params_list21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(51, 46);
			CL_PARENT22=(IToken)Match(input,CL_PARENT,Follow._CL_PARENT_in_methodefinition227);  
			stream_CL_PARENT.Add(CL_PARENT22);

			DebugLocation(51, 57);
			DOUBLEP23=(IToken)Match(input,DOUBLEP,Follow._DOUBLEP_in_methodefinition230);  
			stream_DOUBLEP.Add(DOUBLEP23);

			DebugLocation(51, 66);
			TYPE24=(IToken)Match(input,TYPE,Follow._TYPE_in_methodefinition233);  
			stream_TYPE.Add(TYPE24);

			DebugLocation(51, 72);
			OP_LLAVE25=(IToken)Match(input,OP_LLAVE,Follow._OP_LLAVE_in_methodefinition236);  
			stream_OP_LLAVE.Add(OP_LLAVE25);

			DebugLocation(51, 82);
			PushFollow(Follow._expr_in_methodefinition239);
			expr26=expr();
			PopFollow();

			stream_expr.Add(expr26.Tree);
			DebugLocation(51, 88);
			CL_LLAVE27=(IToken)Match(input,CL_LLAVE,Follow._CL_LLAVE_in_methodefinition242);  
			stream_CL_LLAVE.Add(CL_LLAVE27);



			{
			// AST REWRITE
			// elements: params_list, expr, TYPE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (COOLCommonTree)adaptor.Nil();
			// 51:96: -> ^( METHODEFINITION ( params_list )? TYPE ^( BODY expr ) )
			{
				DebugLocation(51, 98);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:98: ^( METHODEFINITION ( params_list )? TYPE ^( BODY expr ) )
				{
				COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
				DebugLocation(51, 100);
				root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(METHODEFINITION, "METHODEFINITION"), root_1);

				DebugLocation(51, 116);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:116: ( params_list )?
				if (stream_params_list.HasNext)
				{
					DebugLocation(51, 116);
					adaptor.AddChild(root_1, stream_params_list.NextTree());

				}
				stream_params_list.Reset();
				DebugLocation(51, 129);
				adaptor.AddChild(root_1, stream_TYPE.NextNode());
				DebugLocation(51, 134);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:51:134: ^( BODY expr )
				{
				COOLCommonTree root_2 = (COOLCommonTree)adaptor.Nil();
				DebugLocation(51, 136);
				root_2 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(BODY, "BODY"), root_2);

				DebugLocation(51, 141);
				adaptor.AddChild(root_2, stream_expr.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("methodefinition", 6);
			LeaveRule("methodefinition", 6);
			LeaveRule_methodefinition();
		}
		DebugLocation(51, 147);
		} finally { DebugExitRule(GrammarFileName, "methodefinition"); }
		return retval;

	}
	// $ANTLR end "methodefinition"

	partial void EnterRule_params_list();
	partial void LeaveRule_params_list();

	// $ANTLR start "params_list"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:2: params_list : param ( COMA param )* -> ^( PARAMLIST param ( param )* ) ;
	[GrammarRule("params_list")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> params_list()
	{
		EnterRule_params_list();
		EnterRule("params_list", 7);
		TraceIn("params_list", 7);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken COMA29 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> param28 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> param30 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree COMA29_tree = default(COOLCommonTree);
		RewriteRuleITokenStream stream_COMA=new RewriteRuleITokenStream(adaptor,"token COMA");
		RewriteRuleSubtreeStream stream_param=new RewriteRuleSubtreeStream(adaptor,"rule param");
		try { DebugEnterRule(GrammarFileName, "params_list");
		DebugLocation(52, 61);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:13: ( param ( COMA param )* -> ^( PARAMLIST param ( param )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:15: param ( COMA param )*
			{
			DebugLocation(52, 15);
			PushFollow(Follow._param_in_params_list265);
			param28=param();
			PopFollow();

			stream_param.Add(param28.Tree);
			DebugLocation(52, 21);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:21: ( COMA param )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==COMA))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:22: COMA param
					{
					DebugLocation(52, 22);
					COMA29=(IToken)Match(input,COMA,Follow._COMA_in_params_list268);  
					stream_COMA.Add(COMA29);

					DebugLocation(52, 28);
					PushFollow(Follow._param_in_params_list271);
					param30=param();
					PopFollow();

					stream_param.Add(param30.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: param, param
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (COOLCommonTree)adaptor.Nil();
			// 52:35: -> ^( PARAMLIST param ( param )* )
			{
				DebugLocation(52, 37);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:37: ^( PARAMLIST param ( param )* )
				{
				COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
				DebugLocation(52, 39);
				root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(PARAMLIST, "PARAMLIST"), root_1);

				DebugLocation(52, 49);
				adaptor.AddChild(root_1, stream_param.NextTree());
				DebugLocation(52, 55);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:52:55: ( param )*
				while ( stream_param.HasNext )
				{
					DebugLocation(52, 55);
					adaptor.AddChild(root_1, stream_param.NextTree());

				}
				stream_param.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("params_list", 7);
			LeaveRule("params_list", 7);
			LeaveRule_params_list();
		}
		DebugLocation(52, 61);
		} finally { DebugExitRule(GrammarFileName, "params_list"); }
		return retval;

	}
	// $ANTLR end "params_list"

	partial void EnterRule_param();
	partial void LeaveRule_param();

	// $ANTLR start "param"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:53:2: param : ( ID DOUBLEP TYPE ) -> ^( PARAM ID TYPE ) ;
	[GrammarRule("param")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> param()
	{
		EnterRule_param();
		EnterRule("param", 8);
		TraceIn("param", 8);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken ID31 = default(IToken);
		IToken DOUBLEP32 = default(IToken);
		IToken TYPE33 = default(IToken);

		COOLCommonTree ID31_tree = default(COOLCommonTree);
		COOLCommonTree DOUBLEP32_tree = default(COOLCommonTree);
		COOLCommonTree TYPE33_tree = default(COOLCommonTree);
		RewriteRuleITokenStream stream_DOUBLEP=new RewriteRuleITokenStream(adaptor,"token DOUBLEP");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(53, 45);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:53:7: ( ( ID DOUBLEP TYPE ) -> ^( PARAM ID TYPE ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:53:9: ( ID DOUBLEP TYPE )
			{
			DebugLocation(53, 9);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:53:9: ( ID DOUBLEP TYPE )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:53:10: ID DOUBLEP TYPE
			{
			DebugLocation(53, 10);
			ID31=(IToken)Match(input,ID,Follow._ID_in_param290);  
			stream_ID.Add(ID31);

			DebugLocation(53, 14);
			DOUBLEP32=(IToken)Match(input,DOUBLEP,Follow._DOUBLEP_in_param293);  
			stream_DOUBLEP.Add(DOUBLEP32);

			DebugLocation(53, 23);
			TYPE33=(IToken)Match(input,TYPE,Follow._TYPE_in_param296);  
			stream_TYPE.Add(TYPE33);


			}



			{
			// AST REWRITE
			// elements: TYPE, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (COOLCommonTree)adaptor.Nil();
			// 53:28: -> ^( PARAM ID TYPE )
			{
				DebugLocation(53, 30);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:53:30: ^( PARAM ID TYPE )
				{
				COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
				DebugLocation(53, 32);
				root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(PARAM, "PARAM"), root_1);

				DebugLocation(53, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(53, 41);
				adaptor.AddChild(root_1, stream_TYPE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param", 8);
			LeaveRule("param", 8);
			LeaveRule_param();
		}
		DebugLocation(53, 45);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return retval;

	}
	// $ANTLR end "param"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:55:2: expr : ( assignment | conditionals | loops | blocks | let | case | new | operations | TYPE ^| ( NOT ^ expr ) | ( ISVOID ^ expr ) | nanarita );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 9);
		TraceIn("expr", 9);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken TYPE42 = default(IToken);
		IToken NOT43 = default(IToken);
		IToken ISVOID45 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> assignment34 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> conditionals35 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> loops36 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> blocks37 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> let38 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> case39 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> new40 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> operations41 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr44 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr46 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> nanarita47 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree TYPE42_tree = default(COOLCommonTree);
		COOLCommonTree NOT43_tree = default(COOLCommonTree);
		COOLCommonTree ISVOID45_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(55, 13);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:55:6: ( assignment | conditionals | loops | blocks | let | case | new | operations | TYPE ^| ( NOT ^ expr ) | ( ISVOID ^ expr ) | nanarita )
			int alt9=12;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA9_1 = input.LA(2);

				if ((LA9_1==ASSING))
				{
					alt9 = 1;
				}
				else if ((LA9_1==EOF||LA9_1==ARROBA||(LA9_1>=CL_LLAVE && LA9_1<=COMA)||LA9_1==DIV||(LA9_1>=ELSE && LA9_1<=EQ)||(LA9_1>=FI && LA9_1<=GEQ)||LA9_1==IN||(LA9_1>=L && LA9_1<=LEQ)||LA9_1==LOOP||(LA9_1>=MINUS && LA9_1<=MULT)||LA9_1==OF||LA9_1==OP_PARENT||(LA9_1>=PLUS && LA9_1<=POOL)||LA9_1==THEN))
				{
					alt9 = 8;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				alt9 = 2;
				}
				break;
			case WHILE:
				{
				alt9 = 3;
				}
				break;
			case OP_LLAVE:
				{
				alt9 = 4;
				}
				break;
			case LET:
				{
				alt9 = 5;
				}
				break;
			case CASE:
				{
				alt9 = 6;
				}
				break;
			case NEW:
				{
				alt9 = 7;
				}
				break;
			case BOOLEAN:
			case NUMBER:
			case OP_PARENT:
			case STRING:
				{
				alt9 = 8;
				}
				break;
			case TYPE:
				{
				alt9 = 9;
				}
				break;
			case NOT:
				{
				alt9 = 10;
				}
				break;
			case ISVOID:
				{
				alt9 = 11;
				}
				break;
			case NANARITA:
				{
				alt9 = 12;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:55:8: assignment
				{
				root_0 = (COOLCommonTree)adaptor.Nil();

				DebugLocation(55, 8);
				PushFollow(Follow._assignment_in_expr313);
				assignment34=assignment();
				PopFollow();

				adaptor.AddChild(root_0, assignment34.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:56:6: conditionals
				{
				root_0 = (COOLCommonTree)adaptor.Nil();

				DebugLocation(56, 6);
				PushFollow(Follow._conditionals_in_expr320);
				conditionals35=conditionals();
				PopFollow();

				adaptor.AddChild(root_0, conditionals35.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:57:6: loops
				{
				root_0 = (COOLCommonTree)adaptor.Nil();

				DebugLocation(57, 6);
				PushFollow(Follow._loops_in_expr327);
				loops36=loops();
				PopFollow();

				adaptor.AddChild(root_0, loops36.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:58:6: blocks
				{
				root_0 = (COOLCommonTree)adaptor.Nil();

				DebugLocation(58, 6);
				PushFollow(Follow._blocks_in_expr334);
				blocks37=blocks();
				PopFollow();

				adaptor.AddChild(root_0, blocks37.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:59:6: let
				{
				root_0 = (COOLCommonTree)adaptor.Nil();

				DebugLocation(59, 6);
				PushFollow(Follow._let_in_expr341);
				let38=let();
				PopFollow();

				adaptor.AddChild(root_0, let38.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:60:6: case
				{
				root_0 = (COOLCommonTree)adaptor.Nil();

				DebugLocation(60, 6);
				PushFollow(Follow._case_in_expr348);
				case39=@case();
				PopFollow();

				adaptor.AddChild(root_0, case39.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:61:6: new
				{
				root_0 = (COOLCommonTree)adaptor.Nil();

				DebugLocation(61, 6);
				PushFollow(Follow._new_in_expr355);
				new40=@new();
				PopFollow();

				adaptor.AddChild(root_0, new40.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:62:6: operations
				{
				root_0 = (COOLCommonTree)adaptor.Nil();

				DebugLocation(62, 6);
				PushFollow(Follow._operations_in_expr362);
				operations41=operations();
				PopFollow();

				adaptor.AddChild(root_0, operations41.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:63:6: TYPE ^
				{
				root_0 = (COOLCommonTree)adaptor.Nil();

				DebugLocation(63, 10);
				TYPE42=(IToken)Match(input,TYPE,Follow._TYPE_in_expr369); 
				TYPE42_tree = (COOLCommonTree)adaptor.Create(TYPE42);
				root_0 = (COOLCommonTree)adaptor.BecomeRoot(TYPE42_tree, root_0);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:64:6: ( NOT ^ expr )
				{
				root_0 = (COOLCommonTree)adaptor.Nil();

				DebugLocation(64, 6);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:64:6: ( NOT ^ expr )
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:64:7: NOT ^ expr
				{
				DebugLocation(64, 10);
				NOT43=(IToken)Match(input,NOT,Follow._NOT_in_expr378); 
				NOT43_tree = (COOLCommonTree)adaptor.Create(NOT43);
				root_0 = (COOLCommonTree)adaptor.BecomeRoot(NOT43_tree, root_0);
				DebugLocation(64, 12);
				PushFollow(Follow._expr_in_expr381);
				expr44=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr44.Tree);

				}


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:65:6: ( ISVOID ^ expr )
				{
				root_0 = (COOLCommonTree)adaptor.Nil();

				DebugLocation(65, 6);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:65:6: ( ISVOID ^ expr )
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:65:7: ISVOID ^ expr
				{
				DebugLocation(65, 13);
				ISVOID45=(IToken)Match(input,ISVOID,Follow._ISVOID_in_expr390); 
				ISVOID45_tree = (COOLCommonTree)adaptor.Create(ISVOID45);
				root_0 = (COOLCommonTree)adaptor.BecomeRoot(ISVOID45_tree, root_0);
				DebugLocation(65, 16);
				PushFollow(Follow._expr_in_expr394);
				expr46=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr46.Tree);

				}


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:66:6: nanarita
				{
				root_0 = (COOLCommonTree)adaptor.Nil();

				DebugLocation(66, 6);
				PushFollow(Follow._nanarita_in_expr402);
				nanarita47=nanarita();
				PopFollow();

				adaptor.AddChild(root_0, nanarita47.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 9);
			LeaveRule("expr", 9);
			LeaveRule_expr();
		}
		DebugLocation(66, 13);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_exprList();
	partial void LeaveRule_exprList();

	// $ANTLR start "exprList"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:69:1: exprList : expr END ! ( expr END !)* ;
	[GrammarRule("exprList")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> exprList()
	{
		EnterRule_exprList();
		EnterRule("exprList", 10);
		TraceIn("exprList", 10);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken END49 = default(IToken);
		IToken END51 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr48 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr50 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree END49_tree = default(COOLCommonTree);
		COOLCommonTree END51_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "exprList");
		DebugLocation(69, 32);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:69:9: ( expr END ! ( expr END !)* )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:69:11: expr END ! ( expr END !)*
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(69, 11);
			PushFollow(Follow._expr_in_exprList412);
			expr48=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr48.Tree);
			DebugLocation(69, 19);
			END49=(IToken)Match(input,END,Follow._END_in_exprList414); 
			DebugLocation(69, 21);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:69:21: ( expr END !)*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if (((LA10_0>=BOOLEAN && LA10_0<=CASE)||(LA10_0>=ID && LA10_0<=IF)||LA10_0==ISVOID||LA10_0==LET||(LA10_0>=NANARITA && LA10_0<=NEW)||(LA10_0>=NOT && LA10_0<=NUMBER)||(LA10_0>=OP_LLAVE && LA10_0<=OP_PARENT)||LA10_0==STRING||LA10_0==TYPE||LA10_0==WHILE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:69:22: expr END !
					{
					DebugLocation(69, 22);
					PushFollow(Follow._expr_in_exprList418);
					expr50=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr50.Tree);
					DebugLocation(69, 30);
					END51=(IToken)Match(input,END,Follow._END_in_exprList420); 

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exprList", 10);
			LeaveRule("exprList", 10);
			LeaveRule_exprList();
		}
		DebugLocation(69, 32);
		} finally { DebugExitRule(GrammarFileName, "exprList"); }
		return retval;

	}
	// $ANTLR end "exprList"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();

	// $ANTLR start "assignment"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:2: assignment : ( ID ASSING ^ expr ) ;
	[GrammarRule("assignment")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 11);
		TraceIn("assignment", 11);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken ID52 = default(IToken);
		IToken ASSING53 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr54 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree ID52_tree = default(COOLCommonTree);
		COOLCommonTree ASSING53_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(70, 32);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:12: ( ( ID ASSING ^ expr ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:14: ( ID ASSING ^ expr )
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(70, 14);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:14: ( ID ASSING ^ expr )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:70:15: ID ASSING ^ expr
			{
			DebugLocation(70, 15);
			ID52=(IToken)Match(input,ID,Follow._ID_in_assignment431); 
			ID52_tree = (COOLCommonTree)adaptor.Create(ID52);
			adaptor.AddChild(root_0, ID52_tree);
			DebugLocation(70, 24);
			ASSING53=(IToken)Match(input,ASSING,Follow._ASSING_in_assignment433); 
			ASSING53_tree = (COOLCommonTree)adaptor.Create(ASSING53);
			root_0 = (COOLCommonTree)adaptor.BecomeRoot(ASSING53_tree, root_0);
			DebugLocation(70, 27);
			PushFollow(Follow._expr_in_assignment437);
			expr54=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr54.Tree);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 11);
			LeaveRule("assignment", 11);
			LeaveRule_assignment();
		}
		DebugLocation(70, 32);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_conditionals();
	partial void LeaveRule_conditionals();

	// $ANTLR start "conditionals"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:2: conditionals : ( IF expr ( THEN expr ) ( ELSE expr )? FI ) -> ^( IF expr ^( THEN expr ) ( ^( ELSE expr ) )? ) ;
	[GrammarRule("conditionals")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> conditionals()
	{
		EnterRule_conditionals();
		EnterRule("conditionals", 12);
		TraceIn("conditionals", 12);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken IF55 = default(IToken);
		IToken THEN57 = default(IToken);
		IToken ELSE59 = default(IToken);
		IToken FI61 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr56 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr58 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr60 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree IF55_tree = default(COOLCommonTree);
		COOLCommonTree THEN57_tree = default(COOLCommonTree);
		COOLCommonTree ELSE59_tree = default(COOLCommonTree);
		COOLCommonTree FI61_tree = default(COOLCommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_FI=new RewriteRuleITokenStream(adaptor,"token FI");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "conditionals");
		DebugLocation(71, 92);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:14: ( ( IF expr ( THEN expr ) ( ELSE expr )? FI ) -> ^( IF expr ^( THEN expr ) ( ^( ELSE expr ) )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:16: ( IF expr ( THEN expr ) ( ELSE expr )? FI )
			{
			DebugLocation(71, 16);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:16: ( IF expr ( THEN expr ) ( ELSE expr )? FI )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:17: IF expr ( THEN expr ) ( ELSE expr )? FI
			{
			DebugLocation(71, 17);
			IF55=(IToken)Match(input,IF,Follow._IF_in_conditionals447);  
			stream_IF.Add(IF55);

			DebugLocation(71, 20);
			PushFollow(Follow._expr_in_conditionals449);
			expr56=expr();
			PopFollow();

			stream_expr.Add(expr56.Tree);
			DebugLocation(71, 25);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:25: ( THEN expr )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:26: THEN expr
			{
			DebugLocation(71, 26);
			THEN57=(IToken)Match(input,THEN,Follow._THEN_in_conditionals452);  
			stream_THEN.Add(THEN57);

			DebugLocation(71, 31);
			PushFollow(Follow._expr_in_conditionals454);
			expr58=expr();
			PopFollow();

			stream_expr.Add(expr58.Tree);

			}

			DebugLocation(71, 37);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:37: ( ELSE expr )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==ELSE))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:38: ELSE expr
				{
				DebugLocation(71, 38);
				ELSE59=(IToken)Match(input,ELSE,Follow._ELSE_in_conditionals458);  
				stream_ELSE.Add(ELSE59);

				DebugLocation(71, 43);
				PushFollow(Follow._expr_in_conditionals460);
				expr60=expr();
				PopFollow();

				stream_expr.Add(expr60.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(71, 50);
			FI61=(IToken)Match(input,FI,Follow._FI_in_conditionals464);  
			stream_FI.Add(FI61);


			}



			{
			// AST REWRITE
			// elements: expr, ELSE, expr, THEN, IF, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (COOLCommonTree)adaptor.Nil();
			// 71:53: -> ^( IF expr ^( THEN expr ) ( ^( ELSE expr ) )? )
			{
				DebugLocation(71, 55);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:55: ^( IF expr ^( THEN expr ) ( ^( ELSE expr ) )? )
				{
				COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
				DebugLocation(71, 57);
				root_1 = (COOLCommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

				DebugLocation(71, 60);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(71, 65);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:65: ^( THEN expr )
				{
				COOLCommonTree root_2 = (COOLCommonTree)adaptor.Nil();
				DebugLocation(71, 67);
				root_2 = (COOLCommonTree)adaptor.BecomeRoot(stream_THEN.NextNode(), root_2);

				DebugLocation(71, 72);
				adaptor.AddChild(root_2, stream_expr.NextTree());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(71, 78);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:78: ( ^( ELSE expr ) )?
				if (stream_expr.HasNext||stream_ELSE.HasNext)
				{
					DebugLocation(71, 78);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:71:78: ^( ELSE expr )
					{
					COOLCommonTree root_2 = (COOLCommonTree)adaptor.Nil();
					DebugLocation(71, 80);
					root_2 = (COOLCommonTree)adaptor.BecomeRoot(stream_ELSE.NextNode(), root_2);

					DebugLocation(71, 85);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_expr.Reset();
				stream_ELSE.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionals", 12);
			LeaveRule("conditionals", 12);
			LeaveRule_conditionals();
		}
		DebugLocation(71, 92);
		} finally { DebugExitRule(GrammarFileName, "conditionals"); }
		return retval;

	}
	// $ANTLR end "conditionals"

	partial void EnterRule_loops();
	partial void LeaveRule_loops();

	// $ANTLR start "loops"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:72:2: loops : WHILE ^ expr LOOP ! expr POOL !;
	[GrammarRule("loops")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> loops()
	{
		EnterRule_loops();
		EnterRule("loops", 13);
		TraceIn("loops", 13);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken WHILE62 = default(IToken);
		IToken LOOP64 = default(IToken);
		IToken POOL66 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr63 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr65 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree WHILE62_tree = default(COOLCommonTree);
		COOLCommonTree LOOP64_tree = default(COOLCommonTree);
		COOLCommonTree POOL66_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "loops");
		DebugLocation(72, 38);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:72:7: ( WHILE ^ expr LOOP ! expr POOL !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:72:9: WHILE ^ expr LOOP ! expr POOL !
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(72, 14);
			WHILE62=(IToken)Match(input,WHILE,Follow._WHILE_in_loops492); 
			WHILE62_tree = (COOLCommonTree)adaptor.Create(WHILE62);
			root_0 = (COOLCommonTree)adaptor.BecomeRoot(WHILE62_tree, root_0);
			DebugLocation(72, 17);
			PushFollow(Follow._expr_in_loops496);
			expr63=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr63.Tree);
			DebugLocation(72, 26);
			LOOP64=(IToken)Match(input,LOOP,Follow._LOOP_in_loops498); 
			DebugLocation(72, 28);
			PushFollow(Follow._expr_in_loops501);
			expr65=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr65.Tree);
			DebugLocation(72, 37);
			POOL66=(IToken)Match(input,POOL,Follow._POOL_in_loops503); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("loops", 13);
			LeaveRule("loops", 13);
			LeaveRule_loops();
		}
		DebugLocation(72, 38);
		} finally { DebugExitRule(GrammarFileName, "loops"); }
		return retval;

	}
	// $ANTLR end "loops"

	partial void EnterRule_blocks();
	partial void LeaveRule_blocks();

	// $ANTLR start "blocks"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:73:2: blocks : OP_LLAVE exprList CL_LLAVE -> ^( BLOCK exprList ) ;
	[GrammarRule("blocks")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> blocks()
	{
		EnterRule_blocks();
		EnterRule("blocks", 14);
		TraceIn("blocks", 14);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken OP_LLAVE67 = default(IToken);
		IToken CL_LLAVE69 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> exprList68 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree OP_LLAVE67_tree = default(COOLCommonTree);
		COOLCommonTree CL_LLAVE69_tree = default(COOLCommonTree);
		RewriteRuleITokenStream stream_OP_LLAVE=new RewriteRuleITokenStream(adaptor,"token OP_LLAVE");
		RewriteRuleITokenStream stream_CL_LLAVE=new RewriteRuleITokenStream(adaptor,"token CL_LLAVE");
		RewriteRuleSubtreeStream stream_exprList=new RewriteRuleSubtreeStream(adaptor,"rule exprList");
		try { DebugEnterRule(GrammarFileName, "blocks");
		DebugLocation(73, 56);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:73:8: ( OP_LLAVE exprList CL_LLAVE -> ^( BLOCK exprList ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:73:10: OP_LLAVE exprList CL_LLAVE
			{
			DebugLocation(73, 10);
			OP_LLAVE67=(IToken)Match(input,OP_LLAVE,Follow._OP_LLAVE_in_blocks512);  
			stream_OP_LLAVE.Add(OP_LLAVE67);

			DebugLocation(73, 20);
			PushFollow(Follow._exprList_in_blocks515);
			exprList68=exprList();
			PopFollow();

			stream_exprList.Add(exprList68.Tree);
			DebugLocation(73, 29);
			CL_LLAVE69=(IToken)Match(input,CL_LLAVE,Follow._CL_LLAVE_in_blocks517);  
			stream_CL_LLAVE.Add(CL_LLAVE69);



			{
			// AST REWRITE
			// elements: exprList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (COOLCommonTree)adaptor.Nil();
			// 73:37: -> ^( BLOCK exprList )
			{
				DebugLocation(73, 39);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:73:39: ^( BLOCK exprList )
				{
				COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
				DebugLocation(73, 41);
				root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(73, 47);
				adaptor.AddChild(root_1, stream_exprList.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("blocks", 14);
			LeaveRule("blocks", 14);
			LeaveRule_blocks();
		}
		DebugLocation(73, 56);
		} finally { DebugExitRule(GrammarFileName, "blocks"); }
		return retval;

	}
	// $ANTLR end "blocks"

	partial void EnterRule_let();
	partial void LeaveRule_let();

	// $ANTLR start "let"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:74:2: let : ( LET var_list_declaration IN expr ) -> ^( LET var_list_declaration ^( BODY expr ) ) ;
	[GrammarRule("let")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> let()
	{
		EnterRule_let();
		EnterRule("let", 15);
		TraceIn("let", 15);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken LET70 = default(IToken);
		IToken IN72 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> var_list_declaration71 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr73 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree LET70_tree = default(COOLCommonTree);
		COOLCommonTree IN72_tree = default(COOLCommonTree);
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_LET=new RewriteRuleITokenStream(adaptor,"token LET");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_var_list_declaration=new RewriteRuleSubtreeStream(adaptor,"rule var_list_declaration");
		try { DebugEnterRule(GrammarFileName, "let");
		DebugLocation(74, 84);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:74:5: ( ( LET var_list_declaration IN expr ) -> ^( LET var_list_declaration ^( BODY expr ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:74:7: ( LET var_list_declaration IN expr )
			{
			DebugLocation(74, 7);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:74:7: ( LET var_list_declaration IN expr )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:74:8: LET var_list_declaration IN expr
			{
			DebugLocation(74, 8);
			LET70=(IToken)Match(input,LET,Follow._LET_in_let532);  
			stream_LET.Add(LET70);

			DebugLocation(74, 13);
			PushFollow(Follow._var_list_declaration_in_let535);
			var_list_declaration71=var_list_declaration();
			PopFollow();

			stream_var_list_declaration.Add(var_list_declaration71.Tree);
			DebugLocation(74, 34);
			IN72=(IToken)Match(input,IN,Follow._IN_in_let537);  
			stream_IN.Add(IN72);

			DebugLocation(74, 37);
			PushFollow(Follow._expr_in_let539);
			expr73=expr();
			PopFollow();

			stream_expr.Add(expr73.Tree);

			}



			{
			// AST REWRITE
			// elements: LET, expr, var_list_declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (COOLCommonTree)adaptor.Nil();
			// 74:42: -> ^( LET var_list_declaration ^( BODY expr ) )
			{
				DebugLocation(74, 44);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:74:44: ^( LET var_list_declaration ^( BODY expr ) )
				{
				COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
				DebugLocation(74, 46);
				root_1 = (COOLCommonTree)adaptor.BecomeRoot(stream_LET.NextNode(), root_1);

				DebugLocation(74, 50);
				adaptor.AddChild(root_1, stream_var_list_declaration.NextTree());
				DebugLocation(74, 71);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:74:71: ^( BODY expr )
				{
				COOLCommonTree root_2 = (COOLCommonTree)adaptor.Nil();
				DebugLocation(74, 73);
				root_2 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(BODY, "BODY"), root_2);

				DebugLocation(74, 78);
				adaptor.AddChild(root_2, stream_expr.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let", 15);
			LeaveRule("let", 15);
			LeaveRule_let();
		}
		DebugLocation(74, 84);
		} finally { DebugExitRule(GrammarFileName, "let"); }
		return retval;

	}
	// $ANTLR end "let"

	partial void EnterRule_vardeclaration();
	partial void LeaveRule_vardeclaration();

	// $ANTLR start "vardeclaration"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:75:2: vardeclaration : ID attribute -> ^( VAR_DECLARATION ID attribute ) ;
	[GrammarRule("vardeclaration")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> vardeclaration()
	{
		EnterRule_vardeclaration();
		EnterRule("vardeclaration", 16);
		TraceIn("vardeclaration", 16);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken ID74 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> attribute75 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree ID74_tree = default(COOLCommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "vardeclaration");
		DebugLocation(75, 50);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:76:3: ( ID attribute -> ^( VAR_DECLARATION ID attribute ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:76:5: ID attribute
			{
			DebugLocation(76, 5);
			ID74=(IToken)Match(input,ID,Follow._ID_in_vardeclaration563);  
			stream_ID.Add(ID74);

			DebugLocation(76, 8);
			PushFollow(Follow._attribute_in_vardeclaration565);
			attribute75=attribute();
			PopFollow();

			stream_attribute.Add(attribute75.Tree);


			{
			// AST REWRITE
			// elements: attribute, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (COOLCommonTree)adaptor.Nil();
			// 76:17: -> ^( VAR_DECLARATION ID attribute )
			{
				DebugLocation(76, 19);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:76:19: ^( VAR_DECLARATION ID attribute )
				{
				COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
				DebugLocation(76, 21);
				root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

				DebugLocation(76, 37);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(76, 41);
				adaptor.AddChild(root_1, stream_attribute.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("vardeclaration", 16);
			LeaveRule("vardeclaration", 16);
			LeaveRule_vardeclaration();
		}
		DebugLocation(76, 50);
		} finally { DebugExitRule(GrammarFileName, "vardeclaration"); }
		return retval;

	}
	// $ANTLR end "vardeclaration"

	partial void EnterRule_var_list_declaration();
	partial void LeaveRule_var_list_declaration();

	// $ANTLR start "var_list_declaration"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:77:2: var_list_declaration : ( vardeclaration -> vardeclaration ) ( COMA vardeclaration -> ^( VAR_DECLARATION_LIST $var_list_declaration vardeclaration ) )* ;
	[GrammarRule("var_list_declaration")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> var_list_declaration()
	{
		EnterRule_var_list_declaration();
		EnterRule("var_list_declaration", 17);
		TraceIn("var_list_declaration", 17);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken COMA77 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> vardeclaration76 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> vardeclaration78 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree COMA77_tree = default(COOLCommonTree);
		RewriteRuleITokenStream stream_COMA=new RewriteRuleITokenStream(adaptor,"token COMA");
		RewriteRuleSubtreeStream stream_vardeclaration=new RewriteRuleSubtreeStream(adaptor,"rule vardeclaration");
		try { DebugEnterRule(GrammarFileName, "var_list_declaration");
		DebugLocation(77, 123);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:78:3: ( ( vardeclaration -> vardeclaration ) ( COMA vardeclaration -> ^( VAR_DECLARATION_LIST $var_list_declaration vardeclaration ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:78:6: ( vardeclaration -> vardeclaration ) ( COMA vardeclaration -> ^( VAR_DECLARATION_LIST $var_list_declaration vardeclaration ) )*
			{
			DebugLocation(78, 6);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:78:6: ( vardeclaration -> vardeclaration )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:78:7: vardeclaration
			{
			DebugLocation(78, 7);
			PushFollow(Follow._vardeclaration_in_var_list_declaration586);
			vardeclaration76=vardeclaration();
			PopFollow();

			stream_vardeclaration.Add(vardeclaration76.Tree);


			{
			// AST REWRITE
			// elements: vardeclaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (COOLCommonTree)adaptor.Nil();
			// 78:21: -> vardeclaration
			{
				DebugLocation(78, 24);
				adaptor.AddChild(root_0, stream_vardeclaration.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(78, 40);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:78:40: ( COMA vardeclaration -> ^( VAR_DECLARATION_LIST $var_list_declaration vardeclaration ) )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==COMA))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:78:41: COMA vardeclaration
					{
					DebugLocation(78, 41);
					COMA77=(IToken)Match(input,COMA,Follow._COMA_in_var_list_declaration593);  
					stream_COMA.Add(COMA77);

					DebugLocation(78, 46);
					PushFollow(Follow._vardeclaration_in_var_list_declaration595);
					vardeclaration78=vardeclaration();
					PopFollow();

					stream_vardeclaration.Add(vardeclaration78.Tree);


					{
					// AST REWRITE
					// elements: var_list_declaration, vardeclaration
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (COOLCommonTree)adaptor.Nil();
					// 78:60: -> ^( VAR_DECLARATION_LIST $var_list_declaration vardeclaration )
					{
						DebugLocation(78, 62);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:78:62: ^( VAR_DECLARATION_LIST $var_list_declaration vardeclaration )
						{
						COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
						DebugLocation(78, 64);
						root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(VAR_DECLARATION_LIST, "VAR_DECLARATION_LIST"), root_1);

						DebugLocation(78, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(78, 107);
						adaptor.AddChild(root_1, stream_vardeclaration.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("var_list_declaration", 17);
			LeaveRule("var_list_declaration", 17);
			LeaveRule_var_list_declaration();
		}
		DebugLocation(78, 123);
		} finally { DebugExitRule(GrammarFileName, "var_list_declaration"); }
		return retval;

	}
	// $ANTLR end "var_list_declaration"

	partial void EnterRule_case();
	partial void LeaveRule_case();

	// $ANTLR start "case"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:79:2: case : CASE ^ expr OF ! caseBranches ESAC !;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 18);
		TraceIn("case", 18);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken CASE79 = default(IToken);
		IToken OF81 = default(IToken);
		IToken ESAC83 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr80 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> caseBranches82 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree CASE79_tree = default(COOLCommonTree);
		COOLCommonTree OF81_tree = default(COOLCommonTree);
		COOLCommonTree ESAC83_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(79, 41);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:79:6: ( CASE ^ expr OF ! caseBranches ESAC !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:79:8: CASE ^ expr OF ! caseBranches ESAC !
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(79, 12);
			CASE79=(IToken)Match(input,CASE,Follow._CASE_in_case613); 
			CASE79_tree = (COOLCommonTree)adaptor.Create(CASE79);
			root_0 = (COOLCommonTree)adaptor.BecomeRoot(CASE79_tree, root_0);
			DebugLocation(79, 14);
			PushFollow(Follow._expr_in_case616);
			expr80=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr80.Tree);
			DebugLocation(79, 21);
			OF81=(IToken)Match(input,OF,Follow._OF_in_case618); 
			DebugLocation(79, 23);
			PushFollow(Follow._caseBranches_in_case621);
			caseBranches82=caseBranches();
			PopFollow();

			adaptor.AddChild(root_0, caseBranches82.Tree);
			DebugLocation(79, 40);
			ESAC83=(IToken)Match(input,ESAC,Follow._ESAC_in_case623); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 18);
			LeaveRule("case", 18);
			LeaveRule_case();
		}
		DebugLocation(79, 41);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"

	partial void EnterRule_caseBranch();
	partial void LeaveRule_caseBranch();

	// $ANTLR start "caseBranch"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:80:2: caseBranch : param IMPLICS expr END -> ^( CASEBRANCH param expr ) ;
	[GrammarRule("caseBranch")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> caseBranch()
	{
		EnterRule_caseBranch();
		EnterRule("caseBranch", 19);
		TraceIn("caseBranch", 19);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken IMPLICS85 = default(IToken);
		IToken END87 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> param84 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr86 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree IMPLICS85_tree = default(COOLCommonTree);
		COOLCommonTree END87_tree = default(COOLCommonTree);
		RewriteRuleITokenStream stream_IMPLICS=new RewriteRuleITokenStream(adaptor,"token IMPLICS");
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_param=new RewriteRuleSubtreeStream(adaptor,"rule param");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "caseBranch");
		DebugLocation(80, 53);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:81:3: ( param IMPLICS expr END -> ^( CASEBRANCH param expr ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:81:5: param IMPLICS expr END
			{
			DebugLocation(81, 5);
			PushFollow(Follow._param_in_caseBranch635);
			param84=param();
			PopFollow();

			stream_param.Add(param84.Tree);
			DebugLocation(81, 11);
			IMPLICS85=(IToken)Match(input,IMPLICS,Follow._IMPLICS_in_caseBranch637);  
			stream_IMPLICS.Add(IMPLICS85);

			DebugLocation(81, 19);
			PushFollow(Follow._expr_in_caseBranch639);
			expr86=expr();
			PopFollow();

			stream_expr.Add(expr86.Tree);
			DebugLocation(81, 24);
			END87=(IToken)Match(input,END,Follow._END_in_caseBranch641);  
			stream_END.Add(END87);



			{
			// AST REWRITE
			// elements: param, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (COOLCommonTree)adaptor.Nil();
			// 81:27: -> ^( CASEBRANCH param expr )
			{
				DebugLocation(81, 30);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:81:30: ^( CASEBRANCH param expr )
				{
				COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
				DebugLocation(81, 32);
				root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(CASEBRANCH, "CASEBRANCH"), root_1);

				DebugLocation(81, 43);
				adaptor.AddChild(root_1, stream_param.NextTree());
				DebugLocation(81, 49);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseBranch", 19);
			LeaveRule("caseBranch", 19);
			LeaveRule_caseBranch();
		}
		DebugLocation(81, 53);
		} finally { DebugExitRule(GrammarFileName, "caseBranch"); }
		return retval;

	}
	// $ANTLR end "caseBranch"

	partial void EnterRule_caseBranches();
	partial void LeaveRule_caseBranches();

	// $ANTLR start "caseBranches"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:82:2: caseBranches : ( caseBranch -> caseBranch ) ( caseBranch -> ^( CASEBRANCHES $caseBranches caseBranch ) )* ;
	[GrammarRule("caseBranches")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> caseBranches()
	{
		EnterRule_caseBranches();
		EnterRule("caseBranches", 20);
		TraceIn("caseBranches", 20);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		AstParserRuleReturnScope<COOLCommonTree, IToken> caseBranch88 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> caseBranch89 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		RewriteRuleSubtreeStream stream_caseBranch=new RewriteRuleSubtreeStream(adaptor,"rule caseBranch");
		try { DebugEnterRule(GrammarFileName, "caseBranches");
		DebugLocation(82, 85);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:83:3: ( ( caseBranch -> caseBranch ) ( caseBranch -> ^( CASEBRANCHES $caseBranches caseBranch ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:83:5: ( caseBranch -> caseBranch ) ( caseBranch -> ^( CASEBRANCHES $caseBranches caseBranch ) )*
			{
			DebugLocation(83, 5);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:83:5: ( caseBranch -> caseBranch )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:83:6: caseBranch
			{
			DebugLocation(83, 6);
			PushFollow(Follow._caseBranch_in_caseBranches661);
			caseBranch88=caseBranch();
			PopFollow();

			stream_caseBranch.Add(caseBranch88.Tree);


			{
			// AST REWRITE
			// elements: caseBranch
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (COOLCommonTree)adaptor.Nil();
			// 83:16: -> caseBranch
			{
				DebugLocation(83, 18);
				adaptor.AddChild(root_0, stream_caseBranch.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(83, 30);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:83:30: ( caseBranch -> ^( CASEBRANCHES $caseBranches caseBranch ) )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==ID))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:83:31: caseBranch
					{
					DebugLocation(83, 31);
					PushFollow(Follow._caseBranch_in_caseBranches667);
					caseBranch89=caseBranch();
					PopFollow();

					stream_caseBranch.Add(caseBranch89.Tree);


					{
					// AST REWRITE
					// elements: caseBranches, caseBranch
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (COOLCommonTree)adaptor.Nil();
					// 83:41: -> ^( CASEBRANCHES $caseBranches caseBranch )
					{
						DebugLocation(83, 43);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:83:43: ^( CASEBRANCHES $caseBranches caseBranch )
						{
						COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
						DebugLocation(83, 46);
						root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(CASEBRANCHES, "CASEBRANCHES"), root_1);

						DebugLocation(83, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(83, 73);
						adaptor.AddChild(root_1, stream_caseBranch.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseBranches", 20);
			LeaveRule("caseBranches", 20);
			LeaveRule_caseBranches();
		}
		DebugLocation(83, 85);
		} finally { DebugExitRule(GrammarFileName, "caseBranches"); }
		return retval;

	}
	// $ANTLR end "caseBranches"

	partial void EnterRule_new();
	partial void LeaveRule_new();

	// $ANTLR start "new"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:84:2: new : ( NEW ^ TYPE ) ;
	[GrammarRule("new")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> @new()
	{
		EnterRule_new();
		EnterRule("new", 21);
		TraceIn("new", 21);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken NEW90 = default(IToken);
		IToken TYPE91 = default(IToken);

		COOLCommonTree NEW90_tree = default(COOLCommonTree);
		COOLCommonTree TYPE91_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "new");
		DebugLocation(84, 19);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:84:6: ( ( NEW ^ TYPE ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:84:8: ( NEW ^ TYPE )
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(84, 8);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:84:8: ( NEW ^ TYPE )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:84:9: NEW ^ TYPE
			{
			DebugLocation(84, 12);
			NEW90=(IToken)Match(input,NEW,Follow._NEW_in_new688); 
			NEW90_tree = (COOLCommonTree)adaptor.Create(NEW90);
			root_0 = (COOLCommonTree)adaptor.BecomeRoot(NEW90_tree, root_0);
			DebugLocation(84, 14);
			TYPE91=(IToken)Match(input,TYPE,Follow._TYPE_in_new691); 
			TYPE91_tree = (COOLCommonTree)adaptor.Create(TYPE91);
			adaptor.AddChild(root_0, TYPE91_tree);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("new", 21);
			LeaveRule("new", 21);
			LeaveRule_new();
		}
		DebugLocation(84, 19);
		} finally { DebugExitRule(GrammarFileName, "new"); }
		return retval;

	}
	// $ANTLR end "new"

	partial void EnterRule_dispatch();
	partial void LeaveRule_dispatch();

	// $ANTLR start "dispatch"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:86:2: dispatch : ( ARROBA ! TYPE | PNT !) ID OP_PARENT ( expr ( COMA ! expr )* )? CL_PARENT !;
	[GrammarRule("dispatch")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> dispatch()
	{
		EnterRule_dispatch();
		EnterRule("dispatch", 22);
		TraceIn("dispatch", 22);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken ARROBA92 = default(IToken);
		IToken TYPE93 = default(IToken);
		IToken PNT94 = default(IToken);
		IToken ID95 = default(IToken);
		IToken OP_PARENT96 = default(IToken);
		IToken COMA98 = default(IToken);
		IToken CL_PARENT100 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr97 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr99 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree ARROBA92_tree = default(COOLCommonTree);
		COOLCommonTree TYPE93_tree = default(COOLCommonTree);
		COOLCommonTree PNT94_tree = default(COOLCommonTree);
		COOLCommonTree ID95_tree = default(COOLCommonTree);
		COOLCommonTree OP_PARENT96_tree = default(COOLCommonTree);
		COOLCommonTree COMA98_tree = default(COOLCommonTree);
		COOLCommonTree CL_PARENT100_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "dispatch");
		DebugLocation(86, 79);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:86:10: ( ( ARROBA ! TYPE | PNT !) ID OP_PARENT ( expr ( COMA ! expr )* )? CL_PARENT !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:86:12: ( ARROBA ! TYPE | PNT !) ID OP_PARENT ( expr ( COMA ! expr )* )? CL_PARENT !
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(86, 12);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:86:12: ( ARROBA ! TYPE | PNT !)
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==ARROBA))
			{
				alt14 = 1;
			}
			else if ((LA14_0==PNT))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:86:13: ARROBA ! TYPE
				{
				DebugLocation(86, 19);
				ARROBA92=(IToken)Match(input,ARROBA,Follow._ARROBA_in_dispatch703); 
				DebugLocation(86, 21);
				TYPE93=(IToken)Match(input,TYPE,Follow._TYPE_in_dispatch706); 
				TYPE93_tree = (COOLCommonTree)adaptor.Create(TYPE93);
				adaptor.AddChild(root_0, TYPE93_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:86:27: PNT !
				{
				DebugLocation(86, 30);
				PNT94=(IToken)Match(input,PNT,Follow._PNT_in_dispatch709); 

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(86, 33);
			ID95=(IToken)Match(input,ID,Follow._ID_in_dispatch713); 
			ID95_tree = (COOLCommonTree)adaptor.Create(ID95);
			adaptor.AddChild(root_0, ID95_tree);
			DebugLocation(86, 36);
			OP_PARENT96=(IToken)Match(input,OP_PARENT,Follow._OP_PARENT_in_dispatch715); 
			OP_PARENT96_tree = (COOLCommonTree)adaptor.Create(OP_PARENT96);
			adaptor.AddChild(root_0, OP_PARENT96_tree);
			DebugLocation(86, 46);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:86:46: ( expr ( COMA ! expr )* )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if (((LA16_0>=BOOLEAN && LA16_0<=CASE)||(LA16_0>=ID && LA16_0<=IF)||LA16_0==ISVOID||LA16_0==LET||(LA16_0>=NANARITA && LA16_0<=NEW)||(LA16_0>=NOT && LA16_0<=NUMBER)||(LA16_0>=OP_LLAVE && LA16_0<=OP_PARENT)||LA16_0==STRING||LA16_0==TYPE||LA16_0==WHILE))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:86:47: expr ( COMA ! expr )*
				{
				DebugLocation(86, 47);
				PushFollow(Follow._expr_in_dispatch718);
				expr97=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr97.Tree);
				DebugLocation(86, 52);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:86:52: ( COMA ! expr )*
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==COMA))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch ( alt15 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:86:54: COMA ! expr
						{
						DebugLocation(86, 58);
						COMA98=(IToken)Match(input,COMA,Follow._COMA_in_dispatch722); 
						DebugLocation(86, 60);
						PushFollow(Follow._expr_in_dispatch725);
						expr99=expr();
						PopFollow();

						adaptor.AddChild(root_0, expr99.Tree);

						}
						break;

					default:
						goto loop15;
					}
				}

				loop15:
					;

				} finally { DebugExitSubRule(15); }


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(86, 78);
			CL_PARENT100=(IToken)Match(input,CL_PARENT,Follow._CL_PARENT_in_dispatch731); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dispatch", 22);
			LeaveRule("dispatch", 22);
			LeaveRule_dispatch();
		}
		DebugLocation(86, 79);
		} finally { DebugExitRule(GrammarFileName, "dispatch"); }
		return retval;

	}
	// $ANTLR end "dispatch"

	partial void EnterRule_exprlist1();
	partial void LeaveRule_exprlist1();

	// $ANTLR start "exprlist1"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:87:2: exprlist1 : ( expr ( COMA ! expr )* )? ;
	[GrammarRule("exprlist1")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> exprlist1()
	{
		EnterRule_exprlist1();
		EnterRule("exprlist1", 23);
		TraceIn("exprlist1", 23);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken COMA102 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr101 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr103 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree COMA102_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "exprlist1");
		DebugLocation(87, 26);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:88:3: ( ( expr ( COMA ! expr )* )? )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:88:5: ( expr ( COMA ! expr )* )?
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(88, 5);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:88:5: ( expr ( COMA ! expr )* )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if (((LA18_0>=BOOLEAN && LA18_0<=CASE)||(LA18_0>=ID && LA18_0<=IF)||LA18_0==ISVOID||LA18_0==LET||(LA18_0>=NANARITA && LA18_0<=NEW)||(LA18_0>=NOT && LA18_0<=NUMBER)||(LA18_0>=OP_LLAVE && LA18_0<=OP_PARENT)||LA18_0==STRING||LA18_0==TYPE||LA18_0==WHILE))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:88:6: expr ( COMA ! expr )*
				{
				DebugLocation(88, 6);
				PushFollow(Follow._expr_in_exprlist1744);
				expr101=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr101.Tree);
				DebugLocation(88, 11);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:88:11: ( COMA ! expr )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==COMA))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:88:13: COMA ! expr
						{
						DebugLocation(88, 17);
						COMA102=(IToken)Match(input,COMA,Follow._COMA_in_exprlist1748); 
						DebugLocation(88, 19);
						PushFollow(Follow._expr_in_exprlist1751);
						expr103=expr();
						PopFollow();

						adaptor.AddChild(root_0, expr103.Tree);

						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }


				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exprlist1", 23);
			LeaveRule("exprlist1", 23);
			LeaveRule_exprlist1();
		}
		DebugLocation(88, 26);
		} finally { DebugExitRule(GrammarFileName, "exprlist1"); }
		return retval;

	}
	// $ANTLR end "exprlist1"

	partial void EnterRule_dispatch2();
	partial void LeaveRule_dispatch2();

	// $ANTLR start "dispatch2"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:91:2: dispatch2 : OP_PARENT ( expr ( COMA ! expr )* )? CL_PARENT !;
	[GrammarRule("dispatch2")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> dispatch2()
	{
		EnterRule_dispatch2();
		EnterRule("dispatch2", 24);
		TraceIn("dispatch2", 24);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken OP_PARENT104 = default(IToken);
		IToken COMA106 = default(IToken);
		IToken CL_PARENT108 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr105 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr107 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree OP_PARENT104_tree = default(COOLCommonTree);
		COOLCommonTree COMA106_tree = default(COOLCommonTree);
		COOLCommonTree CL_PARENT108_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "dispatch2");
		DebugLocation(91, 49);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:92:3: ( OP_PARENT ( expr ( COMA ! expr )* )? CL_PARENT !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:92:6: OP_PARENT ( expr ( COMA ! expr )* )? CL_PARENT !
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(92, 6);
			OP_PARENT104=(IToken)Match(input,OP_PARENT,Follow._OP_PARENT_in_dispatch2771); 
			OP_PARENT104_tree = (COOLCommonTree)adaptor.Create(OP_PARENT104);
			adaptor.AddChild(root_0, OP_PARENT104_tree);
			DebugLocation(92, 16);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:92:16: ( expr ( COMA ! expr )* )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if (((LA20_0>=BOOLEAN && LA20_0<=CASE)||(LA20_0>=ID && LA20_0<=IF)||LA20_0==ISVOID||LA20_0==LET||(LA20_0>=NANARITA && LA20_0<=NEW)||(LA20_0>=NOT && LA20_0<=NUMBER)||(LA20_0>=OP_LLAVE && LA20_0<=OP_PARENT)||LA20_0==STRING||LA20_0==TYPE||LA20_0==WHILE))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:92:17: expr ( COMA ! expr )*
				{
				DebugLocation(92, 17);
				PushFollow(Follow._expr_in_dispatch2774);
				expr105=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr105.Tree);
				DebugLocation(92, 22);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:92:22: ( COMA ! expr )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==COMA))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:92:24: COMA ! expr
						{
						DebugLocation(92, 28);
						COMA106=(IToken)Match(input,COMA,Follow._COMA_in_dispatch2778); 
						DebugLocation(92, 30);
						PushFollow(Follow._expr_in_dispatch2781);
						expr107=expr();
						PopFollow();

						adaptor.AddChild(root_0, expr107.Tree);

						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(92, 48);
			CL_PARENT108=(IToken)Match(input,CL_PARENT,Follow._CL_PARENT_in_dispatch2787); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dispatch2", 24);
			LeaveRule("dispatch2", 24);
			LeaveRule_dispatch2();
		}
		DebugLocation(92, 49);
		} finally { DebugExitRule(GrammarFileName, "dispatch2"); }
		return retval;

	}
	// $ANTLR end "dispatch2"

	partial void EnterRule_operations();
	partial void LeaveRule_operations();

	// $ANTLR start "operations"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:93:2: operations : lv1 ;
	[GrammarRule("operations")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> operations()
	{
		EnterRule_operations();
		EnterRule("operations", 25);
		TraceIn("operations", 25);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		AstParserRuleReturnScope<COOLCommonTree, IToken> lv1109 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "operations");
		DebugLocation(93, 9);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:94:3: ( lv1 )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:94:6: lv1
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(94, 6);
			PushFollow(Follow._lv1_in_operations800);
			lv1109=lv1();
			PopFollow();

			adaptor.AddChild(root_0, lv1109.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operations", 25);
			LeaveRule("operations", 25);
			LeaveRule_operations();
		}
		DebugLocation(94, 9);
		} finally { DebugExitRule(GrammarFileName, "operations"); }
		return retval;

	}
	// $ANTLR end "operations"

	partial void EnterRule_lv1();
	partial void LeaveRule_lv1();

	// $ANTLR start "lv1"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:95:3: lv1 : lv2 ( LEQ ^ lv1 | GEQ ^ lv1 | L ^ lv1 | G ^ lv1 | EQ ^ lv1 )? ;
	[GrammarRule("lv1")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> lv1()
	{
		EnterRule_lv1();
		EnterRule("lv1", 26);
		TraceIn("lv1", 26);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken LEQ111 = default(IToken);
		IToken GEQ113 = default(IToken);
		IToken L115 = default(IToken);
		IToken G117 = default(IToken);
		IToken EQ119 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> lv2110 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> lv1112 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> lv1114 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> lv1116 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> lv1118 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> lv1120 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree LEQ111_tree = default(COOLCommonTree);
		COOLCommonTree GEQ113_tree = default(COOLCommonTree);
		COOLCommonTree L115_tree = default(COOLCommonTree);
		COOLCommonTree G117_tree = default(COOLCommonTree);
		COOLCommonTree EQ119_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "lv1");
		DebugLocation(95, 55);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:95:6: ( lv2 ( LEQ ^ lv1 | GEQ ^ lv1 | L ^ lv1 | G ^ lv1 | EQ ^ lv1 )? )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:95:9: lv2 ( LEQ ^ lv1 | GEQ ^ lv1 | L ^ lv1 | G ^ lv1 | EQ ^ lv1 )?
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(95, 9);
			PushFollow(Follow._lv2_in_lv1810);
			lv2110=lv2();
			PopFollow();

			adaptor.AddChild(root_0, lv2110.Tree);
			DebugLocation(95, 13);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:95:13: ( LEQ ^ lv1 | GEQ ^ lv1 | L ^ lv1 | G ^ lv1 | EQ ^ lv1 )?
			int alt21=6;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case LEQ:
				{
				alt21 = 1;
				}
				break;
			case GEQ:
				{
				alt21 = 2;
				}
				break;
			case L:
				{
				alt21 = 3;
				}
				break;
			case G:
				{
				alt21 = 4;
				}
				break;
			case EQ:
				{
				alt21 = 5;
				}
				break;
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:95:15: LEQ ^ lv1
				{
				DebugLocation(95, 18);
				LEQ111=(IToken)Match(input,LEQ,Follow._LEQ_in_lv1814); 
				LEQ111_tree = (COOLCommonTree)adaptor.Create(LEQ111);
				root_0 = (COOLCommonTree)adaptor.BecomeRoot(LEQ111_tree, root_0);
				DebugLocation(95, 20);
				PushFollow(Follow._lv1_in_lv1817);
				lv1112=lv1();
				PopFollow();

				adaptor.AddChild(root_0, lv1112.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:95:24: GEQ ^ lv1
				{
				DebugLocation(95, 27);
				GEQ113=(IToken)Match(input,GEQ,Follow._GEQ_in_lv1819); 
				GEQ113_tree = (COOLCommonTree)adaptor.Create(GEQ113);
				root_0 = (COOLCommonTree)adaptor.BecomeRoot(GEQ113_tree, root_0);
				DebugLocation(95, 29);
				PushFollow(Follow._lv1_in_lv1822);
				lv1114=lv1();
				PopFollow();

				adaptor.AddChild(root_0, lv1114.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:95:33: L ^ lv1
				{
				DebugLocation(95, 34);
				L115=(IToken)Match(input,L,Follow._L_in_lv1824); 
				L115_tree = (COOLCommonTree)adaptor.Create(L115);
				root_0 = (COOLCommonTree)adaptor.BecomeRoot(L115_tree, root_0);
				DebugLocation(95, 36);
				PushFollow(Follow._lv1_in_lv1827);
				lv1116=lv1();
				PopFollow();

				adaptor.AddChild(root_0, lv1116.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:95:40: G ^ lv1
				{
				DebugLocation(95, 41);
				G117=(IToken)Match(input,G,Follow._G_in_lv1829); 
				G117_tree = (COOLCommonTree)adaptor.Create(G117);
				root_0 = (COOLCommonTree)adaptor.BecomeRoot(G117_tree, root_0);
				DebugLocation(95, 43);
				PushFollow(Follow._lv1_in_lv1832);
				lv1118=lv1();
				PopFollow();

				adaptor.AddChild(root_0, lv1118.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:95:47: EQ ^ lv1
				{
				DebugLocation(95, 49);
				EQ119=(IToken)Match(input,EQ,Follow._EQ_in_lv1834); 
				EQ119_tree = (COOLCommonTree)adaptor.Create(EQ119);
				root_0 = (COOLCommonTree)adaptor.BecomeRoot(EQ119_tree, root_0);
				DebugLocation(95, 51);
				PushFollow(Follow._lv1_in_lv1837);
				lv1120=lv1();
				PopFollow();

				adaptor.AddChild(root_0, lv1120.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lv1", 26);
			LeaveRule("lv1", 26);
			LeaveRule_lv1();
		}
		DebugLocation(95, 55);
		} finally { DebugExitRule(GrammarFileName, "lv1"); }
		return retval;

	}
	// $ANTLR end "lv1"

	partial void EnterRule_lv2();
	partial void LeaveRule_lv2();

	// $ANTLR start "lv2"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:96:3: lv2 : lv3 ( PLUS ^ lv2 | MINUS ^ lv2 )? ;
	[GrammarRule("lv2")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> lv2()
	{
		EnterRule_lv2();
		EnterRule("lv2", 27);
		TraceIn("lv2", 27);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken PLUS122 = default(IToken);
		IToken MINUS124 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> lv3121 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> lv2123 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> lv2125 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree PLUS122_tree = default(COOLCommonTree);
		COOLCommonTree MINUS124_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "lv2");
		DebugLocation(96, 38);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:96:6: ( lv3 ( PLUS ^ lv2 | MINUS ^ lv2 )? )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:96:8: lv3 ( PLUS ^ lv2 | MINUS ^ lv2 )?
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(96, 8);
			PushFollow(Follow._lv3_in_lv2847);
			lv3121=lv3();
			PopFollow();

			adaptor.AddChild(root_0, lv3121.Tree);
			DebugLocation(96, 12);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:96:12: ( PLUS ^ lv2 | MINUS ^ lv2 )?
			int alt22=3;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==PLUS))
			{
				alt22 = 1;
			}
			else if ((LA22_0==MINUS))
			{
				alt22 = 2;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:96:14: PLUS ^ lv2
				{
				DebugLocation(96, 18);
				PLUS122=(IToken)Match(input,PLUS,Follow._PLUS_in_lv2851); 
				PLUS122_tree = (COOLCommonTree)adaptor.Create(PLUS122);
				root_0 = (COOLCommonTree)adaptor.BecomeRoot(PLUS122_tree, root_0);
				DebugLocation(96, 21);
				PushFollow(Follow._lv2_in_lv2855);
				lv2123=lv2();
				PopFollow();

				adaptor.AddChild(root_0, lv2123.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:96:25: MINUS ^ lv2
				{
				DebugLocation(96, 30);
				MINUS124=(IToken)Match(input,MINUS,Follow._MINUS_in_lv2857); 
				MINUS124_tree = (COOLCommonTree)adaptor.Create(MINUS124);
				root_0 = (COOLCommonTree)adaptor.BecomeRoot(MINUS124_tree, root_0);
				DebugLocation(96, 33);
				PushFollow(Follow._lv2_in_lv2861);
				lv2125=lv2();
				PopFollow();

				adaptor.AddChild(root_0, lv2125.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lv2", 27);
			LeaveRule("lv2", 27);
			LeaveRule_lv2();
		}
		DebugLocation(96, 38);
		} finally { DebugExitRule(GrammarFileName, "lv2"); }
		return retval;

	}
	// $ANTLR end "lv2"

	partial void EnterRule_lv3();
	partial void LeaveRule_lv3();

	// $ANTLR start "lv3"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:97:3: lv3 : lv4 ( MULT ^ lv3 | DIV ^ lv3 )? ;
	[GrammarRule("lv3")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> lv3()
	{
		EnterRule_lv3();
		EnterRule("lv3", 28);
		TraceIn("lv3", 28);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken MULT127 = default(IToken);
		IToken DIV129 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> lv4126 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> lv3128 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> lv3130 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree MULT127_tree = default(COOLCommonTree);
		COOLCommonTree DIV129_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "lv3");
		DebugLocation(97, 34);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:97:6: ( lv4 ( MULT ^ lv3 | DIV ^ lv3 )? )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:97:8: lv4 ( MULT ^ lv3 | DIV ^ lv3 )?
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(97, 8);
			PushFollow(Follow._lv4_in_lv3872);
			lv4126=lv4();
			PopFollow();

			adaptor.AddChild(root_0, lv4126.Tree);
			DebugLocation(97, 11);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:97:11: ( MULT ^ lv3 | DIV ^ lv3 )?
			int alt23=3;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==MULT))
			{
				alt23 = 1;
			}
			else if ((LA23_0==DIV))
			{
				alt23 = 2;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:97:13: MULT ^ lv3
				{
				DebugLocation(97, 17);
				MULT127=(IToken)Match(input,MULT,Follow._MULT_in_lv3875); 
				MULT127_tree = (COOLCommonTree)adaptor.Create(MULT127);
				root_0 = (COOLCommonTree)adaptor.BecomeRoot(MULT127_tree, root_0);
				DebugLocation(97, 20);
				PushFollow(Follow._lv3_in_lv3879);
				lv3128=lv3();
				PopFollow();

				adaptor.AddChild(root_0, lv3128.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:97:24: DIV ^ lv3
				{
				DebugLocation(97, 27);
				DIV129=(IToken)Match(input,DIV,Follow._DIV_in_lv3881); 
				DIV129_tree = (COOLCommonTree)adaptor.Create(DIV129);
				root_0 = (COOLCommonTree)adaptor.BecomeRoot(DIV129_tree, root_0);
				DebugLocation(97, 30);
				PushFollow(Follow._lv3_in_lv3885);
				lv3130=lv3();
				PopFollow();

				adaptor.AddChild(root_0, lv3130.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lv3", 28);
			LeaveRule("lv3", 28);
			LeaveRule_lv3();
		}
		DebugLocation(97, 34);
		} finally { DebugExitRule(GrammarFileName, "lv3"); }
		return retval;

	}
	// $ANTLR end "lv3"

	partial void EnterRule_lv4();
	partial void LeaveRule_lv4();

	// $ANTLR start "lv4"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:98:3: lv4 : lv5 ;
	[GrammarRule("lv4")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> lv4()
	{
		EnterRule_lv4();
		EnterRule("lv4", 29);
		TraceIn("lv4", 29);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		AstParserRuleReturnScope<COOLCommonTree, IToken> lv5131 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lv4");
		DebugLocation(98, 11);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:98:6: ( lv5 )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:98:8: lv5
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(98, 8);
			PushFollow(Follow._lv5_in_lv4895);
			lv5131=lv5();
			PopFollow();

			adaptor.AddChild(root_0, lv5131.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lv4", 29);
			LeaveRule("lv4", 29);
			LeaveRule_lv4();
		}
		DebugLocation(98, 11);
		} finally { DebugExitRule(GrammarFileName, "lv4"); }
		return retval;

	}
	// $ANTLR end "lv4"

	partial void EnterRule_lv5();
	partial void LeaveRule_lv5();

	// $ANTLR start "lv5"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:99:3: lv5 : lv6 ;
	[GrammarRule("lv5")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> lv5()
	{
		EnterRule_lv5();
		EnterRule("lv5", 30);
		TraceIn("lv5", 30);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		AstParserRuleReturnScope<COOLCommonTree, IToken> lv6132 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lv5");
		DebugLocation(99, 12);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:99:6: ( lv6 )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:99:9: lv6
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(99, 9);
			PushFollow(Follow._lv6_in_lv5905);
			lv6132=lv6();
			PopFollow();

			adaptor.AddChild(root_0, lv6132.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lv5", 30);
			LeaveRule("lv5", 30);
			LeaveRule_lv5();
		}
		DebugLocation(99, 12);
		} finally { DebugExitRule(GrammarFileName, "lv5"); }
		return retval;

	}
	// $ANTLR end "lv5"

	partial void EnterRule_lv6();
	partial void LeaveRule_lv6();

	// $ANTLR start "lv6"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:100:3: lv6 : ( ( ID -> ID ) ( dispatch2 -> ^( DISPATCH $lv6 dispatch2 ) | dispatch -> ^( DISPATCH $lv6 dispatch ) )? | ( tmp2 -> tmp2 ) ( dispatch -> ^( DISPATCH $lv6 dispatch ) )? | ( constant -> constant ) ( dispatch )? ) ;
	[GrammarRule("lv6")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> lv6()
	{
		EnterRule_lv6();
		EnterRule("lv6", 31);
		TraceIn("lv6", 31);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken ID133 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> dispatch2134 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> dispatch135 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> tmp2136 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> dispatch137 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> constant138 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);
		AstParserRuleReturnScope<COOLCommonTree, IToken> dispatch139 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree ID133_tree = default(COOLCommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dispatch2=new RewriteRuleSubtreeStream(adaptor,"rule dispatch2");
		RewriteRuleSubtreeStream stream_tmp2=new RewriteRuleSubtreeStream(adaptor,"rule tmp2");
		RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
		RewriteRuleSubtreeStream stream_dispatch=new RewriteRuleSubtreeStream(adaptor,"rule dispatch");
		try { DebugEnterRule(GrammarFileName, "lv6");
		DebugLocation(100, 36);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:100:6: ( ( ( ID -> ID ) ( dispatch2 -> ^( DISPATCH $lv6 dispatch2 ) | dispatch -> ^( DISPATCH $lv6 dispatch ) )? | ( tmp2 -> tmp2 ) ( dispatch -> ^( DISPATCH $lv6 dispatch ) )? | ( constant -> constant ) ( dispatch )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:100:8: ( ( ID -> ID ) ( dispatch2 -> ^( DISPATCH $lv6 dispatch2 ) | dispatch -> ^( DISPATCH $lv6 dispatch ) )? | ( tmp2 -> tmp2 ) ( dispatch -> ^( DISPATCH $lv6 dispatch ) )? | ( constant -> constant ) ( dispatch )? )
			{
			DebugLocation(100, 8);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:100:8: ( ( ID -> ID ) ( dispatch2 -> ^( DISPATCH $lv6 dispatch2 ) | dispatch -> ^( DISPATCH $lv6 dispatch ) )? | ( tmp2 -> tmp2 ) ( dispatch -> ^( DISPATCH $lv6 dispatch ) )? | ( constant -> constant ) ( dispatch )? )
			int alt27=3;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt27 = 1;
				}
				break;
			case OP_PARENT:
				{
				alt27 = 2;
				}
				break;
			case BOOLEAN:
			case NUMBER:
			case STRING:
				{
				alt27 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:100:9: ( ID -> ID ) ( dispatch2 -> ^( DISPATCH $lv6 dispatch2 ) | dispatch -> ^( DISPATCH $lv6 dispatch ) )?
				{
				DebugLocation(100, 9);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:100:9: ( ID -> ID )
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:100:10: ID
				{
				DebugLocation(100, 10);
				ID133=(IToken)Match(input,ID,Follow._ID_in_lv6916);  
				stream_ID.Add(ID133);



				{
				// AST REWRITE
				// elements: ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (COOLCommonTree)adaptor.Nil();
				// 100:12: -> ID
				{
					DebugLocation(100, 14);
					adaptor.AddChild(root_0, stream_ID.NextNode());

				}

				retval.Tree = root_0;
				}

				}

				DebugLocation(100, 18);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:100:18: ( dispatch2 -> ^( DISPATCH $lv6 dispatch2 ) | dispatch -> ^( DISPATCH $lv6 dispatch ) )?
				int alt24=3;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==OP_PARENT))
				{
					alt24 = 1;
				}
				else if ((LA24_0==ARROBA||LA24_0==PNT))
				{
					alt24 = 2;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:100:19: dispatch2
					{
					DebugLocation(100, 19);
					PushFollow(Follow._dispatch2_in_lv6922);
					dispatch2134=dispatch2();
					PopFollow();

					stream_dispatch2.Add(dispatch2134.Tree);


					{
					// AST REWRITE
					// elements: dispatch2, lv6
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (COOLCommonTree)adaptor.Nil();
					// 100:28: -> ^( DISPATCH $lv6 dispatch2 )
					{
						DebugLocation(100, 30);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:100:30: ^( DISPATCH $lv6 dispatch2 )
						{
						COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
						DebugLocation(100, 32);
						root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(DISPATCH, "DISPATCH"), root_1);

						DebugLocation(100, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(100, 47);
						adaptor.AddChild(root_1, stream_dispatch2.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:100:59: dispatch
					{
					DebugLocation(100, 59);
					PushFollow(Follow._dispatch_in_lv6935);
					dispatch135=dispatch();
					PopFollow();

					stream_dispatch.Add(dispatch135.Tree);


					{
					// AST REWRITE
					// elements: dispatch, lv6
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (COOLCommonTree)adaptor.Nil();
					// 100:67: -> ^( DISPATCH $lv6 dispatch )
					{
						DebugLocation(100, 69);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:100:69: ^( DISPATCH $lv6 dispatch )
						{
						COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
						DebugLocation(100, 71);
						root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(DISPATCH, "DISPATCH"), root_1);

						DebugLocation(100, 81);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(100, 85);
						adaptor.AddChild(root_1, stream_dispatch.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(24); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:101:4: ( tmp2 -> tmp2 ) ( dispatch -> ^( DISPATCH $lv6 dispatch ) )?
				{
				DebugLocation(101, 4);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:101:4: ( tmp2 -> tmp2 )
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:101:5: tmp2
				{
				DebugLocation(101, 5);
				PushFollow(Follow._tmp2_in_lv6952);
				tmp2136=tmp2();
				PopFollow();

				stream_tmp2.Add(tmp2136.Tree);


				{
				// AST REWRITE
				// elements: tmp2
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (COOLCommonTree)adaptor.Nil();
				// 101:9: -> tmp2
				{
					DebugLocation(101, 11);
					adaptor.AddChild(root_0, stream_tmp2.NextTree());

				}

				retval.Tree = root_0;
				}

				}

				DebugLocation(101, 17);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:101:17: ( dispatch -> ^( DISPATCH $lv6 dispatch ) )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==ARROBA||LA25_0==PNT))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:101:18: dispatch
					{
					DebugLocation(101, 18);
					PushFollow(Follow._dispatch_in_lv6958);
					dispatch137=dispatch();
					PopFollow();

					stream_dispatch.Add(dispatch137.Tree);


					{
					// AST REWRITE
					// elements: lv6, dispatch
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (COOLCommonTree)adaptor.Nil();
					// 101:26: -> ^( DISPATCH $lv6 dispatch )
					{
						DebugLocation(101, 28);
						// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:101:28: ^( DISPATCH $lv6 dispatch )
						{
						COOLCommonTree root_1 = (COOLCommonTree)adaptor.Nil();
						DebugLocation(101, 30);
						root_1 = (COOLCommonTree)adaptor.BecomeRoot((COOLCommonTree)adaptor.Create(DISPATCH, "DISPATCH"), root_1);

						DebugLocation(101, 40);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(101, 44);
						adaptor.AddChild(root_1, stream_dispatch.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(25); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:102:4: ( constant -> constant ) ( dispatch )?
				{
				DebugLocation(102, 4);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:102:4: ( constant -> constant )
				DebugEnterAlt(1);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:102:5: constant
				{
				DebugLocation(102, 5);
				PushFollow(Follow._constant_in_lv6975);
				constant138=constant();
				PopFollow();

				stream_constant.Add(constant138.Tree);


				{
				// AST REWRITE
				// elements: constant
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (COOLCommonTree)adaptor.Nil();
				// 102:13: -> constant
				{
					DebugLocation(102, 15);
					adaptor.AddChild(root_0, stream_constant.NextTree());

				}

				retval.Tree = root_0;
				}

				}

				DebugLocation(102, 25);
				// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:102:25: ( dispatch )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==ARROBA||LA26_0==PNT))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:102:25: dispatch
					{
					DebugLocation(102, 25);
					PushFollow(Follow._dispatch_in_lv6980);
					dispatch139=dispatch();
					PopFollow();

					stream_dispatch.Add(dispatch139.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lv6", 31);
			LeaveRule("lv6", 31);
			LeaveRule_lv6();
		}
		DebugLocation(102, 36);
		} finally { DebugExitRule(GrammarFileName, "lv6"); }
		return retval;

	}
	// $ANTLR end "lv6"

	partial void EnterRule_tmp1();
	partial void LeaveRule_tmp1();

	// $ANTLR start "tmp1"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:103:3: tmp1 : ID tmp ;
	[GrammarRule("tmp1")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> tmp1()
	{
		EnterRule_tmp1();
		EnterRule("tmp1", 32);
		TraceIn("tmp1", 32);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken ID140 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> tmp141 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree ID140_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "tmp1");
		DebugLocation(103, 15);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:103:7: ( ID tmp )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:103:9: ID tmp
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(103, 9);
			ID140=(IToken)Match(input,ID,Follow._ID_in_tmp1992); 
			ID140_tree = (COOLCommonTree)adaptor.Create(ID140);
			adaptor.AddChild(root_0, ID140_tree);
			DebugLocation(103, 12);
			PushFollow(Follow._tmp_in_tmp1994);
			tmp141=tmp();
			PopFollow();

			adaptor.AddChild(root_0, tmp141.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tmp1", 32);
			LeaveRule("tmp1", 32);
			LeaveRule_tmp1();
		}
		DebugLocation(103, 15);
		} finally { DebugExitRule(GrammarFileName, "tmp1"); }
		return retval;

	}
	// $ANTLR end "tmp1"

	partial void EnterRule_tmp2();
	partial void LeaveRule_tmp2();

	// $ANTLR start "tmp2"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:104:3: tmp2 : OP_PARENT ! expr CL_PARENT !;
	[GrammarRule("tmp2")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> tmp2()
	{
		EnterRule_tmp2();
		EnterRule("tmp2", 33);
		TraceIn("tmp2", 33);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken OP_PARENT142 = default(IToken);
		IToken CL_PARENT144 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr143 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree OP_PARENT142_tree = default(COOLCommonTree);
		COOLCommonTree CL_PARENT144_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "tmp2");
		DebugLocation(104, 34);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:104:7: ( OP_PARENT ! expr CL_PARENT !)
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:104:9: OP_PARENT ! expr CL_PARENT !
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(104, 18);
			OP_PARENT142=(IToken)Match(input,OP_PARENT,Follow._OP_PARENT_in_tmp21003); 
			DebugLocation(104, 20);
			PushFollow(Follow._expr_in_tmp21006);
			expr143=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr143.Tree);
			DebugLocation(104, 34);
			CL_PARENT144=(IToken)Match(input,CL_PARENT,Follow._CL_PARENT_in_tmp21008); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tmp2", 33);
			LeaveRule("tmp2", 33);
			LeaveRule_tmp2();
		}
		DebugLocation(104, 34);
		} finally { DebugExitRule(GrammarFileName, "tmp2"); }
		return retval;

	}
	// $ANTLR end "tmp2"

	partial void EnterRule_tmp();
	partial void LeaveRule_tmp();

	// $ANTLR start "tmp"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:105:3: tmp : ( dispatch2 ) ;
	[GrammarRule("tmp")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> tmp()
	{
		EnterRule_tmp();
		EnterRule("tmp", 34);
		TraceIn("tmp", 34);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		AstParserRuleReturnScope<COOLCommonTree, IToken> dispatch2145 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "tmp");
		DebugLocation(105, 18);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:105:6: ( ( dispatch2 ) )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:105:8: ( dispatch2 )
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(105, 8);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:105:8: ( dispatch2 )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:105:9: dispatch2
			{
			DebugLocation(105, 9);
			PushFollow(Follow._dispatch2_in_tmp1018);
			dispatch2145=dispatch2();
			PopFollow();

			adaptor.AddChild(root_0, dispatch2145.Tree);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tmp", 34);
			LeaveRule("tmp", 34);
			LeaveRule_tmp();
		}
		DebugLocation(105, 18);
		} finally { DebugExitRule(GrammarFileName, "tmp"); }
		return retval;

	}
	// $ANTLR end "tmp"

	partial void EnterRule_nanarita();
	partial void LeaveRule_nanarita();

	// $ANTLR start "nanarita"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:106:2: nanarita : NANARITA ^ expr ;
	[GrammarRule("nanarita")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> nanarita()
	{
		EnterRule_nanarita();
		EnterRule("nanarita", 35);
		TraceIn("nanarita", 35);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken NANARITA146 = default(IToken);
		AstParserRuleReturnScope<COOLCommonTree, IToken> expr147 = default(AstParserRuleReturnScope<COOLCommonTree, IToken>);

		COOLCommonTree NANARITA146_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "nanarita");
		DebugLocation(106, 26);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:106:10: ( NANARITA ^ expr )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:106:12: NANARITA ^ expr
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(106, 20);
			NANARITA146=(IToken)Match(input,NANARITA,Follow._NANARITA_in_nanarita1026); 
			NANARITA146_tree = (COOLCommonTree)adaptor.Create(NANARITA146);
			root_0 = (COOLCommonTree)adaptor.BecomeRoot(NANARITA146_tree, root_0);
			DebugLocation(106, 22);
			PushFollow(Follow._expr_in_nanarita1029);
			expr147=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr147.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nanarita", 35);
			LeaveRule("nanarita", 35);
			LeaveRule_nanarita();
		}
		DebugLocation(106, 26);
		} finally { DebugExitRule(GrammarFileName, "nanarita"); }
		return retval;

	}
	// $ANTLR end "nanarita"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();

	// $ANTLR start "constant"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:107:3: constant : ( STRING | NUMBER | BOOLEAN );
	[GrammarRule("constant")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 36);
		TraceIn("constant", 36);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken set148 = default(IToken);

		COOLCommonTree set148_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(107, 33);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:107:11: ( STRING | NUMBER | BOOLEAN )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(107, 11);

			set148=(IToken)input.LT(1);
			if (input.LA(1)==BOOLEAN||input.LA(1)==NUMBER||input.LA(1)==STRING)
			{
				input.Consume();
				adaptor.AddChild(root_0, (COOLCommonTree)adaptor.Create(set148));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 36);
			LeaveRule("constant", 36);
			LeaveRule_constant();
		}
		DebugLocation(107, 33);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_wsnl();
	partial void LeaveRule_wsnl();

	// $ANTLR start "wsnl"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:108:2: wsnl : ( WS | NL )+ ;
	[GrammarRule("wsnl")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> wsnl()
	{
		EnterRule_wsnl();
		EnterRule("wsnl", 37);
		TraceIn("wsnl", 37);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken set149 = default(IToken);

		COOLCommonTree set149_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "wsnl");
		DebugLocation(108, 17);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:108:7: ( ( WS | NL )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:108:9: ( WS | NL )+
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(108, 9);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:108:9: ( WS | NL )+
			int cnt28=0;
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==NL||LA28_0==WS))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:
					{
					DebugLocation(108, 9);

					set149=(IToken)input.LT(1);
					if (input.LA(1)==NL||input.LA(1)==WS)
					{
						input.Consume();
						adaptor.AddChild(root_0, (COOLCommonTree)adaptor.Create(set149));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					if (cnt28 >= 1)
						goto loop28;

					EarlyExitException eee28 = new EarlyExitException( 28, input );
					DebugRecognitionException(eee28);
					throw eee28;
				}
				cnt28++;
			}
			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("wsnl", 37);
			LeaveRule("wsnl", 37);
			LeaveRule_wsnl();
		}
		DebugLocation(108, 17);
		} finally { DebugExitRule(GrammarFileName, "wsnl"); }
		return retval;

	}
	// $ANTLR end "wsnl"

	partial void EnterRule_compileUnit();
	partial void LeaveRule_compileUnit();

	// $ANTLR start "compileUnit"
	// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:109:1: compileUnit : EOF ;
	[GrammarRule("compileUnit")]
	private AstParserRuleReturnScope<COOLCommonTree, IToken> compileUnit()
	{
		EnterRule_compileUnit();
		EnterRule("compileUnit", 38);
		TraceIn("compileUnit", 38);
		AstParserRuleReturnScope<COOLCommonTree, IToken> retval = new AstParserRuleReturnScope<COOLCommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		COOLCommonTree root_0 = default(COOLCommonTree);

		IToken EOF150 = default(IToken);

		COOLCommonTree EOF150_tree = default(COOLCommonTree);
		try { DebugEnterRule(GrammarFileName, "compileUnit");
		DebugLocation(109, 1);
		try
		{
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:110:2: ( EOF )
			DebugEnterAlt(1);
			// C:\\Users\\Nardo\\Documents\\Visual Studio 2015\\Projects\\COOL\\LexingParsingCOOL\\COOL.g:110:4: EOF
			{
			root_0 = (COOLCommonTree)adaptor.Nil();

			DebugLocation(110, 4);
			EOF150=(IToken)Match(input,EOF,Follow._EOF_in_compileUnit1064); 
			EOF150_tree = (COOLCommonTree)adaptor.Create(EOF150);
			adaptor.AddChild(root_0, EOF150_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (COOLCommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (COOLCommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compileUnit", 38);
			LeaveRule("compileUnit", 38);
			LeaveRule_compileUnit();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "compileUnit"); }
		return retval;

	}
	// $ANTLR end "compileUnit"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _class_in_program94 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _EOF_in_program98 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLASS_in_class117 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _TYPE_in_class120 = new BitSet(new ulong[]{0x200008000000000UL});
		public static readonly BitSet _INHERITS_in_class123 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _TYPE_in_class125 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _OP_LLAVE_in_class129 = new BitSet(new ulong[]{0x800010000UL});
		public static readonly BitSet _feature_list_in_class134 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CL_LLAVE_in_class138 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_class141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _feature_in_feature_list153 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _ID_in_feature162 = new BitSet(new ulong[]{0x400000001000000UL});
		public static readonly BitSet _attribute_in_feature165 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _methodefinition_in_feature176 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_feature188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLEP_in_attribute199 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _TYPE_in_attribute202 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _ASSING_in_attribute205 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_attribute207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PARENT_in_methodefinition218 = new BitSet(new ulong[]{0x800020000UL});
		public static readonly BitSet _params_list_in_methodefinition221 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CL_PARENT_in_methodefinition227 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _DOUBLEP_in_methodefinition230 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _TYPE_in_methodefinition233 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _OP_LLAVE_in_methodefinition236 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_methodefinition239 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CL_LLAVE_in_methodefinition242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _param_in_params_list265 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _COMA_in_params_list268 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _param_in_params_list271 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _ID_in_param290 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _DOUBLEP_in_param293 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _TYPE_in_param296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_in_expr313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionals_in_expr320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _loops_in_expr327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _blocks_in_expr334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_in_expr341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expr348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_in_expr355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operations_in_expr362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPE_in_expr369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_expr378 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_expr381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ISVOID_in_expr390 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_expr394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nanarita_in_expr402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_exprList412 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_exprList414 = new BitSet(new ulong[]{0x66C091800000C02UL,0x10AUL});
		public static readonly BitSet _expr_in_exprList418 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_exprList420 = new BitSet(new ulong[]{0x66C091800000C02UL,0x10AUL});
		public static readonly BitSet _ID_in_assignment431 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ASSING_in_assignment433 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_assignment437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_conditionals447 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_conditionals449 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _THEN_in_conditionals452 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_conditionals454 = new BitSet(new ulong[]{0x82000000UL});
		public static readonly BitSet _ELSE_in_conditionals458 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_conditionals460 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _FI_in_conditionals464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_loops492 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_loops496 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _LOOP_in_loops498 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_loops501 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _POOL_in_loops503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_LLAVE_in_blocks512 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _exprList_in_blocks515 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CL_LLAVE_in_blocks517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LET_in_let532 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _var_list_declaration_in_let535 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _IN_in_let537 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_let539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_vardeclaration563 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _attribute_in_vardeclaration565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _vardeclaration_in_var_list_declaration586 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _COMA_in_var_list_declaration593 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _vardeclaration_in_var_list_declaration595 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _CASE_in_case613 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_case616 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _OF_in_case618 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _caseBranches_in_case621 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ESAC_in_case623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _param_in_caseBranch635 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _IMPLICS_in_caseBranch637 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_caseBranch639 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_caseBranch641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseBranch_in_caseBranches661 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _caseBranch_in_caseBranches667 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _NEW_in_new688 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _TYPE_in_new691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARROBA_in_dispatch703 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _TYPE_in_dispatch706 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _PNT_in_dispatch709 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ID_in_dispatch713 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _OP_PARENT_in_dispatch715 = new BitSet(new ulong[]{0x66C091800020C00UL,0x10AUL});
		public static readonly BitSet _expr_in_dispatch718 = new BitSet(new ulong[]{0x60000UL});
		public static readonly BitSet _COMA_in_dispatch722 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_dispatch725 = new BitSet(new ulong[]{0x60000UL});
		public static readonly BitSet _CL_PARENT_in_dispatch731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_exprlist1744 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _COMA_in_exprlist1748 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_exprlist1751 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _OP_PARENT_in_dispatch2771 = new BitSet(new ulong[]{0x66C091800020C00UL,0x10AUL});
		public static readonly BitSet _expr_in_dispatch2774 = new BitSet(new ulong[]{0x60000UL});
		public static readonly BitSet _COMA_in_dispatch2778 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_dispatch2781 = new BitSet(new ulong[]{0x60000UL});
		public static readonly BitSet _CL_PARENT_in_dispatch2787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lv1_in_operations800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lv2_in_lv1810 = new BitSet(new ulong[]{0x60308000002UL});
		public static readonly BitSet _LEQ_in_lv1814 = new BitSet(new ulong[]{0x440000800000400UL,0x2UL});
		public static readonly BitSet _lv1_in_lv1817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GEQ_in_lv1819 = new BitSet(new ulong[]{0x440000800000400UL,0x2UL});
		public static readonly BitSet _lv1_in_lv1822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _L_in_lv1824 = new BitSet(new ulong[]{0x440000800000400UL,0x2UL});
		public static readonly BitSet _lv1_in_lv1827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _G_in_lv1829 = new BitSet(new ulong[]{0x440000800000400UL,0x2UL});
		public static readonly BitSet _lv1_in_lv1832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EQ_in_lv1834 = new BitSet(new ulong[]{0x440000800000400UL,0x2UL});
		public static readonly BitSet _lv1_in_lv1837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lv3_in_lv2847 = new BitSet(new ulong[]{0x2001000000000002UL});
		public static readonly BitSet _PLUS_in_lv2851 = new BitSet(new ulong[]{0x440000800000400UL,0x2UL});
		public static readonly BitSet _lv2_in_lv2855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_lv2857 = new BitSet(new ulong[]{0x440000800000400UL,0x2UL});
		public static readonly BitSet _lv2_in_lv2861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lv4_in_lv3872 = new BitSet(new ulong[]{0x2000000800002UL});
		public static readonly BitSet _MULT_in_lv3875 = new BitSet(new ulong[]{0x440000800000400UL,0x2UL});
		public static readonly BitSet _lv3_in_lv3879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DIV_in_lv3881 = new BitSet(new ulong[]{0x440000800000400UL,0x2UL});
		public static readonly BitSet _lv3_in_lv3885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lv5_in_lv4895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lv6_in_lv5905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_lv6916 = new BitSet(new ulong[]{0x4400000000000012UL});
		public static readonly BitSet _dispatch2_in_lv6922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dispatch_in_lv6935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tmp2_in_lv6952 = new BitSet(new ulong[]{0x4000000000000012UL});
		public static readonly BitSet _dispatch_in_lv6958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_lv6975 = new BitSet(new ulong[]{0x4000000000000012UL});
		public static readonly BitSet _dispatch_in_lv6980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tmp1992 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _tmp_in_tmp1994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PARENT_in_tmp21003 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_tmp21006 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CL_PARENT_in_tmp21008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dispatch2_in_tmp1018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NANARITA_in_nanarita1026 = new BitSet(new ulong[]{0x66C091800000C00UL,0x10AUL});
		public static readonly BitSet _expr_in_nanarita1029 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_compileUnit1064 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
