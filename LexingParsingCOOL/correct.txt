

class Cons inherits List {
xcar : Int;
xcdr : List;
isNil() : Bool { false };
init(hd : Int, tl : List) : Cons {
{
xcar <- hd;
xcdr <- tl;
self;
}
};
};
class NodeInt{
	value: Int;
	init(value:Int): Node{
		{
			value<-value;
			self;
		}
	};
	getValue(): Int{
		value
	};
	setValue(value: Int): Void{
			value<- value
		};
};
class Tree{
	node: Node;
	childs: ListTree;
	init(value:Int): Tree{
		{
			node<- (new Node).init(value);
			self;
		}
	};
	init(value: Int, listChilds: ListTree): Tree{
		{
			node<- (new Node).init(value);
			child<-listChild;
			tree;
		}
	};
	addchild(value: Int): Void{
		childs.add((new Node).init(value))
	};
	preOrder(): Void{
		{
		
			print(value.getValue());
			if not childs=null then 
				{
					i<- new Int;
					while child.count()>i loop
						{
							child.preOrder();
							i<- i+1;
						}
						pool;
				}
				fi;
		}
	};

};
class BinaryTree inherits Tree{
	leftchild: BinaryTree;
	rightchild: BinaryTree;
	init(value: Int, listChilds: ListTree): Tree{
	
		if listChild.count()>2 then
			Void
			else
				init(value,listChilds(0),listChild(1))
			fi
			
	};
	init(value: Int, childLeft: Int, childRigth: Int): BinaryTree{
		{
			value<- (new Node).init(value);
			leftchild<- (new BinaryTree).init(childLeft);
			rightchild<- (new BinaryTree).init(childRigth);
			self;
		}
	};
};
class Test{
fact(x:Int): Int{
  {
	  i<-new Int;
	  y<-new Int;
	  while y>0 loop
		{
			i <- i*y;
			y<-y-1;
		}
		pool;
		i;
		
	}
};

testoperations(x:Int): Void{
	{
		2+3*5/3-fact(x);
		
	}
}; 
};
//falta parsear e@e1.ID(...)